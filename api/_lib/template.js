"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

var _lodash = require("lodash");

var Vibrant = _interopRequireWildcard(require("node-vibrant"));

import { jsx as ___EmotionJSX } from "@emotion/core";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var reset =
/*#__PURE__*/
process.env.NODE_ENV === "production" ? {
  name: "l0pa8o-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;font-family:Arial,Helvetica,sans-serif;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;};label:reset;"
} : {
  name: "l0pa8o-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;font-family:Arial,Helvetica,sans-serif;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;};label:reset;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;"
} : {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;"
} : {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "qujj5i-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;;label:InstructorGuide;"
} : {
  name: "qujj5i-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: 'contain'
    }, ";label:InstructorGuide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref4
  }, "How to egghead")), (0, _core.jsx)("span", {
    css: _ref5
  }, text)));
}

var _ref7 = process.env.NODE_ENV === "production" ? {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;"
} : {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;"
} : {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;"
} : {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Store(_ref6) {
  var parsedReq = _ref6.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: '628px 628px',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: '50% 50%'
    }, ";label:Store;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref7
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref8
  }, "Store")), (0, _core.jsx)("h1", {
    css: _ref9
  }, text)));
}

var _ref11 = process.env.NODE_ENV === "production" ? {
  name: "lvat14-Podcast",
  styles: "align-items:center;display:flex;height:100%;justify-content:space-between;width:100%;;label:Podcast;"
} : {
  name: "lvat14-Podcast",
  styles: "align-items:center;display:flex;height:100%;justify-content:space-between;width:100%;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "ooxwip-Podcast",
  styles: "align-items:center;display:flex;left:50px;position:absolute;top:50px;;label:Podcast;"
} : {
  name: "ooxwip-Podcast",
  styles: "align-items:center;display:flex;left:50px;position:absolute;top:50px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "ys1178-Podcast",
  styles: "margin-left:20px;;label:Podcast;"
} : {
  name: "ys1178-Podcast",
  styles: "margin-left:20px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "eks377-Podcast",
  styles: "display:flex;flex-direction:column;align-items:space-between;padding-left:50px;max-width:600px;;label:Podcast;"
} : {
  name: "eks377-Podcast",
  styles: "display:flex;flex-direction:column;align-items:space-between;padding-left:50px;max-width:600px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 = process.env.NODE_ENV === "production" ? {
  name: "as3vyj-Podcast",
  styles: "font-size:50px;;label:Podcast;"
} : {
  name: "as3vyj-Podcast",
  styles: "font-size:50px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStPYyIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdJbnRlciwgSGVsdmV0aWNhLCBIZWx2ZXRpY2EgTmV1ZSwgc3lzdGVtLXVpLCBTYW5zLVNlcmlmJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJ1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBIb3cgdG8gZWdnaGVhZFxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMjQyNTI5JyxcbiAgICAgICAgICAgIC8vYmFja2dyb3VuZENvbG9yOiAnI0ZGMkQ1NScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCAjMjQyNTI5LCAtMzJweCAwIDAgIzI0MjUyOScsXG4gICAgICAgICAgICBmb250U2l6ZTogJzQ4cHgnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgICAgcGFkZGluZzogJzhweCAwJ1xuICAgICAgICAgICAgLy9mb250RmFtaWx5OiAnR2VvcmdpYSwgUGFsYXRpbm8sIEJvb2ttYW4sIHNlcmlmJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdJbnRlciwgSGVsdmV0aWNhLCBIZWx2ZXRpY2EgTmV1ZSwgc3lzdGVtLXVpLCBTYW5zLVNlcmlmJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICc2MjhweCA2MjhweCcsXG4gICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlIDUwJSdcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgU3RvcmVcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgey8qIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgICAgICAgIH19XG4gICAgICAgID4gKi99XG4gICAgICAgIDxoMVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgd2hpdGUsIC0zMnB4IDAgMCB3aGl0ZScsXG4gICAgICAgICAgICBmb250U2l6ZTogJzQ4cHgnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgICAgcGFkZGluZzogJzEwcHggMCdcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2gxPlxuICAgICAgICB7LyogPC9kaXY+ICovfVxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb2RjYXN0KHtwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdIZWx2ZXRpY2EsIEhlbHZldGljYSBOZXVlLCBzeXN0ZW0tdWksIFNhbnMtU2VyaWYnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IDUwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBQb2RjYXN0XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IDUwLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDYwMFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aDEgY3NzPXt7Zm9udFNpemU6IDUwfX0+e3BvZGNhc3QudGl0bGV9PC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjhweFwiXG4gICAgICAgICAgY3NzPXt7Y2xpcFBhdGg6ICdjaXJjbGUoMjQwcHggYXQgY2VudGVyKSd9fVxuICAgICAgICAvPlxuXG4gICAgICAgIDxzdmdcbiAgICAgICAgICBjc3M9e3twb3NpdGlvbjogJ2Fic29sdXRlJywgcmlnaHQ6IDAsIGhlaWdodDogNjI3LCB6SW5kZXg6ICctMSd9fVxuICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgIHdpZHRoPVwiNjEyXCJcbiAgICAgICAgICBoZWlnaHQ9XCI2MjhcIlxuICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNjEyIDYyOFwiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZmlsbD17YHJnYigke3BhbGV0dGUuRGFya011dGVkLl9yZ2JbMF19LCAke3BhbGV0dGUuRGFya011dGVkLl9yZ2JbMV19LCAke3BhbGV0dGUuRGFya011dGVkLl9yZ2JbMl19KWB9XG4gICAgICAgICAgICAvL2ZpbGw9e2RhdGEudmlicmFudH1cbiAgICAgICAgICAgIC8vZmlsbD17IWxvYWRpbmcgPyBkYXRhLmRhcmtNdXRlZCA6ICcjMUMzMzM4J31cbiAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICBkPVwiTTEyMDAsLTEuMjUwNTU1MjFlLTEyIEwxMjAwLDYyOCBMNTg4LDYyNy45OTMwODkgQzYzNC4wODQzMDIsNTQwLjA0NTgzNSA2OTkuNDM2OTUzLDQ4Mi45NzQ0MzEgODQ1LjYxOTM5NSwzODQuOTAyNzM0IEMxMDEzLjY0Mzk5LDI3Mi4xNzc0NTEgMTAzNi4wMDY5NiwxMjEuMzIwNDQyIDEwMDguNTc4MzYsLTAuMDA3MjI5NDA3NjUgTDEyMDAsLTEuMjUwNTU1MjFlLTEyIFpcIlxuICAgICAgICAgICAgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC01ODgpXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3N2Zz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3N0b3JlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxTdG9yZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BvZGNhc3QnOlxuICAgICAgY29uc3QgcG9kY2FzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcG9kY2FzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 = process.env.NODE_ENV === "production" ? {
  name: "1qmyfde-Podcast",
  styles: "clip-path:circle(240px at center);;label:Podcast;"
} : {
  name: "1qmyfde-Podcast",
  styles: "clip-path:circle(240px at center);;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref17 = process.env.NODE_ENV === "production" ? {
  name: "12chp9u-Podcast",
  styles: "position:absolute;right:0;height:627px;z-index:-1;;label:Podcast;"
} : {
  name: "12chp9u-Podcast",
  styles: "position:absolute;right:0;height:627px;z-index:-1;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Podcast(_ref10) {
  var parsedReq = _ref10.parsedReq,
      podcast = _ref10.podcast,
      palette = _ref10.palette;
  var images = parsedReq.images;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: _ref11
  }, (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref13
  }, "Podcast")), (0, _core.jsx)("div", {
    css: _ref14
  }, (0, _core.jsx)("h1", {
    css: _ref15
  }, podcast.title)), (0, _core.jsx)("img", {
    src: podcast.image_url,
    width: "628px",
    heigh: "628px",
    css: _ref16
  }), (0, _core.jsx)("svg", {
    css: _ref17,
    xmlns: "http://www.w3.org/2000/svg",
    width: "612",
    height: "628",
    viewBox: "0 0 612 628"
  }, (0, _core.jsx)("path", {
    fill: "rgb(".concat(palette.DarkMuted._rgb[0], ", ").concat(palette.DarkMuted._rgb[1], ", ").concat(palette.DarkMuted._rgb[2], ")") //fill={data.vibrant}
    //fill={!loading ? data.darkMuted : '#1C3338'}
    ,
    fillRule: "evenodd",
    d: "M1200,-1.25055521e-12 L1200,628 L588,627.993089 C634.084302,540.045835 699.436953,482.974431 845.619395,384.902734 C1013.64399,272.177451 1036.00696,121.320442 1008.57836,-0.00722940765 L1200,-1.25055521e-12 Z",
    transform: "translate(-588)"
  }))));
}

function getHtml(parsedReq) {
  var markup, podcast, palette, resource;
  return _regenerator["default"].async(function getHtml$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          console.log(parsedReq);
          _context.t0 = parsedReq.resourceType;
          _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'store' ? 6 : _context.t0 === 'podcast' ? 8 : _context.t0 === 'series' ? 17 : 22;
          break;

        case 4:
          markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
            parsedReq: parsedReq
          }));
          return _context.abrupt("break", 23);

        case 6:
          markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Store, {
            parsedReq: parsedReq
          }));
          return _context.abrupt("break", 23);

        case 8:
          _context.next = 10;
          return _regenerator["default"].awrap(_axios["default"].get("https://egghead.io/api/v1/podcasts/".concat(parsedReq.text)).then(function (_ref18) {
            var data = _ref18.data;
            return data;
          }));

        case 10:
          podcast = _context.sent;
          _context.next = 13;
          return _regenerator["default"].awrap(Vibrant.from(podcast.image_url).getPalette().then(function (palette) {
            return palette;
          }));

        case 13:
          palette = _context.sent;
          console.log(palette);
          markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Podcast, {
            podcast: podcast,
            palette: palette,
            parsedReq: parsedReq
          }));
          return _context.abrupt("break", 23);

        case 17:
          _context.next = 19;
          return _regenerator["default"].awrap(_axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref19) {
            var data = _ref19.data;
            return data;
          }));

        case 19:
          resource = _context.sent;
          markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
            resource: resource,
            parsedReq: parsedReq
          }));
          return _context.abrupt("break", 23);

        case 22:
          markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
            resource: resource,
            parsedReq: parsedReq
          }));

        case 23:
          console.log(markup);
          return _context.abrupt("return", markup);

        case 25:
        case "end":
          return _context.stop();
      }
    }
  });
}