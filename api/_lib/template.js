"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

var _lodash = require("lodash");

var Vibrant = _interopRequireWildcard(require("node-vibrant"));

var _fonts = _interopRequireDefault(require("./fonts"));

var _convertTime = _interopRequireDefault(require("./convertTime"));

var _twemoji = _interopRequireDefault(require("twemoji"));

import { jsx as ___EmotionJSX } from "@emotion/core";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var twOptions = {
  folder: 'svg',
  ext: '.svg'
};

var emojify = function emojify(text) {
  return _twemoji["default"].parse(text, twOptions);
};

var reset =
/*#__PURE__*/

/*#__PURE__*/
(0, _core.css)(_fonts["default"], " *,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Open Sans','Helvetica Neue',sans-serif;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;};label:reset;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNpQiIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eSwgbWFwLCB1bmlxQnl9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGZvbnRzIGZyb20gJy4vZm9udHMnXG5pbXBvcnQgY29udmVydFRpbWUgZnJvbSAnLi9jb252ZXJ0VGltZSdcbmltcG9ydCB0d2Vtb2ppIGZyb20gJ3R3ZW1vamknXG5cbmNvbnN0IHR3T3B0aW9ucyA9IHtmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJ31cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAke2ZvbnRzfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLFxuICAgICAgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+SG93IHRvIGVnZ2hlYWQ8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e3t3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNzAwfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0LnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgU3RvcmVcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjQwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+L3BvZGNhc3RzPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA0NixcbiAgICAgICAgICAgICAgcGFkZGluZzogJzMycHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShwb2RjYXN0LnRpdGxlLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHtsZXNzb24sIHBhcnNlZFJlcSwgcGFsZXR0ZX0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTcwfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxNTAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZSgn4oCZJywgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7LyogIDxzdmdcbiAgICAgICAgICAgICAgLy8gcGxheSBidXR0b25cbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiODRcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI4NFwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgODQgODRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMiAyKVwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGN5PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCIzOS45NDJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD17dmlicmFudH1cbiAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMi45OTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9e1xuICAgICAgICAgICAgICAgICAgICBsZXNzb24ucHJpbWFyeV90YWcubmFtZSA9PT0gJ2phdmFzY3JpcHQnXG4gICAgICAgICAgICAgICAgICAgICAgPyBkYXJrVmlicmFudFxuICAgICAgICAgICAgICAgICAgICAgIDogJyNGN0ZDRjYnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkPVwiTTMyLjI1ODU0MzIsMjMuOTMyMzE5MyBMNTUuNDMxMDAyOCwzOC42Nzg0Mjk5IEM1Ni4xMjg5MDMsMzkuMTIyNTQ4MiA1Ni4zMzQ2MzM5LDQwLjA0ODMzNzEgNTUuODkwNTE1NSw0MC43NDYyMzczIEM1NS43NzI4MTgxLDQwLjkzMTE5MDQgNTUuNjE1OTU1OCw0MS4wODgwNTI3IDU1LjQzMTAwMjgsNDEuMjA1NzUwMSBMMzIuMjU4NTQzMiw1NS45NTE4NjA3IEMzMS41NjA2NDMsNTYuMzk1OTc5MSAzMC42MzQ4NTQxLDU2LjE5MDI0ODIgMzAuMTkwNzM1OCw1NS40OTIzNDggQzMwLjAzNzc5OTgsNTUuMjUyMDIgMjkuOTU2NTY3NSw1NC45NzMwNjM2IDI5Ljk1NjU2NzUsNTQuNjg4MjAwNiBMMjkuOTU2NTY3NSwyNS4xOTU5Nzk0IEMyOS45NTY1Njc1LDI0LjM2ODc1MTYgMzAuNjI3MTY4MSwyMy42OTgxNTEgMzEuNDU0Mzk1OSwyMy42OTgxNTEgQzMxLjczOTI1ODksMjMuNjk4MTUxIDMyLjAxODIxNTMsMjMuNzc5MzgzMyAzMi4yNTg1NDMyLDIzLjkzMjMxOTMgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+ICovfVxuXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17bGVzc29uLmluc3RydWN0b3IuYXZhdGFyXzY0X3VybH1cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNzAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDE1LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+eycgJ31cbiAgICAgICAgICAgICAge2Vtb2ppZnkobGVzc29uLmluc3RydWN0b3IuZnVsbF9uYW1lLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIzNlwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTFBN0JDXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMTgsMCBDOC4wNTg4NzQ1LDAgMCw4LjA1ODg3NDUgMCwxOCBDMCwyNy45NDExMjU1IDguMDU4ODc0NSwzNiAxOCwzNiBDMjcuOTQxMTI1NSwzNiAzNiwyNy45NDExMjU1IDM2LDE4IEMzNiwxMy4yMjYxMDMyIDM0LjEwMzU3NjksOC42NDc3MzI3NSAzMC43Mjc5MjIxLDUuMjcyMDc3OTQgQzI3LjM1MjI2NzIsMS44OTY0MjMxMyAyMi43NzM4OTY4LDAgMTgsMCBaIE0xOCwzMi40IEMxMC4wNDcwOTk2LDMyLjQgMy42LDI1Ljk1MjkwMDQgMy42LDE4IEMzLjYsMTAuMDQ3MDk5NiAxMC4wNDcwOTk2LDMuNiAxOCwzLjYgQzI1Ljk1MjkwMDQsMy42IDMyLjQsMTAuMDQ3MDk5NiAzMi40LDE4IEMzMi40LDIxLjgxOTExNzUgMzAuODgyODYxNSwyNS40ODE4MTM4IDI4LjE4MjMzNzYsMjguMTgyMzM3NiBDMjUuNDgxODEzOCwzMC44ODI4NjE1IDIxLjgxOTExNzUsMzIuNCAxOCwzMi40IFogTTIzLjU4LDE5LjEzNCBMMTkuOCwxNi45NTYgTDE5LjgsOSBDMTkuOCw4LjAwNTg4NzQ1IDE4Ljk5NDExMjUsNy4yIDE4LDcuMiBDMTcuMDA1ODg3NSw3LjIgMTYuMiw4LjAwNTg4NzQ1IDE2LjIsOSBMMTYuMiwxOC4yMTYgQzE2LjIxMDY1ODEsMTguMzQwMDIzNiAxNi4yNDEwNDAxLDE4LjQ2MTU1MTggMTYuMjksMTguNTc2IEMxNi4zMjcwNjkxLDE4LjY4Mjc5NSAxNi4zNzUzMzgsMTguNzg1MzY2NCAxNi40MzQsMTguODgyIEMxNi40ODMyNTU2LDE4Ljk4NDMxMTIgMTYuNTQzNjE4OCwxOS4wODA4OTIzIDE2LjYxNCwxOS4xNyBMMTYuOTAyLDE5LjQwNCBMMTcuMDY0LDE5LjU2NiBMMjEuNzQ0LDIyLjI2NiBDMjIuMDE4MzI1MiwyMi40MjE0ODQ4IDIyLjMyODY4MjUsMjIuNTAyMTc3NyAyMi42NDQsMjIuNTAwMDQ0NSBDMjMuNDYzNzA3MywyMi41MDU3MzEgMjQuMTgzNzU4MSwyMS45NTY5MDI2IDI0LjM5NTQ5ODQsMjEuMTY0OTk0MiBDMjQuNjA3MjM4NiwyMC4zNzMwODU4IDI0LjI1NzE4MjgsMTkuNTM4MTMyNiAyMy41NDQsMTkuMTM0IEwyMy41OCwxOS4xMzQgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKGxlc3Nvbi5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7cGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHtsaW1pdCA9IDV9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3ttYXJnaW46ICcwIDIwcHgnfX0gLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2MjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJykpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczpcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICE9PSAwICYmXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICAgICAgICAgICAgICAgICAgPyAnMWZyIDFmcidcbiAgICAgICAgICAgICAgICAgIDogJzFmcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiA0OH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17e29wYWNpdHk6IDAuN319PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDYwLCBib3JkZXJSYWRpdXM6IDIwfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHtwYXJzZWRSZXEsIHBsYXlsaXN0fSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigxNWRlZyknLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnLTExMHB4IDAgMCAtNjBweCcsXG4gICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BsYXlsaXN0Lml0ZW1zLnNsaWNlKDAsIDMpLm1hcCgobGVzc29uKSA9PiAoXG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA5NSA5NVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCI0Ni4zMlwiXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiMyNTI1MjZcIlxuICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgLy8gYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29sbGVjdGlvbiBieXsnICd9XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX0+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlclJhZGl1czogJzUwJScsIG1hcmdpbjogJzAgMTZweCd9fVxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJyl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8aDMgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAnMXJlbSd9fT5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnNvbGUubG9nKCdwbGF5bGlzdDogJywgcGxheWxpc3QpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0cyBwbGF5bGlzdD17cGxheWxpc3R9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8TGVzc29uIGxlc3Nvbj17bGVzc29ufSBwYWxldHRlPXt0YWdQYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */"), ";label:reset;");

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;"
} : {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;"
} : {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "k21m63-InstructorGuide",
  styles: "width:100%;max-width:700px;;label:InstructorGuide;"
} : {
  name: "k21m63-InstructorGuide",
  styles: "width:100%;max-width:700px;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 = process.env.NODE_ENV === "production" ? {
  name: "1vax355-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:24px 0 0 #242529, -24px 0 0 #242529;font-size:46px;font-weight:600;line-height:1.25;padding:12px 0;;label:InstructorGuide;"
} : {
  name: "1vax355-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:24px 0 0 #242529, -24px 0 0 #242529;font-size:46px;font-weight:600;line-height:1.25;padding:12px 0;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: 'contain'
    }, ";label:InstructorGuide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref4
  }, "How to egghead")), (0, _core.jsx)("div", {
    css: _ref5
  }, (0, _core.jsx)("span", {
    css: _ref6
  }, emojify(text.replace('Ł', "L"))))));
}

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;"
} : {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStKVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eSwgbWFwLCB1bmlxQnl9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGZvbnRzIGZyb20gJy4vZm9udHMnXG5pbXBvcnQgY29udmVydFRpbWUgZnJvbSAnLi9jb252ZXJ0VGltZSdcbmltcG9ydCB0d2Vtb2ppIGZyb20gJ3R3ZW1vamknXG5cbmNvbnN0IHR3T3B0aW9ucyA9IHtmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJ31cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAke2ZvbnRzfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLFxuICAgICAgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+SG93IHRvIGVnZ2hlYWQ8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e3t3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNzAwfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0LnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgU3RvcmVcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjQwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+L3BvZGNhc3RzPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA0NixcbiAgICAgICAgICAgICAgcGFkZGluZzogJzMycHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShwb2RjYXN0LnRpdGxlLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHtsZXNzb24sIHBhcnNlZFJlcSwgcGFsZXR0ZX0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTcwfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxNTAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZSgn4oCZJywgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7LyogIDxzdmdcbiAgICAgICAgICAgICAgLy8gcGxheSBidXR0b25cbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiODRcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI4NFwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgODQgODRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMiAyKVwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGN5PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCIzOS45NDJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD17dmlicmFudH1cbiAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMi45OTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9e1xuICAgICAgICAgICAgICAgICAgICBsZXNzb24ucHJpbWFyeV90YWcubmFtZSA9PT0gJ2phdmFzY3JpcHQnXG4gICAgICAgICAgICAgICAgICAgICAgPyBkYXJrVmlicmFudFxuICAgICAgICAgICAgICAgICAgICAgIDogJyNGN0ZDRjYnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkPVwiTTMyLjI1ODU0MzIsMjMuOTMyMzE5MyBMNTUuNDMxMDAyOCwzOC42Nzg0Mjk5IEM1Ni4xMjg5MDMsMzkuMTIyNTQ4MiA1Ni4zMzQ2MzM5LDQwLjA0ODMzNzEgNTUuODkwNTE1NSw0MC43NDYyMzczIEM1NS43NzI4MTgxLDQwLjkzMTE5MDQgNTUuNjE1OTU1OCw0MS4wODgwNTI3IDU1LjQzMTAwMjgsNDEuMjA1NzUwMSBMMzIuMjU4NTQzMiw1NS45NTE4NjA3IEMzMS41NjA2NDMsNTYuMzk1OTc5MSAzMC42MzQ4NTQxLDU2LjE5MDI0ODIgMzAuMTkwNzM1OCw1NS40OTIzNDggQzMwLjAzNzc5OTgsNTUuMjUyMDIgMjkuOTU2NTY3NSw1NC45NzMwNjM2IDI5Ljk1NjU2NzUsNTQuNjg4MjAwNiBMMjkuOTU2NTY3NSwyNS4xOTU5Nzk0IEMyOS45NTY1Njc1LDI0LjM2ODc1MTYgMzAuNjI3MTY4MSwyMy42OTgxNTEgMzEuNDU0Mzk1OSwyMy42OTgxNTEgQzMxLjczOTI1ODksMjMuNjk4MTUxIDMyLjAxODIxNTMsMjMuNzc5MzgzMyAzMi4yNTg1NDMyLDIzLjkzMjMxOTMgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+ICovfVxuXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17bGVzc29uLmluc3RydWN0b3IuYXZhdGFyXzY0X3VybH1cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNzAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDE1LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+eycgJ31cbiAgICAgICAgICAgICAge2Vtb2ppZnkobGVzc29uLmluc3RydWN0b3IuZnVsbF9uYW1lLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIzNlwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTFBN0JDXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMTgsMCBDOC4wNTg4NzQ1LDAgMCw4LjA1ODg3NDUgMCwxOCBDMCwyNy45NDExMjU1IDguMDU4ODc0NSwzNiAxOCwzNiBDMjcuOTQxMTI1NSwzNiAzNiwyNy45NDExMjU1IDM2LDE4IEMzNiwxMy4yMjYxMDMyIDM0LjEwMzU3NjksOC42NDc3MzI3NSAzMC43Mjc5MjIxLDUuMjcyMDc3OTQgQzI3LjM1MjI2NzIsMS44OTY0MjMxMyAyMi43NzM4OTY4LDAgMTgsMCBaIE0xOCwzMi40IEMxMC4wNDcwOTk2LDMyLjQgMy42LDI1Ljk1MjkwMDQgMy42LDE4IEMzLjYsMTAuMDQ3MDk5NiAxMC4wNDcwOTk2LDMuNiAxOCwzLjYgQzI1Ljk1MjkwMDQsMy42IDMyLjQsMTAuMDQ3MDk5NiAzMi40LDE4IEMzMi40LDIxLjgxOTExNzUgMzAuODgyODYxNSwyNS40ODE4MTM4IDI4LjE4MjMzNzYsMjguMTgyMzM3NiBDMjUuNDgxODEzOCwzMC44ODI4NjE1IDIxLjgxOTExNzUsMzIuNCAxOCwzMi40IFogTTIzLjU4LDE5LjEzNCBMMTkuOCwxNi45NTYgTDE5LjgsOSBDMTkuOCw4LjAwNTg4NzQ1IDE4Ljk5NDExMjUsNy4yIDE4LDcuMiBDMTcuMDA1ODg3NSw3LjIgMTYuMiw4LjAwNTg4NzQ1IDE2LjIsOSBMMTYuMiwxOC4yMTYgQzE2LjIxMDY1ODEsMTguMzQwMDIzNiAxNi4yNDEwNDAxLDE4LjQ2MTU1MTggMTYuMjksMTguNTc2IEMxNi4zMjcwNjkxLDE4LjY4Mjc5NSAxNi4zNzUzMzgsMTguNzg1MzY2NCAxNi40MzQsMTguODgyIEMxNi40ODMyNTU2LDE4Ljk4NDMxMTIgMTYuNTQzNjE4OCwxOS4wODA4OTIzIDE2LjYxNCwxOS4xNyBMMTYuOTAyLDE5LjQwNCBMMTcuMDY0LDE5LjU2NiBMMjEuNzQ0LDIyLjI2NiBDMjIuMDE4MzI1MiwyMi40MjE0ODQ4IDIyLjMyODY4MjUsMjIuNTAyMTc3NyAyMi42NDQsMjIuNTAwMDQ0NSBDMjMuNDYzNzA3MywyMi41MDU3MzEgMjQuMTgzNzU4MSwyMS45NTY5MDI2IDI0LjM5NTQ5ODQsMjEuMTY0OTk0MiBDMjQuNjA3MjM4NiwyMC4zNzMwODU4IDI0LjI1NzE4MjgsMTkuNTM4MTMyNiAyMy41NDQsMTkuMTM0IEwyMy41OCwxOS4xMzQgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKGxlc3Nvbi5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7cGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHtsaW1pdCA9IDV9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3ttYXJnaW46ICcwIDIwcHgnfX0gLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2MjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJykpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczpcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICE9PSAwICYmXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICAgICAgICAgICAgICAgICAgPyAnMWZyIDFmcidcbiAgICAgICAgICAgICAgICAgIDogJzFmcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiA0OH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17e29wYWNpdHk6IDAuN319PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDYwLCBib3JkZXJSYWRpdXM6IDIwfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHtwYXJzZWRSZXEsIHBsYXlsaXN0fSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigxNWRlZyknLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnLTExMHB4IDAgMCAtNjBweCcsXG4gICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BsYXlsaXN0Lml0ZW1zLnNsaWNlKDAsIDMpLm1hcCgobGVzc29uKSA9PiAoXG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA5NSA5NVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCI0Ni4zMlwiXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiMyNTI1MjZcIlxuICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgLy8gYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29sbGVjdGlvbiBieXsnICd9XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX0+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlclJhZGl1czogJzUwJScsIG1hcmdpbjogJzAgMTZweCd9fVxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJyl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8aDMgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAnMXJlbSd9fT5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnNvbGUubG9nKCdwbGF5bGlzdDogJywgcGxheWxpc3QpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0cyBwbGF5bGlzdD17cGxheWxpc3R9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8TGVzc29uIGxlc3Nvbj17bGVzc29ufSBwYWxldHRlPXt0YWdQYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;"
} : {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 = process.env.NODE_ENV === "production" ? {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;"
} : {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Store(_ref7) {
  var parsedReq = _ref7.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: '628px 628px',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: '50% 50%'
    }, ";label:Store;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref8
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref9
  }, "Store")), (0, _core.jsx)("h1", {
    css: _ref10
  }, text)));
}

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "1oj0jbd-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;;label:Podcast;"
} : {
  name: "1oj0jbd-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "rkg0cy-Podcast",
  styles: "display:flex;align-items:center;;label:Podcast;"
} : {
  name: "rkg0cy-Podcast",
  styles: "display:flex;align-items:center;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "kdollr-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Podcast;"
} : {
  name: "kdollr-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 = process.env.NODE_ENV === "production" ? {
  name: "1tdfbhq-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Podcast;"
} : {
  name: "1tdfbhq-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Podcast(_ref11) {
  var parsedReq = _ref11.parsedReq,
      podcast = _ref11.podcast,
      palette = _ref11.palette;
  var images = parsedReq.images;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("div", {
    css: _ref13
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref14
  }, "egghead.io", (0, _core.jsx)("span", {
    css: /*#__PURE__*/(0, _css2["default"])({
      color: vibrant
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, "/podcasts"))), (0, _core.jsx)("h1", {
    css: _ref15
  }, emojify(podcast.title.replace('Ł', "L")))), (0, _core.jsx)("img", {
    src: podcast.image_url,
    width: "648px",
    heigh: "648px",
    css: /*#__PURE__*/(0, _css2["default"])({
      clipPath: 'circle(220px at center)',
      zoom: 1.1,
      position: 'absolute',
      right: -20,
      top: -30,
      zIndex: 5,
      boxShadow: '0 2.8px 2.2px rgba(0, 0, 0, 0.02), 0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035), 0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05), 0 100px 80px rgba(0, 0, 0, 0.07)'
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFQVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eSwgbWFwLCB1bmlxQnl9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGZvbnRzIGZyb20gJy4vZm9udHMnXG5pbXBvcnQgY29udmVydFRpbWUgZnJvbSAnLi9jb252ZXJ0VGltZSdcbmltcG9ydCB0d2Vtb2ppIGZyb20gJ3R3ZW1vamknXG5cbmNvbnN0IHR3T3B0aW9ucyA9IHtmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJ31cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAke2ZvbnRzfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLFxuICAgICAgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+SG93IHRvIGVnZ2hlYWQ8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e3t3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNzAwfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0LnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgU3RvcmVcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjQwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+L3BvZGNhc3RzPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA0NixcbiAgICAgICAgICAgICAgcGFkZGluZzogJzMycHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShwb2RjYXN0LnRpdGxlLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHtsZXNzb24sIHBhcnNlZFJlcSwgcGFsZXR0ZX0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTcwfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxNTAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZSgn4oCZJywgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7LyogIDxzdmdcbiAgICAgICAgICAgICAgLy8gcGxheSBidXR0b25cbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiODRcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI4NFwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgODQgODRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMiAyKVwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGN5PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCIzOS45NDJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD17dmlicmFudH1cbiAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMi45OTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9e1xuICAgICAgICAgICAgICAgICAgICBsZXNzb24ucHJpbWFyeV90YWcubmFtZSA9PT0gJ2phdmFzY3JpcHQnXG4gICAgICAgICAgICAgICAgICAgICAgPyBkYXJrVmlicmFudFxuICAgICAgICAgICAgICAgICAgICAgIDogJyNGN0ZDRjYnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkPVwiTTMyLjI1ODU0MzIsMjMuOTMyMzE5MyBMNTUuNDMxMDAyOCwzOC42Nzg0Mjk5IEM1Ni4xMjg5MDMsMzkuMTIyNTQ4MiA1Ni4zMzQ2MzM5LDQwLjA0ODMzNzEgNTUuODkwNTE1NSw0MC43NDYyMzczIEM1NS43NzI4MTgxLDQwLjkzMTE5MDQgNTUuNjE1OTU1OCw0MS4wODgwNTI3IDU1LjQzMTAwMjgsNDEuMjA1NzUwMSBMMzIuMjU4NTQzMiw1NS45NTE4NjA3IEMzMS41NjA2NDMsNTYuMzk1OTc5MSAzMC42MzQ4NTQxLDU2LjE5MDI0ODIgMzAuMTkwNzM1OCw1NS40OTIzNDggQzMwLjAzNzc5OTgsNTUuMjUyMDIgMjkuOTU2NTY3NSw1NC45NzMwNjM2IDI5Ljk1NjU2NzUsNTQuNjg4MjAwNiBMMjkuOTU2NTY3NSwyNS4xOTU5Nzk0IEMyOS45NTY1Njc1LDI0LjM2ODc1MTYgMzAuNjI3MTY4MSwyMy42OTgxNTEgMzEuNDU0Mzk1OSwyMy42OTgxNTEgQzMxLjczOTI1ODksMjMuNjk4MTUxIDMyLjAxODIxNTMsMjMuNzc5MzgzMyAzMi4yNTg1NDMyLDIzLjkzMjMxOTMgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+ICovfVxuXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17bGVzc29uLmluc3RydWN0b3IuYXZhdGFyXzY0X3VybH1cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNzAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDE1LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+eycgJ31cbiAgICAgICAgICAgICAge2Vtb2ppZnkobGVzc29uLmluc3RydWN0b3IuZnVsbF9uYW1lLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIzNlwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTFBN0JDXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMTgsMCBDOC4wNTg4NzQ1LDAgMCw4LjA1ODg3NDUgMCwxOCBDMCwyNy45NDExMjU1IDguMDU4ODc0NSwzNiAxOCwzNiBDMjcuOTQxMTI1NSwzNiAzNiwyNy45NDExMjU1IDM2LDE4IEMzNiwxMy4yMjYxMDMyIDM0LjEwMzU3NjksOC42NDc3MzI3NSAzMC43Mjc5MjIxLDUuMjcyMDc3OTQgQzI3LjM1MjI2NzIsMS44OTY0MjMxMyAyMi43NzM4OTY4LDAgMTgsMCBaIE0xOCwzMi40IEMxMC4wNDcwOTk2LDMyLjQgMy42LDI1Ljk1MjkwMDQgMy42LDE4IEMzLjYsMTAuMDQ3MDk5NiAxMC4wNDcwOTk2LDMuNiAxOCwzLjYgQzI1Ljk1MjkwMDQsMy42IDMyLjQsMTAuMDQ3MDk5NiAzMi40LDE4IEMzMi40LDIxLjgxOTExNzUgMzAuODgyODYxNSwyNS40ODE4MTM4IDI4LjE4MjMzNzYsMjguMTgyMzM3NiBDMjUuNDgxODEzOCwzMC44ODI4NjE1IDIxLjgxOTExNzUsMzIuNCAxOCwzMi40IFogTTIzLjU4LDE5LjEzNCBMMTkuOCwxNi45NTYgTDE5LjgsOSBDMTkuOCw4LjAwNTg4NzQ1IDE4Ljk5NDExMjUsNy4yIDE4LDcuMiBDMTcuMDA1ODg3NSw3LjIgMTYuMiw4LjAwNTg4NzQ1IDE2LjIsOSBMMTYuMiwxOC4yMTYgQzE2LjIxMDY1ODEsMTguMzQwMDIzNiAxNi4yNDEwNDAxLDE4LjQ2MTU1MTggMTYuMjksMTguNTc2IEMxNi4zMjcwNjkxLDE4LjY4Mjc5NSAxNi4zNzUzMzgsMTguNzg1MzY2NCAxNi40MzQsMTguODgyIEMxNi40ODMyNTU2LDE4Ljk4NDMxMTIgMTYuNTQzNjE4OCwxOS4wODA4OTIzIDE2LjYxNCwxOS4xNyBMMTYuOTAyLDE5LjQwNCBMMTcuMDY0LDE5LjU2NiBMMjEuNzQ0LDIyLjI2NiBDMjIuMDE4MzI1MiwyMi40MjE0ODQ4IDIyLjMyODY4MjUsMjIuNTAyMTc3NyAyMi42NDQsMjIuNTAwMDQ0NSBDMjMuNDYzNzA3MywyMi41MDU3MzEgMjQuMTgzNzU4MSwyMS45NTY5MDI2IDI0LjM5NTQ5ODQsMjEuMTY0OTk0MiBDMjQuNjA3MjM4NiwyMC4zNzMwODU4IDI0LjI1NzE4MjgsMTkuNTM4MTMyNiAyMy41NDQsMTkuMTM0IEwyMy41OCwxOS4xMzQgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKGxlc3Nvbi5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7cGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHtsaW1pdCA9IDV9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3ttYXJnaW46ICcwIDIwcHgnfX0gLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2MjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJykpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczpcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICE9PSAwICYmXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICAgICAgICAgICAgICAgICAgPyAnMWZyIDFmcidcbiAgICAgICAgICAgICAgICAgIDogJzFmcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiA0OH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17e29wYWNpdHk6IDAuN319PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDYwLCBib3JkZXJSYWRpdXM6IDIwfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHtwYXJzZWRSZXEsIHBsYXlsaXN0fSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigxNWRlZyknLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnLTExMHB4IDAgMCAtNjBweCcsXG4gICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BsYXlsaXN0Lml0ZW1zLnNsaWNlKDAsIDMpLm1hcCgobGVzc29uKSA9PiAoXG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA5NSA5NVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCI0Ni4zMlwiXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiMyNTI1MjZcIlxuICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgLy8gYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29sbGVjdGlvbiBieXsnICd9XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX0+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlclJhZGl1czogJzUwJScsIG1hcmdpbjogJzAgMTZweCd9fVxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJyl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8aDMgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAnMXJlbSd9fT5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnNvbGUubG9nKCdwbGF5bGlzdDogJywgcGxheWxpc3QpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0cyBwbGF5bGlzdD17cGxheWxpc3R9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8TGVzc29uIGxlc3Nvbj17bGVzc29ufSBwYWxldHRlPXt0YWdQYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */"))
  })));
}

var _ref17 = process.env.NODE_ENV === "production" ? {
  name: "5pq9ar-Lesson",
  styles: "margin-right:50px;width:100%;max-width:170px;;label:Lesson;"
} : {
  name: "5pq9ar-Lesson",
  styles: "margin-right:50px;width:100%;max-width:170px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 = process.env.NODE_ENV === "production" ? {
  name: "27qos-Lesson",
  styles: "border-radius:10px;width:100%;max-width:150px;;label:Lesson;"
} : {
  name: "27qos-Lesson",
  styles: "border-radius:10px;width:100%;max-width:150px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref19 = process.env.NODE_ENV === "production" ? {
  name: "2d57xe-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;;label:Lesson;"
} : {
  name: "2d57xe-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref20 = process.env.NODE_ENV === "production" ? {
  name: "19xj1ib-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;;label:Lesson;"
} : {
  name: "19xj1ib-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref21 = process.env.NODE_ENV === "production" ? {
  name: "1f3auih-Lesson",
  styles: "margin-right:15px;;label:Lesson;"
} : {
  name: "1f3auih-Lesson",
  styles: "margin-right:15px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref22 = process.env.NODE_ENV === "production" ? {
  name: "1t1wn5v-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:32px;flex-wrap:wrap;div{padding:15px 0;};label:Lesson;"
} : {
  name: "1t1wn5v-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:32px;flex-wrap:wrap;div{padding:15px 0;};label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref23 = process.env.NODE_ENV === "production" ? {
  name: "1ihhs-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;;label:Lesson;"
} : {
  name: "1ihhs-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref24 = process.env.NODE_ENV === "production" ? {
  name: "lducn0-Lesson",
  styles: "border-radius:50%;width:70px;height:70px;margin-right:15px;;label:Lesson;"
} : {
  name: "lducn0-Lesson",
  styles: "border-radius:50%;width:70px;height:70px;margin-right:15px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref25 = process.env.NODE_ENV === "production" ? {
  name: "1rcwwwe-Lesson",
  styles: "display:flex;align-items:center;margin-right:36px;;label:Lesson;"
} : {
  name: "1rcwwwe-Lesson",
  styles: "display:flex;align-items:center;margin-right:36px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref26 = process.env.NODE_ENV === "production" ? {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;"
} : {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref27 = process.env.NODE_ENV === "production" ? {
  name: "1lz36d0-Lesson",
  styles: "display:flex;align-items:center;;label:Lesson;"
} : {
  name: "1lz36d0-Lesson",
  styles: "display:flex;align-items:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref28 = process.env.NODE_ENV === "production" ? {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;"
} : {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Lesson(_ref16) {
  var lesson = _ref16.lesson,
      parsedReq = _ref16.parsedReq,
      palette = _ref16.palette;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  var darkVibrant = "rgba(".concat(palette.DarkVibrant._rgb.toString(), ", 1)");
  var images = parsedReq.images;
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      padding: 50,
      display: 'flex',
      alignItems: 'center',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref17
  }, (0, _core.jsx)("img", {
    // tag image
    src: lesson.image_256_url,
    css: _ref18
  })), (0, _core.jsx)("div", {
    // right column holder
    css: _ref19
  }, (0, _core.jsx)("div", {
    css: _ref20
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "72px",
    css: _ref21
  }), ' ', "egghead.io"), (0, _core.jsx)("h1", {
    // title
    css: /*#__PURE__*/(0, _css2["default"])({
      fontSize: lesson.title.length > 30 ? lesson.title.length > 45 ? lesson.title.length > 55 ? 52 : 56 : 62 : 66,
      lineHeight: 1.3,
      padding: 0,
      marginBottom: 30
    }, ";label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, lesson.title.replace('’', "'")), (0, _core.jsx)("div", {
    // byline holder
    css: _ref22
  }, (0, _core.jsx)("div", {
    // instructor
    css: _ref23
  }, (0, _core.jsx)("img", {
    src: lesson.instructor.avatar_64_url,
    css: _ref24
  }), ' ', emojify(lesson.instructor.full_name.replace('Ł', "L"))), (0, _core.jsx)("div", {
    // duration
    css: _ref25
  }, (0, _core.jsx)("svg", {
    css: _ref26,
    xmlns: "http://www.w3.org/2000/svg",
    width: "36",
    height: "36",
    viewBox: "0 0 36 36"
  }, (0, _core.jsx)("path", {
    fill: "#A1A7BC",
    d: "M18,0 C8.0588745,0 0,8.0588745 0,18 C0,27.9411255 8.0588745,36 18,36 C27.9411255,36 36,27.9411255 36,18 C36,13.2261032 34.1035769,8.64773275 30.7279221,5.27207794 C27.3522672,1.89642313 22.7738968,0 18,0 Z M18,32.4 C10.0470996,32.4 3.6,25.9529004 3.6,18 C3.6,10.0470996 10.0470996,3.6 18,3.6 C25.9529004,3.6 32.4,10.0470996 32.4,18 C32.4,21.8191175 30.8828615,25.4818138 28.1823376,28.1823376 C25.4818138,30.8828615 21.8191175,32.4 18,32.4 Z M23.58,19.134 L19.8,16.956 L19.8,9 C19.8,8.00588745 18.9941125,7.2 18,7.2 C17.0058875,7.2 16.2,8.00588745 16.2,9 L16.2,18.216 C16.2106581,18.3400236 16.2410401,18.4615518 16.29,18.576 C16.3270691,18.682795 16.375338,18.7853664 16.434,18.882 C16.4832556,18.9843112 16.5436188,19.0808923 16.614,19.17 L16.902,19.404 L17.064,19.566 L21.744,22.266 C22.0183252,22.4214848 22.3286825,22.5021777 22.644,22.5000445 C23.4637073,22.505731 24.1837581,21.9569026 24.3954984,21.1649942 C24.6072386,20.3730858 24.2571828,19.5381326 23.544,19.134 L23.58,19.134 Z"
  })), ' ', (0, _convertTime["default"])(lesson.duration)), lesson.free_forever && (0, _core.jsx)("div", {
    // community resource
    css: _ref27
  }, (0, _core.jsx)("svg", {
    css: _ref28,
    xmlns: "http://www.w3.org/2000/svg",
    width: "42",
    height: "38",
    viewBox: "0 0 42 38"
  }, (0, _core.jsx)("g", {
    fill: "#FFB430"
  }, (0, _core.jsx)("path", {
    d: "M38.64,15.54 L32.34,15.54 C31.052,12.488 28,10.36 24.472,10.36 C19.768,10.36 15.932,14.168 15.932,18.844 C15.932,23.52 19.768,27.328 24.472,27.328 C28,27.328 31.024,25.2 32.312,22.176 L38.64,22.176 C40.488,22.176 42,20.692 42,18.844 C42,17.052 40.488,15.54 38.64,15.54 Z M24.472,22.148 C22.652,22.148 21.168,20.692 21.168,18.872 C21.168,17.052 22.652,15.596 24.472,15.596 C26.292,15.596 27.776,17.052 27.776,18.872 C27.776,20.692 26.292,22.148 24.472,22.148 Z"
  }), (0, _core.jsx)("path", {
    d: "M37.912,31.192 L32.984,26.656 C32.62,26.32 32.088,26.348 31.752,26.684 C29.596,28.728 26.6,29.932 23.324,29.652 C18.032,29.232 13.776,24.92 13.412,19.656 C12.964,13.384 17.976,8.12 24.22,8.12 C26.964,8.12 29.456,9.128 31.388,10.808 C31.724,11.116 32.256,11.116 32.592,10.808 L37.604,6.216 C37.8,6.02 37.828,5.712 37.632,5.516 C33.964,1.876 28.84,-0.28 23.212,0.028 C14.364,0.476 7.056,7.056 5.516,15.54 L3.36,15.54 C1.512,15.54 0,17.052 0,18.9 C0,20.748 1.512,22.26 3.36,22.26 L5.516,22.26 C7.112,31.08 14.868,37.8 24.22,37.8 C29.624,37.8 34.468,35.56 37.94,31.976 C38.136,31.752 38.136,31.416 37.912,31.192 Z"
  }))), ' ', "Community Resource")))));
}

var _ref31 = process.env.NODE_ENV === "production" ? {
  name: "jps4qh-TechLogos",
  styles: "display:flex;align-items:center;justify-content:center;padding-top:60px;;label:TechLogos;"
} : {
  name: "jps4qh-TechLogos",
  styles: "display:flex;align-items:center;justify-content:center;padding-top:60px;;label:TechLogos;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdiVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eSwgbWFwLCB1bmlxQnl9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGZvbnRzIGZyb20gJy4vZm9udHMnXG5pbXBvcnQgY29udmVydFRpbWUgZnJvbSAnLi9jb252ZXJ0VGltZSdcbmltcG9ydCB0d2Vtb2ppIGZyb20gJ3R3ZW1vamknXG5cbmNvbnN0IHR3T3B0aW9ucyA9IHtmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJ31cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAke2ZvbnRzfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLFxuICAgICAgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+SG93IHRvIGVnZ2hlYWQ8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e3t3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNzAwfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0LnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgU3RvcmVcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjQwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+L3BvZGNhc3RzPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA0NixcbiAgICAgICAgICAgICAgcGFkZGluZzogJzMycHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShwb2RjYXN0LnRpdGxlLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHtsZXNzb24sIHBhcnNlZFJlcSwgcGFsZXR0ZX0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTcwfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxNTAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZSgn4oCZJywgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7LyogIDxzdmdcbiAgICAgICAgICAgICAgLy8gcGxheSBidXR0b25cbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiODRcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI4NFwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgODQgODRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMiAyKVwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGN5PVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCIzOS45NDJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD17dmlicmFudH1cbiAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMi45OTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9e1xuICAgICAgICAgICAgICAgICAgICBsZXNzb24ucHJpbWFyeV90YWcubmFtZSA9PT0gJ2phdmFzY3JpcHQnXG4gICAgICAgICAgICAgICAgICAgICAgPyBkYXJrVmlicmFudFxuICAgICAgICAgICAgICAgICAgICAgIDogJyNGN0ZDRjYnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkPVwiTTMyLjI1ODU0MzIsMjMuOTMyMzE5MyBMNTUuNDMxMDAyOCwzOC42Nzg0Mjk5IEM1Ni4xMjg5MDMsMzkuMTIyNTQ4MiA1Ni4zMzQ2MzM5LDQwLjA0ODMzNzEgNTUuODkwNTE1NSw0MC43NDYyMzczIEM1NS43NzI4MTgxLDQwLjkzMTE5MDQgNTUuNjE1OTU1OCw0MS4wODgwNTI3IDU1LjQzMTAwMjgsNDEuMjA1NzUwMSBMMzIuMjU4NTQzMiw1NS45NTE4NjA3IEMzMS41NjA2NDMsNTYuMzk1OTc5MSAzMC42MzQ4NTQxLDU2LjE5MDI0ODIgMzAuMTkwNzM1OCw1NS40OTIzNDggQzMwLjAzNzc5OTgsNTUuMjUyMDIgMjkuOTU2NTY3NSw1NC45NzMwNjM2IDI5Ljk1NjU2NzUsNTQuNjg4MjAwNiBMMjkuOTU2NTY3NSwyNS4xOTU5Nzk0IEMyOS45NTY1Njc1LDI0LjM2ODc1MTYgMzAuNjI3MTY4MSwyMy42OTgxNTEgMzEuNDU0Mzk1OSwyMy42OTgxNTEgQzMxLjczOTI1ODksMjMuNjk4MTUxIDMyLjAxODIxNTMsMjMuNzc5MzgzMyAzMi4yNTg1NDMyLDIzLjkzMjMxOTMgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+ICovfVxuXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17bGVzc29uLmluc3RydWN0b3IuYXZhdGFyXzY0X3VybH1cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNzAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDE1LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+eycgJ31cbiAgICAgICAgICAgICAge2Vtb2ppZnkobGVzc29uLmluc3RydWN0b3IuZnVsbF9uYW1lLnJlcGxhY2UoJ8WBJywgYExgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luUmlnaHQ6IDM2fX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIzNlwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTFBN0JDXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMTgsMCBDOC4wNTg4NzQ1LDAgMCw4LjA1ODg3NDUgMCwxOCBDMCwyNy45NDExMjU1IDguMDU4ODc0NSwzNiAxOCwzNiBDMjcuOTQxMTI1NSwzNiAzNiwyNy45NDExMjU1IDM2LDE4IEMzNiwxMy4yMjYxMDMyIDM0LjEwMzU3NjksOC42NDc3MzI3NSAzMC43Mjc5MjIxLDUuMjcyMDc3OTQgQzI3LjM1MjI2NzIsMS44OTY0MjMxMyAyMi43NzM4OTY4LDAgMTgsMCBaIE0xOCwzMi40IEMxMC4wNDcwOTk2LDMyLjQgMy42LDI1Ljk1MjkwMDQgMy42LDE4IEMzLjYsMTAuMDQ3MDk5NiAxMC4wNDcwOTk2LDMuNiAxOCwzLjYgQzI1Ljk1MjkwMDQsMy42IDMyLjQsMTAuMDQ3MDk5NiAzMi40LDE4IEMzMi40LDIxLjgxOTExNzUgMzAuODgyODYxNSwyNS40ODE4MTM4IDI4LjE4MjMzNzYsMjguMTgyMzM3NiBDMjUuNDgxODEzOCwzMC44ODI4NjE1IDIxLjgxOTExNzUsMzIuNCAxOCwzMi40IFogTTIzLjU4LDE5LjEzNCBMMTkuOCwxNi45NTYgTDE5LjgsOSBDMTkuOCw4LjAwNTg4NzQ1IDE4Ljk5NDExMjUsNy4yIDE4LDcuMiBDMTcuMDA1ODg3NSw3LjIgMTYuMiw4LjAwNTg4NzQ1IDE2LjIsOSBMMTYuMiwxOC4yMTYgQzE2LjIxMDY1ODEsMTguMzQwMDIzNiAxNi4yNDEwNDAxLDE4LjQ2MTU1MTggMTYuMjksMTguNTc2IEMxNi4zMjcwNjkxLDE4LjY4Mjc5NSAxNi4zNzUzMzgsMTguNzg1MzY2NCAxNi40MzQsMTguODgyIEMxNi40ODMyNTU2LDE4Ljk4NDMxMTIgMTYuNTQzNjE4OCwxOS4wODA4OTIzIDE2LjYxNCwxOS4xNyBMMTYuOTAyLDE5LjQwNCBMMTcuMDY0LDE5LjU2NiBMMjEuNzQ0LDIyLjI2NiBDMjIuMDE4MzI1MiwyMi40MjE0ODQ4IDIyLjMyODY4MjUsMjIuNTAyMTc3NyAyMi42NDQsMjIuNTAwMDQ0NSBDMjMuNDYzNzA3MywyMi41MDU3MzEgMjQuMTgzNzU4MSwyMS45NTY5MDI2IDI0LjM5NTQ5ODQsMjEuMTY0OTk0MiBDMjQuNjA3MjM4NiwyMC4zNzMwODU4IDI0LjI1NzE4MjgsMTkuNTM4MTMyNiAyMy41NDQsMTkuMTM0IEwyMy41OCwxOS4xMzQgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKGxlc3Nvbi5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7cGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHtsaW1pdCA9IDV9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3ttYXJnaW46ICcwIDIwcHgnfX0gLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2MjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJykpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczpcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICE9PSAwICYmXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICAgICAgICAgICAgICAgICAgPyAnMWZyIDFmcidcbiAgICAgICAgICAgICAgICAgIDogJzFmcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiA0OH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17e29wYWNpdHk6IDAuN319PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDYwLCBib3JkZXJSYWRpdXM6IDIwfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHtwYXJzZWRSZXEsIHBsYXlsaXN0fSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigxNWRlZyknLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnLTExMHB4IDAgMCAtNjBweCcsXG4gICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BsYXlsaXN0Lml0ZW1zLnNsaWNlKDAsIDMpLm1hcCgobGVzc29uKSA9PiAoXG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA5NSA5NVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgIHI9XCI0Ni4zMlwiXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiMyNTI1MjZcIlxuICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgLy8gYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJ319PlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29sbGVjdGlvbiBieXsnICd9XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX0+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlclJhZGl1czogJzUwJScsIG1hcmdpbjogJzAgMTZweCd9fVxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsICdMJyl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8aDMgY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAnMXJlbSd9fT5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnNvbGUubG9nKCdwbGF5bGlzdDogJywgcGxheWxpc3QpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0cyBwbGF5bGlzdD17cGxheWxpc3R9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8TGVzc29uIGxlc3Nvbj17bGVzc29ufSBwYWxldHRlPXt0YWdQYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref32 = process.env.NODE_ENV === "production" ? {
  name: "1bbfb71-TechLogos",
  styles: "margin:0 20px;;label:TechLogos;"
} : {
  name: "1bbfb71-TechLogos",
  styles: "margin:0 20px;;label:TechLogos;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdja0QiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyVG9TdGF0aWNNYXJrdXB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQge2pzeCwgY3NzLCBHbG9iYWx9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQge2lzRW1wdHksIG1hcCwgdW5pcUJ5fSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBWaWJyYW50IGZyb20gJ25vZGUtdmlicmFudCdcbmltcG9ydCBmb250cyBmcm9tICcuL2ZvbnRzJ1xuaW1wb3J0IGNvbnZlcnRUaW1lIGZyb20gJy4vY29udmVydFRpbWUnXG5pbXBvcnQgdHdlbW9qaSBmcm9tICd0d2Vtb2ppJ1xuXG5jb25zdCB0d09wdGlvbnMgPSB7Zm9sZGVyOiAnc3ZnJywgZXh0OiAnLnN2Zyd9XG5jb25zdCBlbW9qaWZ5ID0gKHRleHQpID0+IHR3ZW1vamkucGFyc2UodGV4dCwgdHdPcHRpb25zKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgJHtmb250c31cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90byxcbiAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PkhvdyB0byBlZ2doZWFkPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7d2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDcwMH19PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMyNDI1MjknLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcyNHB4IDAgMCAjMjQyNTI5LCAtMjRweCAwIDAgIzI0MjUyOScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnNDZweCcsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMTJweCAwJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkodGV4dC5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYyOHB4IDYyOHB4JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgNTAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7bWFyZ2luTGVmdDogMjB9fT5cbiAgICAgICAgICAgIHsvKiB7cmVzb3VyY2VUeXBlLnJlcGxhY2UoJy0nLCAnICcpfSAqL31cbiAgICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxoMVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBvZGNhc3Qoe3BhcnNlZFJlcSwgcG9kY2FzdCwgcGFsZXR0ZX0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDIgY3NzPXt7Zm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknfX0+XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW88c3BhbiBjc3M9e3tjb2xvcjogdmlicmFudH19Pi9wb2RjYXN0czwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNDYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocG9kY2FzdC50aXRsZS5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7bGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17e21hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDE3MH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIC8vIHJpZ2h0IGNvbHVtbiBob2xkZXJcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzYsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MnB4XCIgY3NzPXt7bWFyZ2luUmlnaHQ6IDE1fX0gLz57JyAnfVxuICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgLy8gdGl0bGVcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBsZXNzb24udGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDQ1XG4gICAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA1MlxuICAgICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgICAgOiA2MlxuICAgICAgICAgICAgICAgICAgOiA2NixcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4zLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bGVzc29uLnRpdGxlLnJlcGxhY2UoJ+KAmScsIGAnYCl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qICA8c3ZnXG4gICAgICAgICAgICAgIC8vIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjg0XCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiODRcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDg0IDg0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIgMilcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICBjeD1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICByPVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9e3ZpYnJhbnR9XG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjIuOTk2XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPXtcbiAgICAgICAgICAgICAgICAgICAgbGVzc29uLnByaW1hcnlfdGFnLm5hbWUgPT09ICdqYXZhc2NyaXB0J1xuICAgICAgICAgICAgICAgICAgICAgID8gZGFya1ZpYnJhbnRcbiAgICAgICAgICAgICAgICAgICAgICA6ICcjRjdGQ0Y2J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZD1cIk0zMi4yNTg1NDMyLDIzLjkzMjMxOTMgTDU1LjQzMTAwMjgsMzguNjc4NDI5OSBDNTYuMTI4OTAzLDM5LjEyMjU0ODIgNTYuMzM0NjMzOSw0MC4wNDgzMzcxIDU1Ljg5MDUxNTUsNDAuNzQ2MjM3MyBDNTUuNzcyODE4MSw0MC45MzExOTA0IDU1LjYxNTk1NTgsNDEuMDg4MDUyNyA1NS40MzEwMDI4LDQxLjIwNTc1MDEgTDMyLjI1ODU0MzIsNTUuOTUxODYwNyBDMzEuNTYwNjQzLDU2LjM5NTk3OTEgMzAuNjM0ODU0MSw1Ni4xOTAyNDgyIDMwLjE5MDczNTgsNTUuNDkyMzQ4IEMzMC4wMzc3OTk4LDU1LjI1MjAyIDI5Ljk1NjU2NzUsNTQuOTczMDYzNiAyOS45NTY1Njc1LDU0LjY4ODIwMDYgTDI5Ljk1NjU2NzUsMjUuMTk1OTc5NCBDMjkuOTU2NTY3NSwyNC4zNjg3NTE2IDMwLjYyNzE2ODEsMjMuNjk4MTUxIDMxLjQ1NDM5NTksMjMuNjk4MTUxIEMzMS43MzkyNTg5LDIzLjY5ODE1MSAzMi4wMTgyMTUzLDIzLjc3OTM4MzMgMzIuMjU4NTQzMiwyMy45MzIzMTkzIFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPiAqL31cblxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcwLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MCxcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KGxlc3Nvbi5pbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICBjc3M9e3ttYXJnaW5SaWdodDogMTB9fVxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiMzZcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjM2XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDM2IDM2XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ExQTdCQ1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTE4LDAgQzguMDU4ODc0NSwwIDAsOC4wNTg4NzQ1IDAsMTggQzAsMjcuOTQxMTI1NSA4LjA1ODg3NDUsMzYgMTgsMzYgQzI3Ljk0MTEyNTUsMzYgMzYsMjcuOTQxMTI1NSAzNiwxOCBDMzYsMTMuMjI2MTAzMiAzNC4xMDM1NzY5LDguNjQ3NzMyNzUgMzAuNzI3OTIyMSw1LjI3MjA3Nzk0IEMyNy4zNTIyNjcyLDEuODk2NDIzMTMgMjIuNzczODk2OCwwIDE4LDAgWiBNMTgsMzIuNCBDMTAuMDQ3MDk5NiwzMi40IDMuNiwyNS45NTI5MDA0IDMuNiwxOCBDMy42LDEwLjA0NzA5OTYgMTAuMDQ3MDk5NiwzLjYgMTgsMy42IEMyNS45NTI5MDA0LDMuNiAzMi40LDEwLjA0NzA5OTYgMzIuNCwxOCBDMzIuNCwyMS44MTkxMTc1IDMwLjg4Mjg2MTUsMjUuNDgxODEzOCAyOC4xODIzMzc2LDI4LjE4MjMzNzYgQzI1LjQ4MTgxMzgsMzAuODgyODYxNSAyMS44MTkxMTc1LDMyLjQgMTgsMzIuNCBaIE0yMy41OCwxOS4xMzQgTDE5LjgsMTYuOTU2IEwxOS44LDkgQzE5LjgsOC4wMDU4ODc0NSAxOC45OTQxMTI1LDcuMiAxOCw3LjIgQzE3LjAwNTg4NzUsNy4yIDE2LjIsOC4wMDU4ODc0NSAxNi4yLDkgTDE2LjIsMTguMjE2IEMxNi4yMTA2NTgxLDE4LjM0MDAyMzYgMTYuMjQxMDQwMSwxOC40NjE1NTE4IDE2LjI5LDE4LjU3NiBDMTYuMzI3MDY5MSwxOC42ODI3OTUgMTYuMzc1MzM4LDE4Ljc4NTM2NjQgMTYuNDM0LDE4Ljg4MiBDMTYuNDgzMjU1NiwxOC45ODQzMTEyIDE2LjU0MzYxODgsMTkuMDgwODkyMyAxNi42MTQsMTkuMTcgTDE2LjkwMiwxOS40MDQgTDE3LjA2NCwxOS41NjYgTDIxLjc0NCwyMi4yNjYgQzIyLjAxODMyNTIsMjIuNDIxNDg0OCAyMi4zMjg2ODI1LDIyLjUwMjE3NzcgMjIuNjQ0LDIyLjUwMDA0NDUgQzIzLjQ2MzcwNzMsMjIuNTA1NzMxIDI0LjE4Mzc1ODEsMjEuOTU2OTAyNiAyNC4zOTU0OTg0LDIxLjE2NDk5NDIgQzI0LjYwNzIzODYsMjAuMzczMDg1OCAyNC4yNTcxODI4LDE5LjUzODEzMjYgMjMuNTQ0LDE5LjEzNCBMMjMuNTgsMTkuMTM0IFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShsZXNzb24uZHVyYXRpb24pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bGVzc29uLmZyZWVfZm9yZXZlciAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAvLyBjb21tdW5pdHkgcmVzb3VyY2VcbiAgICAgICAgICAgICAgICBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDJcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzhcIlxuICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA0MiAzOFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGcgZmlsbD1cIiNGRkI0MzBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zOC42NCwxNS41NCBMMzIuMzQsMTUuNTQgQzMxLjA1MiwxMi40ODggMjgsMTAuMzYgMjQuNDcyLDEwLjM2IEMxOS43NjgsMTAuMzYgMTUuOTMyLDE0LjE2OCAxNS45MzIsMTguODQ0IEMxNS45MzIsMjMuNTIgMTkuNzY4LDI3LjMyOCAyNC40NzIsMjcuMzI4IEMyOCwyNy4zMjggMzEuMDI0LDI1LjIgMzIuMzEyLDIyLjE3NiBMMzguNjQsMjIuMTc2IEM0MC40ODgsMjIuMTc2IDQyLDIwLjY5MiA0MiwxOC44NDQgQzQyLDE3LjA1MiA0MC40ODgsMTUuNTQgMzguNjQsMTUuNTQgWiBNMjQuNDcyLDIyLjE0OCBDMjIuNjUyLDIyLjE0OCAyMS4xNjgsMjAuNjkyIDIxLjE2OCwxOC44NzIgQzIxLjE2OCwxNy4wNTIgMjIuNjUyLDE1LjU5NiAyNC40NzIsMTUuNTk2IEMyNi4yOTIsMTUuNTk2IDI3Ljc3NiwxNy4wNTIgMjcuNzc2LDE4Ljg3MiBDMjcuNzc2LDIwLjY5MiAyNi4yOTIsMjIuMTQ4IDI0LjQ3MiwyMi4xNDggWlwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzcuOTEyLDMxLjE5MiBMMzIuOTg0LDI2LjY1NiBDMzIuNjIsMjYuMzIgMzIuMDg4LDI2LjM0OCAzMS43NTIsMjYuNjg0IEMyOS41OTYsMjguNzI4IDI2LjYsMjkuOTMyIDIzLjMyNCwyOS42NTIgQzE4LjAzMiwyOS4yMzIgMTMuNzc2LDI0LjkyIDEzLjQxMiwxOS42NTYgQzEyLjk2NCwxMy4zODQgMTcuOTc2LDguMTIgMjQuMjIsOC4xMiBDMjYuOTY0LDguMTIgMjkuNDU2LDkuMTI4IDMxLjM4OCwxMC44MDggQzMxLjcyNCwxMS4xMTYgMzIuMjU2LDExLjExNiAzMi41OTIsMTAuODA4IEwzNy42MDQsNi4yMTYgQzM3LjgsNi4wMiAzNy44MjgsNS43MTIgMzcuNjMyLDUuNTE2IEMzMy45NjQsMS44NzYgMjguODQsLTAuMjggMjMuMjEyLDAuMDI4IEMxNC4zNjQsMC40NzYgNy4wNTYsNy4wNTYgNS41MTYsMTUuNTQgTDMuMzYsMTUuNTQgQzEuNTEyLDE1LjU0IDAsMTcuMDUyIDAsMTguOSBDMCwyMC43NDggMS41MTIsMjIuMjYgMy4zNiwyMi4yNiBMNS41MTYsMjIuMjYgQzcuMTEyLDMxLjA4IDE0Ljg2OCwzNy44IDI0LjIyLDM3LjggQzI5LjYyNCwzNy44IDM0LjQ2OCwzNS41NiAzNy45NCwzMS45NzYgQzM4LjEzNiwzMS43NTIgMzguMTM2LDMxLjQxNiAzNy45MTIsMzEuMTkyIFpcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgICAgQ29tbXVuaXR5IFJlc291cmNlXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3Ioe3BhcnNlZFJlcSwgaW5zdHJ1Y3RvciwgcGFsZXR0ZX0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB1bmlxVGFncyA9IG1hcCh1bmlxQnkoaW5zdHJ1Y3Rvci5sZXNzb25fdGFncywgJ2xhYmVsJyksICh0YWcpID0+IHtcbiAgICByZXR1cm4gdGFnLmltYWdlX3VybFxuICB9KVxuICBjb25zdCBoYXNQdWJsaXNoZWRDb3Vyc2UgPSBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gIGNvbnN0IFRlY2hMb2dvcyA9ICh7bGltaXQgPSA1fSkgPT4ge1xuICAgIGlmICghaXNFbXB0eSh1bmlxVGFncykpXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDYwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dW5pcVRhZ3Muc2xpY2UoMCwgbGltaXQpLm1hcCgodGFnKSA9PiAoXG4gICAgICAgICAgICA8aW1nIGtleT17dGFnfSBzcmM9e3RhZ30gd2lkdGg9XCI1MHB4XCIgY3NzPXt7bWFyZ2luOiAnMCAyMHB4J319IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIGVsc2UgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjIwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgICBlZ2doZWFkLmlvIDxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+aW5zdHJ1Y3Rvcjwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc1NnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkoaW5zdHJ1Y3Rvci5mdWxsX25hbWUucmVwbGFjZSgnxYEnLCAnTCcpKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAhPT0gMCAmJlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgICAgICAgICAgICAgICAgID8gJzFmciAxZnInXG4gICAgICAgICAgICAgICAgICA6ICcxZnInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7Zm9udFNpemU6IDQ4fX0+e2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7b3BhY2l0eTogMC43fX0+XG4gICAgICAgICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyA+IDEgPyAnbGVzc29ucycgOiAnbGVzc29uJ31cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aGFzUHVibGlzaGVkQ291cnNlICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzID4gMSA/ICdjb3Vyc2VzJyA6ICdjb3Vyc2UnfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VGVjaExvZ29zIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjIwcHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjIwcHhcIlxuICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiA2MCwgYm9yZGVyUmFkaXVzOiAyMH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBsYXlsaXN0cyh7cGFyc2VkUmVxLCBwbGF5bGlzdH0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA0NjAsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZVooMTVkZWcpJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgIG1hcmdpbjogJy0xMTBweCAwIDAgLTYwcHgnLFxuICAgICAgICAgICAgICB6b29tOiAxLjQ1LFxuICAgICAgICAgICAgICBvcGFjaXR5OiAwLjksXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5zbGljZSgwLCAzKS5tYXAoKGxlc3NvbikgPT4gKFxuICAgICAgICAgICAgICA8aW1nIHNyYz17bGVzc29uLnRodW1iX25haWx9IHdpZHRoPVwiNDYwXCIga2V5PXtsZXNzb24uaWR9IC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiOTVcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI5NVwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgOTUgOTVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgY3k9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICByPVwiNDYuMzJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlPVwiIzA1MTcyMVwiXG4gICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMjUyNTI2XCJcbiAgICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTQwLjA0MDAwMTUsNjAuMzYxMzU2IEM0MC4wNDAwMDE1LDYxLjc2NDM2MyA0MC45ODA4MTc4LDYyLjI5MjU1NjkgNDIuMTU1OTIxNSw2MS41MzE2OTA0IEw1OS4xODExMTUzLDUwLjUwODA2ODIgQzYwLjM0OTcwNTcsNDkuNzUxNDE5MSA2MC4zNTYyMTksNDguNTI4ODY1NyA1OS4xODExMTUzLDQ3Ljc2Nzk5OTIgTDQyLjE1NTkyMTUsMzYuNzQ0Mzc3MSBDNDAuOTg3MzMxMiwzNS45ODc3MjggNDAuMDQwMDAxNSwzNi41MjIxMTM2IDQwLjA0MDAwMTUsMzcuOTE0NzExNCBMNDAuMDQwMDAxNSw2MC4zNjEzNTYgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIC8vIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZzogNzUsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAvLyBmb25TaXplOiA1OCxcbiAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgID8gNDhcbiAgICAgICAgICAgICAgICAgICAgICA6IDUyXG4gICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgIDogNjAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxoM1xuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIG1hcmdpbjogJzAgYXV0bycsXG4gICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENvbGxlY3Rpb24gYnl7JyAnfVxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319PlxuICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuYXZhdGFyX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5pbmNsdWRlcygnZ3JhdmF0YXInKVxuICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICAgICAgICAgICAgICAgICAgOiBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjc3M9e3tib3JkZXJSYWRpdXM6ICc1MCUnLCBtYXJnaW46ICcwIDE2cHgnfX1cbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWUucmVwbGFjZSgnxYEnLCAnTCcpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPGgzIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblRvcDogJzFyZW0nfX0+XG4gICAgICAgICAgICB7cGxheWxpc3QuaXRlbXMubGVuZ3RofSB2aWRlbyBsZXNzb25zLHsnICd9XG4gICAgICAgICAgICB7Y29udmVydFRpbWUocGxheWxpc3QuZHVyYXRpb24pfVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc3RvcmUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPFN0b3JlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncG9kY2FzdCc6XG4gICAgICBjb25zdCBwb2RjYXN0ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9wb2RjYXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zdCBwYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKHBvZGNhc3QuaW1hZ2VfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaW5zdHJ1Y3Rvcic6XG4gICAgICBjb25zdCBpbnN0cnVjdG9yID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9pbnN0cnVjdG9ycy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zdCBhdmF0YXJQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKGluc3RydWN0b3IuYXZhdGFyXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxJbnN0cnVjdG9yXG4gICAgICAgICAgaW5zdHJ1Y3Rvcj17aW5zdHJ1Y3Rvcn1cbiAgICAgICAgICBwYWxldHRlPXthdmF0YXJQYWxldHRlfVxuICAgICAgICAgIHBhcnNlZFJlcT17cGFyc2VkUmVxfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwbGF5bGlzdHMnOlxuICAgICAgY29uc3QgcGxheWxpc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BsYXlsaXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zb2xlLmxvZygncGxheWxpc3Q6ICcsIHBsYXlsaXN0KVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQbGF5bGlzdHMgcGxheWxpc3Q9e3BsYXlsaXN0fSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdsZXNzb24nOlxuICAgICAgY29uc3QgbGVzc29uID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9sZXNzb25zLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHRhZ1BhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20obGVzc29uLmltYWdlXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIC8vIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref33 = process.env.NODE_ENV === "production" ? {
  name: "ffkmae-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;padding:50px;width:100%;max-width:620px;;label:Instructor;"
} : {
  name: "ffkmae-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;padding:50px;width:100%;max-width:620px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref34 = process.env.NODE_ENV === "production" ? {
  name: "1m568lv-Instructor",
  styles: "display:flex;align-items:center;;label:Instructor;"
} : {
  name: "1m568lv-Instructor",
  styles: "display:flex;align-items:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref35 = process.env.NODE_ENV === "production" ? {
  name: "18ygg57-Instructor",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Instructor;"
} : {
  name: "18ygg57-Instructor",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref36 = process.env.NODE_ENV === "production" ? {
  name: "7nw3ed-Instructor",
  styles: "font-weight:700;font-size:58px;padding:56px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Instructor;"
} : {
  name: "7nw3ed-Instructor",
  styles: "font-weight:700;font-size:58px;padding:56px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref37 = process.env.NODE_ENV === "production" ? {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;"
} : {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref38 = process.env.NODE_ENV === "production" ? {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;"
} : {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref39 = process.env.NODE_ENV === "production" ? {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;"
} : {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref40 = process.env.NODE_ENV === "production" ? {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;"
} : {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref41 = process.env.NODE_ENV === "production" ? {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;"
} : {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref42 = process.env.NODE_ENV === "production" ? {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;"
} : {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref43 = process.env.NODE_ENV === "production" ? {
  name: "axzzs2-Instructor",
  styles: "margin-right:60px;border-radius:20px;;label:Instructor;"
} : {
  name: "axzzs2-Instructor",
  styles: "margin-right:60px;border-radius:20px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Instructor(_ref29) {
  var parsedReq = _ref29.parsedReq,
      instructor = _ref29.instructor,
      palette = _ref29.palette;
  var images = parsedReq.images;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  var uniqTags = (0, _lodash.map)((0, _lodash.uniqBy)(instructor.lesson_tags, 'label'), function (tag) {
    return tag.image_url;
  });
  var hasPublishedCourse = instructor.published_courses !== 0;

  var TechLogos = function TechLogos(_ref30) {
    var _ref30$limit = _ref30.limit,
        limit = _ref30$limit === void 0 ? 5 : _ref30$limit;
    if (!(0, _lodash.isEmpty)(uniqTags)) return (0, _core.jsx)("div", {
      css: _ref31
    }, uniqTags.slice(0, limit).map(function (tag) {
      return (0, _core.jsx)("img", {
        key: tag,
        src: tag,
        width: "50px",
        css: _ref32
      });
    }));else return null;
  };

  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref33
  }, (0, _core.jsx)("div", {
    css: _ref34
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref35
  }, "egghead.io ", (0, _core.jsx)("span", {
    css: /*#__PURE__*/(0, _css2["default"])({
      color: vibrant
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, "instructor"))), (0, _core.jsx)("h1", {
    css: _ref36
  }, emojify(instructor.full_name.replace('Ł', 'L'))), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'grid',
      width: '100%',
      gridTemplateColumns: instructor.published_lessons !== 0 && instructor.published_courses !== 0 ? '1fr 1fr' : '1fr'
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, instructor.published_lessons && (0, _core.jsx)("div", {
    css: _ref37
  }, (0, _core.jsx)("h2", {
    css: _ref38
  }, instructor.published_lessons), (0, _core.jsx)("h3", {
    css: _ref39
  }, instructor.published_lessons > 1 ? 'lessons' : 'lesson')), hasPublishedCourse && (0, _core.jsx)("div", {
    css: _ref40
  }, (0, _core.jsx)("h2", {
    css: _ref41
  }, instructor.published_courses), (0, _core.jsx)("h3", {
    css: _ref42
  }, instructor.published_courses > 1 ? 'courses' : 'course'))), (0, _core.jsx)(TechLogos, null)), (0, _core.jsx)("img", {
    src: instructor.avatar_256_url,
    width: "620px",
    heigh: "620px",
    css: _ref43
  })));
}

var _ref45 = process.env.NODE_ENV === "production" ? {
  name: "kccywv-Playlists",
  styles: "align-items:center;display:flex;justify-content:space-between;width:100%;height:100%;;label:Playlists;"
} : {
  name: "kccywv-Playlists",
  styles: "align-items:center;display:flex;justify-content:space-between;width:100%;height:100%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref46 = process.env.NODE_ENV === "production" ? {
  name: "118xvyt-Playlists",
  styles: "width:100%;max-width:460px;height:100%;display:flex;align-items:center;flex-direction:column;position:relative;overflow:hidden;background-color:black;;label:Playlists;"
} : {
  name: "118xvyt-Playlists",
  styles: "width:100%;max-width:460px;height:100%;display:flex;align-items:center;flex-direction:column;position:relative;overflow:hidden;background-color:black;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref47 = process.env.NODE_ENV === "production" ? {
  name: "fxsjk7-Playlists",
  styles: "transform:rotateZ(15deg);display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;margin:-110px 0 0 -60px;zoom:1.45;opacity:0.9;;label:Playlists;"
} : {
  name: "fxsjk7-Playlists",
  styles: "transform:rotateZ(15deg);display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;margin:-110px 0 0 -60px;zoom:1.45;opacity:0.9;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref48 = process.env.NODE_ENV === "production" ? {
  name: "10kc6ht-Playlists",
  styles: "position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;;label:Playlists;"
} : {
  name: "10kc6ht-Playlists",
  styles: "position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref49 = process.env.NODE_ENV === "production" ? {
  name: "5v98uz-Playlists",
  styles: "display:flex;flex-direction:column;padding:75px;width:100%;;label:Playlists;"
} : {
  name: "5v98uz-Playlists",
  styles: "display:flex;flex-direction:column;padding:75px;width:100%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref50 = process.env.NODE_ENV === "production" ? {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;"
} : {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref51 = process.env.NODE_ENV === "production" ? {
  name: "rhszqc-Playlists",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Playlists;"
} : {
  name: "rhszqc-Playlists",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref52 = process.env.NODE_ENV === "production" ? {
  name: "1br25ws-Playlists",
  styles: "width:100%;display:flex;align-items:center;margin:0 auto;text-align:center;;label:Playlists;"
} : {
  name: "1br25ws-Playlists",
  styles: "width:100%;display:flex;align-items:center;margin:0 auto;text-align:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref53 = process.env.NODE_ENV === "production" ? {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;"
} : {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref54 = process.env.NODE_ENV === "production" ? {
  name: "15nik7s-Playlists",
  styles: "border-radius:50%;margin:0 16px;;label:Playlists;"
} : {
  name: "15nik7s-Playlists",
  styles: "border-radius:50%;margin:0 16px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref55 = process.env.NODE_ENV === "production" ? {
  name: "feqmdq-Playlists",
  styles: "display:flex;align-items:center;margin-top:1rem;;label:Playlists;"
} : {
  name: "feqmdq-Playlists",
  styles: "display:flex;align-items:center;margin-top:1rem;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThyQmMiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyVG9TdGF0aWNNYXJrdXB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQge2pzeCwgY3NzLCBHbG9iYWx9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQge2lzRW1wdHksIG1hcCwgdW5pcUJ5fSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBWaWJyYW50IGZyb20gJ25vZGUtdmlicmFudCdcbmltcG9ydCBmb250cyBmcm9tICcuL2ZvbnRzJ1xuaW1wb3J0IGNvbnZlcnRUaW1lIGZyb20gJy4vY29udmVydFRpbWUnXG5pbXBvcnQgdHdlbW9qaSBmcm9tICd0d2Vtb2ppJ1xuXG5jb25zdCB0d09wdGlvbnMgPSB7Zm9sZGVyOiAnc3ZnJywgZXh0OiAnLnN2Zyd9XG5jb25zdCBlbW9qaWZ5ID0gKHRleHQpID0+IHR3ZW1vamkucGFyc2UodGV4dCwgdHdPcHRpb25zKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgJHtmb250c31cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90byxcbiAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PkhvdyB0byBlZ2doZWFkPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7d2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDcwMH19PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMyNDI1MjknLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcyNHB4IDAgMCAjMjQyNTI5LCAtMjRweCAwIDAgIzI0MjUyOScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnNDZweCcsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMTJweCAwJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkodGV4dC5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYyOHB4IDYyOHB4JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgNTAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7bWFyZ2luTGVmdDogMjB9fT5cbiAgICAgICAgICAgIHsvKiB7cmVzb3VyY2VUeXBlLnJlcGxhY2UoJy0nLCAnICcpfSAqL31cbiAgICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxoMVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBvZGNhc3Qoe3BhcnNlZFJlcSwgcG9kY2FzdCwgcGFsZXR0ZX0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDIgY3NzPXt7Zm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknfX0+XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW88c3BhbiBjc3M9e3tjb2xvcjogdmlicmFudH19Pi9wb2RjYXN0czwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNDYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocG9kY2FzdC50aXRsZS5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7bGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17e21hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDE3MH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIC8vIHJpZ2h0IGNvbHVtbiBob2xkZXJcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzYsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MnB4XCIgY3NzPXt7bWFyZ2luUmlnaHQ6IDE1fX0gLz57JyAnfVxuICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgLy8gdGl0bGVcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBsZXNzb24udGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDQ1XG4gICAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA1MlxuICAgICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgICAgOiA2MlxuICAgICAgICAgICAgICAgICAgOiA2NixcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4zLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bGVzc29uLnRpdGxlLnJlcGxhY2UoJ+KAmScsIGAnYCl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qICA8c3ZnXG4gICAgICAgICAgICAgIC8vIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjg0XCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiODRcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDg0IDg0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIgMilcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICBjeD1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICByPVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9e3ZpYnJhbnR9XG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjIuOTk2XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPXtcbiAgICAgICAgICAgICAgICAgICAgbGVzc29uLnByaW1hcnlfdGFnLm5hbWUgPT09ICdqYXZhc2NyaXB0J1xuICAgICAgICAgICAgICAgICAgICAgID8gZGFya1ZpYnJhbnRcbiAgICAgICAgICAgICAgICAgICAgICA6ICcjRjdGQ0Y2J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZD1cIk0zMi4yNTg1NDMyLDIzLjkzMjMxOTMgTDU1LjQzMTAwMjgsMzguNjc4NDI5OSBDNTYuMTI4OTAzLDM5LjEyMjU0ODIgNTYuMzM0NjMzOSw0MC4wNDgzMzcxIDU1Ljg5MDUxNTUsNDAuNzQ2MjM3MyBDNTUuNzcyODE4MSw0MC45MzExOTA0IDU1LjYxNTk1NTgsNDEuMDg4MDUyNyA1NS40MzEwMDI4LDQxLjIwNTc1MDEgTDMyLjI1ODU0MzIsNTUuOTUxODYwNyBDMzEuNTYwNjQzLDU2LjM5NTk3OTEgMzAuNjM0ODU0MSw1Ni4xOTAyNDgyIDMwLjE5MDczNTgsNTUuNDkyMzQ4IEMzMC4wMzc3OTk4LDU1LjI1MjAyIDI5Ljk1NjU2NzUsNTQuOTczMDYzNiAyOS45NTY1Njc1LDU0LjY4ODIwMDYgTDI5Ljk1NjU2NzUsMjUuMTk1OTc5NCBDMjkuOTU2NTY3NSwyNC4zNjg3NTE2IDMwLjYyNzE2ODEsMjMuNjk4MTUxIDMxLjQ1NDM5NTksMjMuNjk4MTUxIEMzMS43MzkyNTg5LDIzLjY5ODE1MSAzMi4wMTgyMTUzLDIzLjc3OTM4MzMgMzIuMjU4NTQzMiwyMy45MzIzMTkzIFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPiAqL31cblxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcwLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MCxcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KGxlc3Nvbi5pbnN0cnVjdG9yLmZ1bGxfbmFtZS5yZXBsYWNlKCfFgScsIGBMYCkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICBjc3M9e3ttYXJnaW5SaWdodDogMTB9fVxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiMzZcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjM2XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDM2IDM2XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ExQTdCQ1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTE4LDAgQzguMDU4ODc0NSwwIDAsOC4wNTg4NzQ1IDAsMTggQzAsMjcuOTQxMTI1NSA4LjA1ODg3NDUsMzYgMTgsMzYgQzI3Ljk0MTEyNTUsMzYgMzYsMjcuOTQxMTI1NSAzNiwxOCBDMzYsMTMuMjI2MTAzMiAzNC4xMDM1NzY5LDguNjQ3NzMyNzUgMzAuNzI3OTIyMSw1LjI3MjA3Nzk0IEMyNy4zNTIyNjcyLDEuODk2NDIzMTMgMjIuNzczODk2OCwwIDE4LDAgWiBNMTgsMzIuNCBDMTAuMDQ3MDk5NiwzMi40IDMuNiwyNS45NTI5MDA0IDMuNiwxOCBDMy42LDEwLjA0NzA5OTYgMTAuMDQ3MDk5NiwzLjYgMTgsMy42IEMyNS45NTI5MDA0LDMuNiAzMi40LDEwLjA0NzA5OTYgMzIuNCwxOCBDMzIuNCwyMS44MTkxMTc1IDMwLjg4Mjg2MTUsMjUuNDgxODEzOCAyOC4xODIzMzc2LDI4LjE4MjMzNzYgQzI1LjQ4MTgxMzgsMzAuODgyODYxNSAyMS44MTkxMTc1LDMyLjQgMTgsMzIuNCBaIE0yMy41OCwxOS4xMzQgTDE5LjgsMTYuOTU2IEwxOS44LDkgQzE5LjgsOC4wMDU4ODc0NSAxOC45OTQxMTI1LDcuMiAxOCw3LjIgQzE3LjAwNTg4NzUsNy4yIDE2LjIsOC4wMDU4ODc0NSAxNi4yLDkgTDE2LjIsMTguMjE2IEMxNi4yMTA2NTgxLDE4LjM0MDAyMzYgMTYuMjQxMDQwMSwxOC40NjE1NTE4IDE2LjI5LDE4LjU3NiBDMTYuMzI3MDY5MSwxOC42ODI3OTUgMTYuMzc1MzM4LDE4Ljc4NTM2NjQgMTYuNDM0LDE4Ljg4MiBDMTYuNDgzMjU1NiwxOC45ODQzMTEyIDE2LjU0MzYxODgsMTkuMDgwODkyMyAxNi42MTQsMTkuMTcgTDE2LjkwMiwxOS40MDQgTDE3LjA2NCwxOS41NjYgTDIxLjc0NCwyMi4yNjYgQzIyLjAxODMyNTIsMjIuNDIxNDg0OCAyMi4zMjg2ODI1LDIyLjUwMjE3NzcgMjIuNjQ0LDIyLjUwMDA0NDUgQzIzLjQ2MzcwNzMsMjIuNTA1NzMxIDI0LjE4Mzc1ODEsMjEuOTU2OTAyNiAyNC4zOTU0OTg0LDIxLjE2NDk5NDIgQzI0LjYwNzIzODYsMjAuMzczMDg1OCAyNC4yNTcxODI4LDE5LjUzODEzMjYgMjMuNTQ0LDE5LjEzNCBMMjMuNTgsMTkuMTM0IFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShsZXNzb24uZHVyYXRpb24pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bGVzc29uLmZyZWVfZm9yZXZlciAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAvLyBjb21tdW5pdHkgcmVzb3VyY2VcbiAgICAgICAgICAgICAgICBjc3M9e3tkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAxMH19XG4gICAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDJcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzhcIlxuICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA0MiAzOFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGcgZmlsbD1cIiNGRkI0MzBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zOC42NCwxNS41NCBMMzIuMzQsMTUuNTQgQzMxLjA1MiwxMi40ODggMjgsMTAuMzYgMjQuNDcyLDEwLjM2IEMxOS43NjgsMTAuMzYgMTUuOTMyLDE0LjE2OCAxNS45MzIsMTguODQ0IEMxNS45MzIsMjMuNTIgMTkuNzY4LDI3LjMyOCAyNC40NzIsMjcuMzI4IEMyOCwyNy4zMjggMzEuMDI0LDI1LjIgMzIuMzEyLDIyLjE3NiBMMzguNjQsMjIuMTc2IEM0MC40ODgsMjIuMTc2IDQyLDIwLjY5MiA0MiwxOC44NDQgQzQyLDE3LjA1MiA0MC40ODgsMTUuNTQgMzguNjQsMTUuNTQgWiBNMjQuNDcyLDIyLjE0OCBDMjIuNjUyLDIyLjE0OCAyMS4xNjgsMjAuNjkyIDIxLjE2OCwxOC44NzIgQzIxLjE2OCwxNy4wNTIgMjIuNjUyLDE1LjU5NiAyNC40NzIsMTUuNTk2IEMyNi4yOTIsMTUuNTk2IDI3Ljc3NiwxNy4wNTIgMjcuNzc2LDE4Ljg3MiBDMjcuNzc2LDIwLjY5MiAyNi4yOTIsMjIuMTQ4IDI0LjQ3MiwyMi4xNDggWlwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzcuOTEyLDMxLjE5MiBMMzIuOTg0LDI2LjY1NiBDMzIuNjIsMjYuMzIgMzIuMDg4LDI2LjM0OCAzMS43NTIsMjYuNjg0IEMyOS41OTYsMjguNzI4IDI2LjYsMjkuOTMyIDIzLjMyNCwyOS42NTIgQzE4LjAzMiwyOS4yMzIgMTMuNzc2LDI0LjkyIDEzLjQxMiwxOS42NTYgQzEyLjk2NCwxMy4zODQgMTcuOTc2LDguMTIgMjQuMjIsOC4xMiBDMjYuOTY0LDguMTIgMjkuNDU2LDkuMTI4IDMxLjM4OCwxMC44MDggQzMxLjcyNCwxMS4xMTYgMzIuMjU2LDExLjExNiAzMi41OTIsMTAuODA4IEwzNy42MDQsNi4yMTYgQzM3LjgsNi4wMiAzNy44MjgsNS43MTIgMzcuNjMyLDUuNTE2IEMzMy45NjQsMS44NzYgMjguODQsLTAuMjggMjMuMjEyLDAuMDI4IEMxNC4zNjQsMC40NzYgNy4wNTYsNy4wNTYgNS41MTYsMTUuNTQgTDMuMzYsMTUuNTQgQzEuNTEyLDE1LjU0IDAsMTcuMDUyIDAsMTguOSBDMCwyMC43NDggMS41MTIsMjIuMjYgMy4zNiwyMi4yNiBMNS41MTYsMjIuMjYgQzcuMTEyLDMxLjA4IDE0Ljg2OCwzNy44IDI0LjIyLDM3LjggQzI5LjYyNCwzNy44IDM0LjQ2OCwzNS41NiAzNy45NCwzMS45NzYgQzM4LjEzNiwzMS43NTIgMzguMTM2LDMxLjQxNiAzNy45MTIsMzEuMTkyIFpcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgICAgQ29tbXVuaXR5IFJlc291cmNlXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3Ioe3BhcnNlZFJlcSwgaW5zdHJ1Y3RvciwgcGFsZXR0ZX0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB1bmlxVGFncyA9IG1hcCh1bmlxQnkoaW5zdHJ1Y3Rvci5sZXNzb25fdGFncywgJ2xhYmVsJyksICh0YWcpID0+IHtcbiAgICByZXR1cm4gdGFnLmltYWdlX3VybFxuICB9KVxuICBjb25zdCBoYXNQdWJsaXNoZWRDb3Vyc2UgPSBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gIGNvbnN0IFRlY2hMb2dvcyA9ICh7bGltaXQgPSA1fSkgPT4ge1xuICAgIGlmICghaXNFbXB0eSh1bmlxVGFncykpXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDYwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dW5pcVRhZ3Muc2xpY2UoMCwgbGltaXQpLm1hcCgodGFnKSA9PiAoXG4gICAgICAgICAgICA8aW1nIGtleT17dGFnfSBzcmM9e3RhZ30gd2lkdGg9XCI1MHB4XCIgY3NzPXt7bWFyZ2luOiAnMCAyMHB4J319IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIGVsc2UgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjIwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgICBlZ2doZWFkLmlvIDxzcGFuIGNzcz17e2NvbG9yOiB2aWJyYW50fX0+aW5zdHJ1Y3Rvcjwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc1NnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkoaW5zdHJ1Y3Rvci5mdWxsX25hbWUucmVwbGFjZSgnxYEnLCAnTCcpKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAhPT0gMCAmJlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgICAgICAgICAgICAgICAgID8gJzFmciAxZnInXG4gICAgICAgICAgICAgICAgICA6ICcxZnInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7Zm9udFNpemU6IDQ4fX0+e2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7b3BhY2l0eTogMC43fX0+XG4gICAgICAgICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyA+IDEgPyAnbGVzc29ucycgOiAnbGVzc29uJ31cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aGFzUHVibGlzaGVkQ291cnNlICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogNDh9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3tvcGFjaXR5OiAwLjd9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzID4gMSA/ICdjb3Vyc2VzJyA6ICdjb3Vyc2UnfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VGVjaExvZ29zIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjIwcHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjIwcHhcIlxuICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiA2MCwgYm9yZGVyUmFkaXVzOiAyMH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBsYXlsaXN0cyh7cGFyc2VkUmVxLCBwbGF5bGlzdH0pIHtcbiAgY29uc3Qge2ltYWdlc30gPSBwYXJzZWRSZXFcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA0NjAsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZVooMTVkZWcpJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgIG1hcmdpbjogJy0xMTBweCAwIDAgLTYwcHgnLFxuICAgICAgICAgICAgICB6b29tOiAxLjQ1LFxuICAgICAgICAgICAgICBvcGFjaXR5OiAwLjksXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5zbGljZSgwLCAzKS5tYXAoKGxlc3NvbikgPT4gKFxuICAgICAgICAgICAgICA8aW1nIHNyYz17bGVzc29uLnRodW1iX25haWx9IHdpZHRoPVwiNDYwXCIga2V5PXtsZXNzb24uaWR9IC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgIHdpZHRoPVwiOTVcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI5NVwiXG4gICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgOTUgOTVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgIGN4PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgY3k9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICByPVwiNDYuMzJcIlxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlPVwiIzA1MTcyMVwiXG4gICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMjUyNTI2XCJcbiAgICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTQwLjA0MDAwMTUsNjAuMzYxMzU2IEM0MC4wNDAwMDE1LDYxLjc2NDM2MyA0MC45ODA4MTc4LDYyLjI5MjU1NjkgNDIuMTU1OTIxNSw2MS41MzE2OTA0IEw1OS4xODExMTUzLDUwLjUwODA2ODIgQzYwLjM0OTcwNTcsNDkuNzUxNDE5MSA2MC4zNTYyMTksNDguNTI4ODY1NyA1OS4xODExMTUzLDQ3Ljc2Nzk5OTIgTDQyLjE1NTkyMTUsMzYuNzQ0Mzc3MSBDNDAuOTg3MzMxMiwzNS45ODc3MjggNDAuMDQwMDAxNSwzNi41MjIxMTM2IDQwLjA0MDAwMTUsMzcuOTE0NzExNCBMNDAuMDQwMDAxNSw2MC4zNjEzNTYgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIC8vIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZzogNzUsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAvLyBmb25TaXplOiA1OCxcbiAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgID8gNDhcbiAgICAgICAgICAgICAgICAgICAgICA6IDUyXG4gICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgIDogNjAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxoM1xuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIG1hcmdpbjogJzAgYXV0bycsXG4gICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENvbGxlY3Rpb24gYnl7JyAnfVxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319PlxuICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuYXZhdGFyX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5pbmNsdWRlcygnZ3JhdmF0YXInKVxuICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICAgICAgICAgICAgICAgICAgOiBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjc3M9e3tib3JkZXJSYWRpdXM6ICc1MCUnLCBtYXJnaW46ICcwIDE2cHgnfX1cbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTZcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWUucmVwbGFjZSgnxYEnLCAnTCcpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPGgzIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblRvcDogJzFyZW0nfX0+XG4gICAgICAgICAgICB7cGxheWxpc3QuaXRlbXMubGVuZ3RofSB2aWRlbyBsZXNzb25zLHsnICd9XG4gICAgICAgICAgICB7Y29udmVydFRpbWUocGxheWxpc3QuZHVyYXRpb24pfVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc3RvcmUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPFN0b3JlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncG9kY2FzdCc6XG4gICAgICBjb25zdCBwb2RjYXN0ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9wb2RjYXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zdCBwYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKHBvZGNhc3QuaW1hZ2VfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaW5zdHJ1Y3Rvcic6XG4gICAgICBjb25zdCBpbnN0cnVjdG9yID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9pbnN0cnVjdG9ycy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zdCBhdmF0YXJQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKGluc3RydWN0b3IuYXZhdGFyXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxJbnN0cnVjdG9yXG4gICAgICAgICAgaW5zdHJ1Y3Rvcj17aW5zdHJ1Y3Rvcn1cbiAgICAgICAgICBwYWxldHRlPXthdmF0YXJQYWxldHRlfVxuICAgICAgICAgIHBhcnNlZFJlcT17cGFyc2VkUmVxfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwbGF5bGlzdHMnOlxuICAgICAgY29uc3QgcGxheWxpc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BsYXlsaXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBjb25zb2xlLmxvZygncGxheWxpc3Q6ICcsIHBsYXlsaXN0KVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQbGF5bGlzdHMgcGxheWxpc3Q9e3BsYXlsaXN0fSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdsZXNzb24nOlxuICAgICAgY29uc3QgbGVzc29uID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9sZXNzb25zLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHRhZ1BhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20obGVzc29uLmltYWdlXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIC8vIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Playlists(_ref44) {
  var parsedReq = _ref44.parsedReq,
      playlist = _ref44.playlist;
  var images = parsedReq.images;
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: _ref45
  }, (0, _core.jsx)("div", {
    css: _ref46
  }, (0, _core.jsx)("div", {
    css: _ref47
  }, playlist.items.slice(0, 3).map(function (lesson) {
    return (0, _core.jsx)("img", {
      src: lesson.thumb_nail,
      width: "460",
      key: lesson.id
    });
  })), (0, _core.jsx)("div", {
    css: _ref48
  }, (0, _core.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "95",
    height: "95",
    viewBox: "0 0 95 95"
  }, (0, _core.jsx)("g", {
    fill: "none",
    fillRule: "evenodd"
  }, (0, _core.jsx)("circle", {
    cx: "47.32",
    cy: "47.32",
    r: "46.32",
    fill: "#FFF",
    stroke: "#051721",
    strokeWidth: "2"
  }), (0, _core.jsx)("path", {
    fill: "#252526",
    fillRule: "nonzero",
    d: "M40.0400015,60.361356 C40.0400015,61.764363 40.9808178,62.2925569 42.1559215,61.5316904 L59.1811153,50.5080682 C60.3497057,49.7514191 60.356219,48.5288657 59.1811153,47.7679992 L42.1559215,36.7443771 C40.9873312,35.987728 40.0400015,36.5221136 40.0400015,37.9147114 L40.0400015,60.361356 Z"
  }))))), (0, _core.jsx)("div", {
    css: _ref49
  }, (0, _core.jsx)("div", {
    css: _ref50
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref51
  }, "egghead.io")), (0, _core.jsx)("h1", {
    css: /*#__PURE__*/(0, _css2["default"])({
      fontWeight: 700,
      padding: '56px 0',
      color: 'rgba(0, 0, 0, 0.9)',
      lineHeight: 1.2,
      // fonSize: 58,
      fontSize: playlist.title.length > 30 ? playlist.title.length > 45 ? playlist.title.length > 55 ? 48 : 52 : 56 : 60
    }, ";label:Playlists;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, emojify(playlist.title)), (0, _core.jsx)("h3", {
    css: _ref52
  }, "Collection by", ' ', (0, _core.jsx)("span", {
    css: _ref53
  }, playlist.owner.avatar_url && (0, _core.jsx)("img", {
    src: playlist.owner.avatar_url.includes('gravatar') ? playlist.owner.avatar_url.replace('//', 'https://') : playlist.owner.avatar_url,
    css: _ref54,
    width: "56"
  }), playlist.owner.full_name.replace('Ł', 'L'))), (0, _core.jsx)("h3", {
    css: _ref55
  }, playlist.items.length, " video lessons,", ' ', (0, _convertTime["default"])(playlist.duration)))));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(parsedReq) {
    var markup, podcast, palette, instructor, avatarPalette, playlist, resource, lesson, tagPalette;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'store' ? 6 : _context.t0 === 'podcast' ? 8 : _context.t0 === 'instructor' ? 17 : _context.t0 === 'playlists' ? 26 : _context.t0 === 'series' ? 32 : _context.t0 === 'lesson' ? 37 : 45;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 6:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Store, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 8:
            _context.next = 10;
            return _axios["default"].get("https://egghead.io/api/v1/podcasts/".concat(parsedReq.text)).then(function (_ref56) {
              var data = _ref56.data;
              return data;
            });

          case 10:
            podcast = _context.sent;
            _context.next = 13;
            return Vibrant.from(podcast.image_url).getPalette().then(function (palette) {
              return palette;
            });

          case 13:
            palette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Podcast, {
              podcast: podcast,
              palette: palette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 17:
            _context.next = 19;
            return _axios["default"].get("https://egghead.io/api/v1/instructors/".concat(parsedReq.text)).then(function (_ref57) {
              var data = _ref57.data;
              return data;
            });

          case 19:
            instructor = _context.sent;
            _context.next = 22;
            return Vibrant.from(instructor.avatar_256_url).getPalette().then(function (palette) {
              return palette;
            });

          case 22:
            avatarPalette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Instructor, {
              instructor: instructor,
              palette: avatarPalette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 26:
            _context.next = 28;
            return _axios["default"].get("https://egghead.io/api/v1/playlists/".concat(parsedReq.text)).then(function (_ref58) {
              var data = _ref58.data;
              return data;
            });

          case 28:
            playlist = _context.sent;
            console.log('playlist: ', playlist);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Playlists, {
              playlist: playlist,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 32:
            _context.next = 34;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref59) {
              var data = _ref59.data;
              return data;
            });

          case 34:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 37:
            _context.next = 39;
            return _axios["default"].get("https://egghead.io/api/v1/lessons/".concat(parsedReq.text)).then(function (_ref60) {
              var data = _ref60.data;
              return data;
            });

          case 39:
            lesson = _context.sent;
            _context.next = 42;
            return Vibrant.from(lesson.image_256_url).getPalette().then(function (palette) {
              return palette;
            });

          case 42:
            tagPalette = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Lesson, {
              lesson: lesson,
              palette: tagPalette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 46);

          case 45:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 46:
            return _context.abrupt("return", markup);

          case 47:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}