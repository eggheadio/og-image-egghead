"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

var _lodash = require("lodash");

var Vibrant = _interopRequireWildcard(require("node-vibrant"));

var _fs = require("fs");

import { jsx as ___EmotionJSX } from "@emotion/core";

/** @jsx jsx */
var rglr = (0, _fs.readFileSync)("".concat(__dirname, "/../_fonts/Inter-Regular.woff2")).toString('base64');
var reset =
/*#__PURE__*/
process.env.NODE_ENV === "production" ? {
  name: "9nt1wn-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;}label:reset;"
} : {
  name: "9nt1wn-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;}label:reset;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWFpQiIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQge3JlYWRGaWxlU3luY30gZnJvbSAnZnMnXG5cbmNvbnN0IHJnbHIgPSByZWFkRmlsZVN5bmMoXG4gIGAke19fZGlybmFtZX0vLi4vX2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZjJgXG4pLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIC8qIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmOyAqL1xuICAgIC8qIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAqL1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbidcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCdcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7bWFyZ2luTGVmdDogMjB9fT5cbiAgICAgICAgICAgIHsvKiB7cmVzb3VyY2VUeXBlLnJlcGxhY2UoJy0nLCAnICcpfSAqL31cbiAgICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvKiA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+ICovfVxuICAgICAgICA8aDFcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgLy9iYWNrZ3JvdW5kQ29sb3I6ICcjRkYyRDU1JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgICAgey8qIDwvZGl2PiAqL31cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICAvLyBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIC8vIGNvbnN0IERhcmtNdXRlZCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsxXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsyXX0sIDEpYFxuICBjb25zdCBEYXJrTXV0ZWRPcGFjaXR5ID0gYHJnYmEoJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzBdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzJdfSwgLjg1KWBcbiAgLy8gY29uc3QgTGlnaHRWaWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzJdfSwgMSlgXG4gIC8vIGNvbnN0IFZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLlZpYnJhbnQuX3JnYlsxXX0sICR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2JbMl19LCAxKWBcbiAgLy8gY29uc3QgRGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtWaWJyYW50Ll9yZ2JbMl19LCAuODUpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICB3aWR0aDogJzEyMDBweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc2MjhweCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwb2RjYXN0LmltYWdlX3VybH0pYCxcbiAgICAgICAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDEwMDBweCAke0RhcmtNdXRlZE9wYWNpdHl9YCxcbiAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6ICcyMDAwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNjAlIDUwJScsXG4gICAgICAgICAgICBmaWx0ZXI6ICdibHVyKDM1cHgpJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMSknLFxuICAgICAgICAgICAgem9vbTogMS4yXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IDUwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiODBweFwiIC8+XG4gICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNiwgbWFyZ2luTGVmdDogMjAsIGNvbG9yOiAnd2hpdGUnfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBQb2RjYXN0XG4gICAgICAgICAgPC9oMj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiA1MCxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjMwLFxuICAgICAgICAgICAgekluZGV4OiAxMFxuICAgICAgICAgICAgLy9wb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDEwcHgnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC00MCxcbiAgICAgICAgICAgIHpJbmRleDogNVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4ocGFsZXR0ZSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "gb5bef-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:InstructorGuide;"
} : {
  name: "gb5bef-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "vl70m2-InstructorGuide",
  styles: "margin-left:20px;label:InstructorGuide;"
} : {
  name: "vl70m2-InstructorGuide",
  styles: "margin-left:20px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "1ngusay-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;label:InstructorGuide;"
} : {
  name: "1ngusay-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRHVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQge3JlYWRGaWxlU3luY30gZnJvbSAnZnMnXG5cbmNvbnN0IHJnbHIgPSByZWFkRmlsZVN5bmMoXG4gIGAke19fZGlybmFtZX0vLi4vX2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZjJgXG4pLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIC8qIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmOyAqL1xuICAgIC8qIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAqL1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbidcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCdcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7bWFyZ2luTGVmdDogMjB9fT5cbiAgICAgICAgICAgIHsvKiB7cmVzb3VyY2VUeXBlLnJlcGxhY2UoJy0nLCAnICcpfSAqL31cbiAgICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvKiA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+ICovfVxuICAgICAgICA8aDFcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgLy9iYWNrZ3JvdW5kQ29sb3I6ICcjRkYyRDU1JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgICAgey8qIDwvZGl2PiAqL31cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICAvLyBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIC8vIGNvbnN0IERhcmtNdXRlZCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsxXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsyXX0sIDEpYFxuICBjb25zdCBEYXJrTXV0ZWRPcGFjaXR5ID0gYHJnYmEoJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzBdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzJdfSwgLjg1KWBcbiAgLy8gY29uc3QgTGlnaHRWaWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzJdfSwgMSlgXG4gIC8vIGNvbnN0IFZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLlZpYnJhbnQuX3JnYlsxXX0sICR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2JbMl19LCAxKWBcbiAgLy8gY29uc3QgRGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtWaWJyYW50Ll9yZ2JbMl19LCAuODUpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICB3aWR0aDogJzEyMDBweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc2MjhweCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwb2RjYXN0LmltYWdlX3VybH0pYCxcbiAgICAgICAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDEwMDBweCAke0RhcmtNdXRlZE9wYWNpdHl9YCxcbiAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6ICcyMDAwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNjAlIDUwJScsXG4gICAgICAgICAgICBmaWx0ZXI6ICdibHVyKDM1cHgpJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMSknLFxuICAgICAgICAgICAgem9vbTogMS4yXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IDUwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiODBweFwiIC8+XG4gICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNiwgbWFyZ2luTGVmdDogMjAsIGNvbG9yOiAnd2hpdGUnfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBQb2RjYXN0XG4gICAgICAgICAgPC9oMj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiA1MCxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjMwLFxuICAgICAgICAgICAgekluZGV4OiAxMFxuICAgICAgICAgICAgLy9wb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDEwcHgnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC00MCxcbiAgICAgICAgICAgIHpJbmRleDogNVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4ocGFsZXR0ZSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: 'contain'
    }, "label:InstructorGuide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref4
  }, "How to egghead")), (0, _core.jsx)("span", {
    css: _ref5
  }, text)));
}

var _ref7 = process.env.NODE_ENV === "production" ? {
  name: "gv7747-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:Store;"
} : {
  name: "gv7747-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "1b9jgnm-Store",
  styles: "margin-left:20px;label:Store;"
} : {
  name: "1b9jgnm-Store",
  styles: "margin-left:20px;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "1kea1tn-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;label:Store;"
} : {
  name: "1kea1tn-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function Store(_ref6) {
  var parsedReq = _ref6.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: '628px 628px',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: '50% 50%'
    }, "label:Store;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref7
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref8
  }, "Store")), (0, _core.jsx)("h1", {
    css: _ref9
  }, text)));
}

var _ref11 = process.env.NODE_ENV === "production" ? {
  name: "cf4jch-Podcast",
  styles: "align-items:center;display:flex;justify-content:space-between;label:Podcast;"
} : {
  name: "cf4jch-Podcast",
  styles: "align-items:center;display:flex;justify-content:space-between;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "p8udu9-Podcast",
  styles: "position:relative;z-index:5;align-items:center;display:flex;left:50px;position:absolute;top:50px;label:Podcast;"
} : {
  name: "p8udu9-Podcast",
  styles: "position:relative;z-index:5;align-items:center;display:flex;left:50px;position:absolute;top:50px;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "1dpkv80-Podcast",
  styles: "font-size:36px;margin-left:20px;color:white;label:Podcast;"
} : {
  name: "1dpkv80-Podcast",
  styles: "font-size:36px;margin-left:20px;color:white;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "savvw2-Podcast",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:flex-end;padding-left:50px;padding-bottom:50px;height:628px;max-width:630px;z-index:10;label:Podcast;"
} : {
  name: "savvw2-Podcast",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:flex-end;padding-left:50px;padding-bottom:50px;height:628px;max-width:630px;z-index:10;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref15 = process.env.NODE_ENV === "production" ? {
  name: "1lvv81s-Podcast",
  styles: "font-weight:600;font-size:56px;padding:32px 10px;color:white;line-height:1.2;label:Podcast;"
} : {
  name: "1lvv81s-Podcast",
  styles: "font-weight:600;font-size:56px;padding:32px 10px;color:white;line-height:1.2;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function Podcast(_ref10) {
  var parsedReq = _ref10.parsedReq,
      podcast = _ref10.podcast,
      palette = _ref10.palette;
  var images = parsedReq.images; // console.log('PARSED REQUEST', parsedReq)
  // const DarkMuted = `rgba(${palette.DarkMuted._rgb[0]}, ${palette.DarkMuted._rgb[1]}, ${palette.DarkMuted._rgb[2]}, 1)`

  var DarkMutedOpacity = "rgba(".concat(palette.DarkMuted._rgb[0], ", ").concat(palette.DarkMuted._rgb[1], ", ").concat(palette.DarkMuted._rgb[2], ", .85)"); // const LightVibrant = `rgba(${palette.LightVibrant._rgb[0]}, ${palette.LightVibrant._rgb[1]}, ${palette.LightVibrant._rgb[2]}, 1)`
  // const Vibrant = `rgba(${palette.Vibrant._rgb[0]}, ${palette.Vibrant._rgb[1]}, ${palette.Vibrant._rgb[2]}, 1)`
  // const DarkVibrant = `rgba(${palette.DarkVibrant._rgb[0]}, ${palette.DarkVibrant._rgb[1]}, ${palette.DarkVibrant._rgb[2]}, .85)`

  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: _ref11
  }, (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      position: 'absolute',
      left: 0,
      top: 0,
      zIndex: 0,
      width: '1200px',
      height: '628px',
      backgroundImage: "url(".concat(podcast.image_url, ")"),
      boxShadow: "inset 0 0 0 1000px ".concat(DarkMutedOpacity),
      backgroundRepeat: 'no-repeat',
      backgroundSize: '2000px',
      backgroundPosition: '60% 50%',
      filter: 'blur(35px)',
      transform: 'scale(1.1)',
      zoom: 1.2
    }, "label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }), (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "80px"
  }), (0, _core.jsx)("h2", {
    css: _ref13
  }, "Podcast")), (0, _core.jsx)("div", {
    css: _ref14
  }, (0, _core.jsx)("h1", {
    css: _ref15
  }, podcast.title)), (0, _core.jsx)("img", {
    src: podcast.image_url,
    width: "648px",
    heigh: "648px",
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      clipPath: 'circle(220px at center)',
      zoom: 1.1,
      position: 'absolute',
      right: -20,
      top: -40,
      zIndex: 5
    }, "label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtTVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQge3JlYWRGaWxlU3luY30gZnJvbSAnZnMnXG5cbmNvbnN0IHJnbHIgPSByZWFkRmlsZVN5bmMoXG4gIGAke19fZGlybmFtZX0vLi4vX2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZjJgXG4pLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIC8qIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmOyAqL1xuICAgIC8qIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAqL1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbidcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCdcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZVxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgLy9mb250RmFtaWx5OiAnSW50ZXIsIEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIHN5c3RlbS11aSwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7bWFyZ2luTGVmdDogMjB9fT5cbiAgICAgICAgICAgIHsvKiB7cmVzb3VyY2VUeXBlLnJlcGxhY2UoJy0nLCAnICcpfSAqL31cbiAgICAgICAgICAgIFN0b3JlXG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvKiA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICAgICAgICB9fVxuICAgICAgICA+ICovfVxuICAgICAgICA8aDFcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgLy9iYWNrZ3JvdW5kQ29sb3I6ICcjRkYyRDU1JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgICAgey8qIDwvZGl2PiAqL31cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7cGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlfSkge1xuICBjb25zdCB7aW1hZ2VzfSA9IHBhcnNlZFJlcVxuICAvLyBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIC8vIGNvbnN0IERhcmtNdXRlZCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsxXX0sICR7cGFsZXR0ZS5EYXJrTXV0ZWQuX3JnYlsyXX0sIDEpYFxuICBjb25zdCBEYXJrTXV0ZWRPcGFjaXR5ID0gYHJnYmEoJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzBdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtNdXRlZC5fcmdiWzJdfSwgLjg1KWBcbiAgLy8gY29uc3QgTGlnaHRWaWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkxpZ2h0VmlicmFudC5fcmdiWzJdfSwgMSlgXG4gIC8vIGNvbnN0IFZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiWzBdfSwgJHtwYWxldHRlLlZpYnJhbnQuX3JnYlsxXX0sICR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2JbMl19LCAxKWBcbiAgLy8gY29uc3QgRGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYlswXX0sICR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiWzFdfSwgJHtwYWxldHRlLkRhcmtWaWJyYW50Ll9yZ2JbMl19LCAuODUpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICB3aWR0aDogJzEyMDBweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc2MjhweCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwb2RjYXN0LmltYWdlX3VybH0pYCxcbiAgICAgICAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDEwMDBweCAke0RhcmtNdXRlZE9wYWNpdHl9YCxcbiAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6ICcyMDAwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNjAlIDUwJScsXG4gICAgICAgICAgICBmaWx0ZXI6ICdibHVyKDM1cHgpJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMSknLFxuICAgICAgICAgICAgem9vbTogMS4yXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IDUwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiODBweFwiIC8+XG4gICAgICAgICAgPGgyIGNzcz17e2ZvbnRTaXplOiAzNiwgbWFyZ2luTGVmdDogMjAsIGNvbG9yOiAnd2hpdGUnfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBQb2RjYXN0XG4gICAgICAgICAgPC9oMj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiA1MCxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjMwLFxuICAgICAgICAgICAgekluZGV4OiAxMFxuICAgICAgICAgICAgLy9wb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDEwcHgnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC00MCxcbiAgICAgICAgICAgIHpJbmRleDogNVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4ocGFsZXR0ZSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"))
  })));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(parsedReq) {
    var markup, podcast, palette, resource;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'store' ? 6 : _context.t0 === 'podcast' ? 8 : _context.t0 === 'series' ? 17 : 22;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 23);

          case 6:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Store, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 23);

          case 8:
            _context.next = 10;
            return _axios["default"].get("https://egghead.io/api/v1/podcasts/".concat(parsedReq.text)).then(function (_ref16) {
              var data = _ref16.data;
              return data;
            });

          case 10:
            podcast = _context.sent;
            _context.next = 13;
            return Vibrant.from(podcast.image_url).getPalette().then(function (palette) {
              return palette;
            });

          case 13:
            palette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Podcast, {
              podcast: podcast,
              palette: palette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 23);

          case 17:
            _context.next = 19;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref17) {
              var data = _ref17.data;
              return data;
            });

          case 19:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 23);

          case 22:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 23:
            console.log(markup);
            return _context.abrupt("return", markup);

          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}