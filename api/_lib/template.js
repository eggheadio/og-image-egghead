"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _fs = require("fs");

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

var _lodash = require("lodash");

var Vibrant = _interopRequireWildcard(require("node-vibrant"));

var _convertTime = _interopRequireDefault(require("./convertTime"));

var _twemoji = _interopRequireDefault(require("twemoji"));

import { jsx as ___EmotionJSX } from "@emotion/core";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var twOptions = {
  folder: 'svg',
  ext: '.svg'
};

var emojify = function emojify(text) {
  return _twemoji["default"].parse(text, twOptions);
};

var hasArtworkImage = function hasArtworkImage(url) {
  return !url.match(/\/tags\//);
}; // const eggheadLogoSrc = readFileSync(`${__dirname}/egghead-logo.svg`).toString(
//   'base64',
// )
// const eggheadLogo = 'data:image/svg+xml;base64,' + eggheadLogoSrc


var rglr = (0, _fs.readFileSync)("".concat(__dirname, "/../../_fonts/Inter-Regular.woff2")).toString('base64');
var reset =
/*#__PURE__*/

/*#__PURE__*/
(0, _core.css)("@font-face{font-family:'Inter';font-style:normal;font-weight:normal;src:url(data:font/woff2;charset=utf-8;base64,", rglr, ") format('woff2');}*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;font-family:'Inter',system-ui,-apple-system,BlinkMacSystemFont;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;};label:reset;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), ";label:reset;");

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;"
} : {
  name: "1kbdmmp-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;"
} : {
  name: "1uqh223-InstructorGuide",
  styles: "margin-left:20px;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "t91mzu-InstructorGuide",
  styles: "width:100%;max-width:660px;;label:InstructorGuide;"
} : {
  name: "t91mzu-InstructorGuide",
  styles: "width:100%;max-width:660px;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 = process.env.NODE_ENV === "production" ? {
  name: "1js0dsb-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:24px 0 0 #242529, -24px 0 0 #242529;font-size:46px;font-weight:600;line-height:1.5;padding:12px 0;;label:InstructorGuide;"
} : {
  name: "1js0dsb-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:24px 0 0 #242529, -24px 0 0 #242529;font-size:46px;font-weight:600;line-height:1.5;padding:12px 0;;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: 'contain'
    }, ";label:InstructorGuide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThGUSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgeyBqc3gsIGNzcywgR2xvYmFsIH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7IGlzRW1wdHksIG1hcCwgdW5pcUJ5IH0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQgY29udmVydFRpbWUgZnJvbSAnLi9jb252ZXJ0VGltZSdcbmltcG9ydCB0d2Vtb2ppIGZyb20gJ3R3ZW1vamknXG5cbmNvbnN0IHR3T3B0aW9ucyA9IHsgZm9sZGVyOiAnc3ZnJywgZXh0OiAnLnN2ZycgfVxuY29uc3QgZW1vamlmeSA9ICh0ZXh0KSA9PiB0d2Vtb2ppLnBhcnNlKHRleHQsIHR3T3B0aW9ucylcbmNvbnN0IGhhc0FydHdvcmtJbWFnZSA9ICh1cmwpID0+IHtcbiAgcmV0dXJuICF1cmwubWF0Y2goL1xcL3RhZ3NcXC8vKVxufVxuLy8gY29uc3QgZWdnaGVhZExvZ29TcmMgPSByZWFkRmlsZVN5bmMoYCR7X19kaXJuYW1lfS9lZ2doZWFkLWxvZ28uc3ZnYCkudG9TdHJpbmcoXG4vLyAgICdiYXNlNjQnLFxuLy8gKVxuLy8gY29uc3QgZWdnaGVhZExvZ28gPSAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwnICsgZWdnaGVhZExvZ29TcmNcblxuY29uc3QgcmdsciA9IHJlYWRGaWxlU3luYyhcbiAgYCR7X19kaXJuYW1lfS8uLi8uLi9fZm9udHMvSW50ZXItUmVndWxhci53b2ZmMmAsXG4pLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcic7XG4gICAgZm9udC1zdHlsZTogIG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIHNyYzogdXJsKGRhdGE6Zm9udC93b2ZmMjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwke3JnbHJ9KSBmb3JtYXQoJ3dvZmYyJyk7XG59XG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzI0MjUyOTtcbiAgICBmb250LWZhbWlseTogJ0ludGVyJywgc3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQ7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHsgcmVzb3VyY2UsIHBhcnNlZFJlcSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3sgbWFyZ2luTGVmdDogMjAgfX0+SG93IHRvIGVnZ2hlYWQ8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e3sgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDY2MCB9fT5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMjQyNTI5JyxcbiAgICAgICAgICAgICAgYm94U2hhZG93OiAnMjRweCAwIDAgIzI0MjUyOSwgLTI0cHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgICBmb250U2l6ZTogJzQ2cHgnLFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS41LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMTJweCAwJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkodGV4dCl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gU3RvcmUoeyBwYXJzZWRSZXEgfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICc2MjhweCA2MjhweCcsXG4gICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlIDUwJScsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17eyBtYXJnaW5MZWZ0OiAyMCB9fT5TdG9yZTwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aDFcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgd2hpdGUsIC0zMnB4IDAgMCB3aGl0ZScsXG4gICAgICAgICAgICBmb250U2l6ZTogJzQ4cHgnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgICAgcGFkZGluZzogJzEwcHggMCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2gxPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb2RjYXN0KHsgcGFyc2VkUmVxLCBwb2RjYXN0LCBwYWxldHRlIH0pIHtcbiAgY29uc3QgeyBpbWFnZXMgfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjQwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMlxuICAgICAgICAgICAgICBjc3M9e3sgZm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW88c3BhbiBjc3M9e3sgY29sb3I6IHZpYnJhbnQgfX0+L3BvZGNhc3RzPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA0NixcbiAgICAgICAgICAgICAgcGFkZGluZzogJzMycHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShwb2RjYXN0LnRpdGxlKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtwb2RjYXN0LmltYWdlX3VybH1cbiAgICAgICAgICB3aWR0aD1cIjY0OHB4XCJcbiAgICAgICAgICBoZWlnaD1cIjY0OHB4XCJcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNsaXBQYXRoOiAnY2lyY2xlKDIyMHB4IGF0IGNlbnRlciknLFxuICAgICAgICAgICAgem9vbTogMS4xLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICByaWdodDogLTIwLFxuICAgICAgICAgICAgdG9wOiAtMzAsXG4gICAgICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgICAgICBib3hTaGFkb3c6XG4gICAgICAgICAgICAgICcwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMiksIDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjAyOCksIDAgMTIuNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjAzNSksIDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDQyKSwgMCA0MS44cHggMzMuNHB4IHJnYmEoMCwgMCwgMCwgMC4wNSksIDAgMTAwcHggODBweCByZ2JhKDAsIDAsIDAsIDAuMDcpJyxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBMZXNzb24oeyBsZXNzb24sIHBhcnNlZFJlcSwgcGFsZXR0ZSB9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHsgaW1hZ2VzIH0gPSBwYXJzZWRSZXFcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY3NzPXt7IG1hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDEzMCB9fT5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAvLyB0YWcgaW1hZ2VcbiAgICAgICAgICAgIHNyYz17bGVzc29uLmltYWdlXzI1Nl91cmx9XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAxMCxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgbWF4V2lkdGg6IDEzMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAvLyByaWdodCBjb2x1bW4gaG9sZGVyXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDM2LFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzJweFwiIGNzcz17eyBtYXJnaW5SaWdodDogMTUgfX0gLz57JyAnfVxuICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgLy8gdGl0bGVcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICBsZXNzb24udGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDQ1XG4gICAgICAgICAgICAgICAgICAgID8gbGVzc29uLnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgPyA1MlxuICAgICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgICAgOiA2MlxuICAgICAgICAgICAgICAgICAgOiA2NixcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4zLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bGVzc29uLnRpdGxlLnJlcGxhY2UoYOKAmWAsIGAnYCl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogMzYsIGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17bGVzc29uLmluc3RydWN0b3IuYXZhdGFyXzY0X3VybH1cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNzAsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDE1LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+eycgJ31cbiAgICAgICAgICAgICAge2Vtb2ppZnkobGVzc29uLmluc3RydWN0b3IuZnVsbF9uYW1lKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBkdXJhdGlvblxuICAgICAgICAgICAgICBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luUmlnaHQ6IDM2IH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luUmlnaHQ6IDEwIH19XG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIzNlwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzZcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTFBN0JDXCJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMTgsMCBDOC4wNTg4NzQ1LDAgMCw4LjA1ODg3NDUgMCwxOCBDMCwyNy45NDExMjU1IDguMDU4ODc0NSwzNiAxOCwzNiBDMjcuOTQxMTI1NSwzNiAzNiwyNy45NDExMjU1IDM2LDE4IEMzNiwxMy4yMjYxMDMyIDM0LjEwMzU3NjksOC42NDc3MzI3NSAzMC43Mjc5MjIxLDUuMjcyMDc3OTQgQzI3LjM1MjI2NzIsMS44OTY0MjMxMyAyMi43NzM4OTY4LDAgMTgsMCBaIE0xOCwzMi40IEMxMC4wNDcwOTk2LDMyLjQgMy42LDI1Ljk1MjkwMDQgMy42LDE4IEMzLjYsMTAuMDQ3MDk5NiAxMC4wNDcwOTk2LDMuNiAxOCwzLjYgQzI1Ljk1MjkwMDQsMy42IDMyLjQsMTAuMDQ3MDk5NiAzMi40LDE4IEMzMi40LDIxLjgxOTExNzUgMzAuODgyODYxNSwyNS40ODE4MTM4IDI4LjE4MjMzNzYsMjguMTgyMzM3NiBDMjUuNDgxODEzOCwzMC44ODI4NjE1IDIxLjgxOTExNzUsMzIuNCAxOCwzMi40IFogTTIzLjU4LDE5LjEzNCBMMTkuOCwxNi45NTYgTDE5LjgsOSBDMTkuOCw4LjAwNTg4NzQ1IDE4Ljk5NDExMjUsNy4yIDE4LDcuMiBDMTcuMDA1ODg3NSw3LjIgMTYuMiw4LjAwNTg4NzQ1IDE2LjIsOSBMMTYuMiwxOC4yMTYgQzE2LjIxMDY1ODEsMTguMzQwMDIzNiAxNi4yNDEwNDAxLDE4LjQ2MTU1MTggMTYuMjksMTguNTc2IEMxNi4zMjcwNjkxLDE4LjY4Mjc5NSAxNi4zNzUzMzgsMTguNzg1MzY2NCAxNi40MzQsMTguODgyIEMxNi40ODMyNTU2LDE4Ljk4NDMxMTIgMTYuNTQzNjE4OCwxOS4wODA4OTIzIDE2LjYxNCwxOS4xNyBMMTYuOTAyLDE5LjQwNCBMMTcuMDY0LDE5LjU2NiBMMjEuNzQ0LDIyLjI2NiBDMjIuMDE4MzI1MiwyMi40MjE0ODQ4IDIyLjMyODY4MjUsMjIuNTAyMTc3NyAyMi42NDQsMjIuNTAwMDQ0NSBDMjMuNDYzNzA3MywyMi41MDU3MzEgMjQuMTgzNzU4MSwyMS45NTY5MDI2IDI0LjM5NTQ5ODQsMjEuMTY0OTk0MiBDMjQuNjA3MjM4NiwyMC4zNzMwODU4IDI0LjI1NzE4MjgsMTkuNTM4MTMyNiAyMy41NDQsMTkuMTM0IEwyMy41OCwxOS4xMzQgWlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKGxlc3Nvbi5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luUmlnaHQ6IDEwIH19XG4gICAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDJcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiMzhcIlxuICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA0MiAzOFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGcgZmlsbD1cIiNGRkI0MzBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zOC42NCwxNS41NCBMMzIuMzQsMTUuNTQgQzMxLjA1MiwxMi40ODggMjgsMTAuMzYgMjQuNDcyLDEwLjM2IEMxOS43NjgsMTAuMzYgMTUuOTMyLDE0LjE2OCAxNS45MzIsMTguODQ0IEMxNS45MzIsMjMuNTIgMTkuNzY4LDI3LjMyOCAyNC40NzIsMjcuMzI4IEMyOCwyNy4zMjggMzEuMDI0LDI1LjIgMzIuMzEyLDIyLjE3NiBMMzguNjQsMjIuMTc2IEM0MC40ODgsMjIuMTc2IDQyLDIwLjY5MiA0MiwxOC44NDQgQzQyLDE3LjA1MiA0MC40ODgsMTUuNTQgMzguNjQsMTUuNTQgWiBNMjQuNDcyLDIyLjE0OCBDMjIuNjUyLDIyLjE0OCAyMS4xNjgsMjAuNjkyIDIxLjE2OCwxOC44NzIgQzIxLjE2OCwxNy4wNTIgMjIuNjUyLDE1LjU5NiAyNC40NzIsMTUuNTk2IEMyNi4yOTIsMTUuNTk2IDI3Ljc3NiwxNy4wNTIgMjcuNzc2LDE4Ljg3MiBDMjcuNzc2LDIwLjY5MiAyNi4yOTIsMjIuMTQ4IDI0LjQ3MiwyMi4xNDggWlwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzcuOTEyLDMxLjE5MiBMMzIuOTg0LDI2LjY1NiBDMzIuNjIsMjYuMzIgMzIuMDg4LDI2LjM0OCAzMS43NTIsMjYuNjg0IEMyOS41OTYsMjguNzI4IDI2LjYsMjkuOTMyIDIzLjMyNCwyOS42NTIgQzE4LjAzMiwyOS4yMzIgMTMuNzc2LDI0LjkyIDEzLjQxMiwxOS42NTYgQzEyLjk2NCwxMy4zODQgMTcuOTc2LDguMTIgMjQuMjIsOC4xMiBDMjYuOTY0LDguMTIgMjkuNDU2LDkuMTI4IDMxLjM4OCwxMC44MDggQzMxLjcyNCwxMS4xMTYgMzIuMjU2LDExLjExNiAzMi41OTIsMTAuODA4IEwzNy42MDQsNi4yMTYgQzM3LjgsNi4wMiAzNy44MjgsNS43MTIgMzcuNjMyLDUuNTE2IEMzMy45NjQsMS44NzYgMjguODQsLTAuMjggMjMuMjEyLDAuMDI4IEMxNC4zNjQsMC40NzYgNy4wNTYsNy4wNTYgNS41MTYsMTUuNTQgTDMuMzYsMTUuNTQgQzEuNTEyLDE1LjU0IDAsMTcuMDUyIDAsMTguOSBDMCwyMC43NDggMS41MTIsMjIuMjYgMy4zNiwyMi4yNiBMNS41MTYsMjIuMjYgQzcuMTEyLDMxLjA4IDE0Ljg2OCwzNy44IDI0LjIyLDM3LjggQzI5LjYyNCwzNy44IDM0LjQ2OCwzNS41NiAzNy45NCwzMS45NzYgQzM4LjEzNiwzMS43NTIgMzguMTM2LDMxLjQxNiAzNy45MTIsMzEuMTkyIFpcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgICAgQ29tbXVuaXR5IFJlc291cmNlXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3IoeyBwYXJzZWRSZXEsIGluc3RydWN0b3IsIHBhbGV0dGUgfSkge1xuICBjb25zdCB7IGltYWdlcyB9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgdW5pcVRhZ3MgPSBtYXAodW5pcUJ5KGluc3RydWN0b3IubGVzc29uX3RhZ3MsICdsYWJlbCcpLCAodGFnKSA9PiB7XG4gICAgcmV0dXJuIHRhZy5pbWFnZV91cmxcbiAgfSlcbiAgY29uc3QgaGFzUHVibGlzaGVkQ291cnNlID0gaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICBjb25zdCBUZWNoTG9nb3MgPSAoeyBsaW1pdCA9IDUgfSkgPT4ge1xuICAgIGlmICghaXNFbXB0eSh1bmlxVGFncykpXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDYwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dW5pcVRhZ3Muc2xpY2UoMCwgbGltaXQpLm1hcCgodGFnKSA9PiAoXG4gICAgICAgICAgICA8aW1nIGtleT17dGFnfSBzcmM9e3RhZ30gd2lkdGg9XCI1MHB4XCIgY3NzPXt7IG1hcmdpbjogJzAgMjBweCcgfX0gLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2MjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17eyBmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KScgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbyA8c3BhbiBjc3M9e3sgY29sb3I6IHZpYnJhbnQgfX0+aW5zdHJ1Y3Rvcjwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNTgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc1NnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkoaW5zdHJ1Y3Rvci5mdWxsX25hbWUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczpcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICE9PSAwICYmXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyAhPT0gMFxuICAgICAgICAgICAgICAgICAgPyAnMWZyIDFmcidcbiAgICAgICAgICAgICAgICAgIDogJzFmcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3sgZm9udFNpemU6IDQ4IH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17eyBvcGFjaXR5OiAwLjcgfX0+XG4gICAgICAgICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyA+IDEgPyAnbGVzc29ucycgOiAnbGVzc29uJ31cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aGFzUHVibGlzaGVkQ291cnNlICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMiBjc3M9e3sgZm9udFNpemU6IDQ4IH19PntpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzfTwvaDI+XG4gICAgICAgICAgICAgICAgPGgzIGNzcz17eyBvcGFjaXR5OiAwLjcgfX0+XG4gICAgICAgICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlcyA+IDEgPyAnY291cnNlcycgOiAnY291cnNlJ31cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFRlY2hMb2dvcyAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17aW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybH1cbiAgICAgICAgICB3aWR0aD1cIjYyMHB4XCJcbiAgICAgICAgICBoZWlnaD1cIjYyMHB4XCJcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luUmlnaHQ6IDYwLCBib3JkZXJSYWRpdXM6IDIwIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBsYXlsaXN0cyh7IHBhcnNlZFJlcSwgcGxheWxpc3QsIGl0ZW1zVG9NYXAsIHBhbGV0dGUsIGxlc3NvbnNUb3RhbCB9KSB7XG4gIGNvbnN0IHsgaW1hZ2VzLCB0aGVtZSB9ID0gcGFyc2VkUmVxXG5cbiAgbGV0IGJhY2tncm91bmQgPSAnd2hpdGUnXG4gIGxldCBmb3JlZ3JvdW5kID0gJ2JsYWNrJ1xuXG4gIGlmICh0aGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgYmFja2dyb3VuZCA9ICdibGFjaydcbiAgICBmb3JlZ3JvdW5kID0gJ3doaXRlJ1xuICB9XG5cbiAgY29uc3QgaGFzQXJ0d29yayA9IGhhc0FydHdvcmtJbWFnZShwbGF5bGlzdC5zcXVhcmVfY292ZXJfNDgwX3VybClcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIHtoYXNBcnR3b3JrID8gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkIHJnYigke3BhbGV0dGUuVmlicmFudC5yZ2IudG9TdHJpbmcoKX0pYCxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcwIDMlJyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmQsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMzglJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e3BsYXlsaXN0LnNxdWFyZV9jb3Zlcl80ODBfdXJsfVxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6ICc1MDBweCcsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzkwcHggMCA5MHB4IDMlJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNjA1NjQzMjAyL29nLWltYWdlcy9lZ2doZWFkLWxvZ28uc3ZnXCJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICcyNTBweCcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnNjJweCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnMjBweCcsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDYwXG4gICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gODBcbiAgICAgICAgICAgICAgICAgICAgICA/ICc0MHB4J1xuICAgICAgICAgICAgICAgICAgICAgIDogJzQ0cHgnXG4gICAgICAgICAgICAgICAgICAgIDogJzU0cHgnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBmb3JlZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMzBweCcsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzMwcHgnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuYXZhdGFyX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5pbmNsdWRlcygnZ3JhdmF0YXInKVxuICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICAgICAgICAgICAgICAgICAgOiBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiAnNTAlJywgd2lkdGg6ICc2NHB4JywgaGVpZ2h0OiAnNjRweCcgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuZnVsbF9uYW1lICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJzE2cHgnLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogZm9yZWdyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuZnVsbF9uYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICczMHB4JyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2xlc3NvbnNUb3RhbH0gdmlkZW8gbGVzc29uc1xuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiA0NjAsXG4gICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigxNWRlZyknLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnLTExMHB4IDAgMCAtNjBweCcsXG4gICAgICAgICAgICAgICAgem9vbTogMS40NSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtpdGVtc1RvTWFwLm1hcCgobGVzc29uKSA9PiAoXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e2xlc3Nvbi50aHVtYl9uYWlsfSB3aWR0aD1cIjQ2MFwiIGtleT17bGVzc29uLmlkfSAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjk1XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCI5NVwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCA5NSA5NVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgICBjeD1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgICAgY3k9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICAgIHI9XCI0Ni4zMlwiXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPVwiIzA1MTcyMVwiXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiMyNTI1MjZcIlxuICAgICAgICAgICAgICAgICAgICBmaWxsUnVsZT1cIm5vbnplcm9cIlxuICAgICAgICAgICAgICAgICAgICBkPVwiTTQwLjA0MDAwMTUsNjAuMzYxMzU2IEM0MC4wNDAwMDE1LDYxLjc2NDM2MyA0MC45ODA4MTc4LDYyLjI5MjU1NjkgNDIuMTU1OTIxNSw2MS41MzE2OTA0IEw1OS4xODExMTUzLDUwLjUwODA2ODIgQzYwLjM0OTcwNTcsNDkuNzUxNDE5MSA2MC4zNTYyMTksNDguNTI4ODY1NyA1OS4xODExMTUzLDQ3Ljc2Nzk5OTIgTDQyLjE1NTkyMTUsMzYuNzQ0Mzc3MSBDNDAuOTg3MzMxMiwzNS45ODc3MjggNDAuMDQwMDAxNSwzNi41MjIxMTM2IDQwLjA0MDAwMTUsMzcuOTE0NzExNCBMNDAuMDQwMDAxNSw2MC4zNjEzNTYgWlwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgLy8gYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDc1LFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgICAgY3NzPXt7IGZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgZWdnaGVhZC5pb1xuICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxoMVxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgICAgICAvLyBmb25TaXplOiA1OCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDMwXG4gICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDU1XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDQ4XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYwLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7ZW1vamlmeShwbGF5bGlzdC50aXRsZSl9XG4gICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogJzAgYXV0bycsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgQ29sbGVjdGlvbiBieXsnICd9XG4gICAgICAgICAgICAgIDxzcGFuIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwucmVwbGFjZSgnLy8nLCAnaHR0cHM6Ly8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7IGJvcmRlclJhZGl1czogJzUwJScsIG1hcmdpbjogJzAgMTZweCcgfX1cbiAgICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NlwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIDxoM1xuICAgICAgICAgICAgICBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAnMXJlbScgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lml0ZW1zLmxlbmd0aH0gdmlkZW8gbGVzc29ucyx7JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUocGxheWxpc3QuZHVyYXRpb24pfVxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3N0b3JlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxTdG9yZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BvZGNhc3QnOlxuICAgICAgY29uc3QgcG9kY2FzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcG9kY2FzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBjb25zdCBwYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKHBvZGNhc3QuaW1hZ2VfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UG9kY2FzdCBwb2RjYXN0PXtwb2RjYXN0fSBwYWxldHRlPXtwYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2luc3RydWN0b3InOlxuICAgICAgY29uc3QgaW5zdHJ1Y3RvciA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvaW5zdHJ1Y3RvcnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBjb25zdCBhdmF0YXJQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKGluc3RydWN0b3IuYXZhdGFyXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxJbnN0cnVjdG9yXG4gICAgICAgICAgaW5zdHJ1Y3Rvcj17aW5zdHJ1Y3Rvcn1cbiAgICAgICAgICBwYWxldHRlPXthdmF0YXJQYWxldHRlfVxuICAgICAgICAgIHBhcnNlZFJlcT17cGFyc2VkUmVxfVxuICAgICAgICAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncGxheWxpc3RzJzpcbiAgICAgIGNvbnN0IHBsYXlsaXN0ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9wbGF5bGlzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG5cbiAgICAgIGxldCBpdGVtc1RvTWFwID0gW11cblxuICAgICAgY29uc3QgdXBwZXJMZXZlbExlc3NvbnMgPSBwbGF5bGlzdC5pdGVtcy5maWx0ZXIoXG4gICAgICAgICh7IHRodW1iX25haWwgfSkgPT4gISF0aHVtYl9uYWlsLFxuICAgICAgKVxuXG4gICAgICBjb25zdCBzdWJQbGF5bGlzdHMgPSBwbGF5bGlzdC5pdGVtcy5maWx0ZXIoXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdwbGF5bGlzdCcsXG4gICAgICApXG5cbiAgICAgIGlmICghaXNFbXB0eSh1cHBlckxldmVsTGVzc29ucykpIHtcbiAgICAgICAgaXRlbXNUb01hcCA9IHVwcGVyTGV2ZWxMZXNzb25zLnNsaWNlKDAsIDMpXG4gICAgICB9IGVsc2UgaWYgKCFpc0VtcHR5KHN1YlBsYXlsaXN0cykpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoc3ViUGxheWxpc3RzWzBdLml0ZW1zX3VybClcbiAgICAgICAgaXRlbXNUb01hcCA9IGRhdGEuc2xpY2UoMCwgMylcbiAgICAgIH1cblxuICAgICAgbGV0IHN1YlBsYXlsaXN0c0xlc3NvbnNBbW91bnQgPSAwXG5cbiAgICAgIGNvbnN0IHByb21pc2VzID0gc3ViUGxheWxpc3RzLm1hcCgoeyBpdGVtc191cmwgfSkgPT5cbiAgICAgICAgYXhpb3MuZ2V0KGl0ZW1zX3VybCkudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpLFxuICAgICAgKVxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgc3ViUGxheWxpc3RzTGVzc29uc0Ftb3VudCA9IHJlc3VsdHNcbiAgICAgICAgLm1hcCgocikgPT4gci5maWx0ZXIoKHsgdHlwZSB9KSA9PiB0eXBlID09PSAnbGVzc29uJykubGVuZ3RoKVxuICAgICAgICAucmVkdWNlKChhY2MsIGN1cikgPT4gYWNjICsgY3VyLCAwKVxuXG4gICAgICBjb25zdCBsZXNzb25zVG90YWwgPSB1cHBlckxldmVsTGVzc29ucy5sZW5ndGggKyBzdWJQbGF5bGlzdHNMZXNzb25zQW1vdW50XG5cbiAgICAgIGNvbnN0IHBsYXlsaXN0UGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwbGF5bGlzdC5zcXVhcmVfY292ZXJfNDgwX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcblxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQbGF5bGlzdHNcbiAgICAgICAgICBwbGF5bGlzdD17cGxheWxpc3R9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgICAgaXRlbXNUb01hcD17aXRlbXNUb01hcH1cbiAgICAgICAgICBwYWxldHRlPXtwbGF5bGlzdFBhbGV0dGV9XG4gICAgICAgICAgbGVzc29uc1RvdGFsPXtsZXNzb25zVG90YWx9XG4gICAgICAgIC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gLFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdsZXNzb24nOlxuICAgICAgY29uc3QgbGVzc29uID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9sZXNzb25zLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8TGVzc29uIGxlc3Nvbj17bGVzc29ufSBwYWxldHRlPXt0YWdQYWxldHRlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgfVxuICAvLyBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"))
  }, (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref4
  }, "How to egghead")), (0, _core.jsx)("div", {
    css: _ref5
  }, (0, _core.jsx)("span", {
    css: _ref6
  }, emojify(text)))));
}

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;"
} : {
  name: "d6pe5x-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;"
} : {
  name: "2blkcz-Store",
  styles: "margin-left:20px;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 = process.env.NODE_ENV === "production" ? {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;"
} : {
  name: "176c820-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Store(_ref7) {
  var parsedReq = _ref7.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: '628px 628px',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: '50% 50%'
    }, ";label:Store;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref8
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref9
  }, "Store")), (0, _core.jsx)("h1", {
    css: _ref10
  }, text)));
}

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "1oj0jbd-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;;label:Podcast;"
} : {
  name: "1oj0jbd-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "rkg0cy-Podcast",
  styles: "display:flex;align-items:center;;label:Podcast;"
} : {
  name: "rkg0cy-Podcast",
  styles: "display:flex;align-items:center;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "kdollr-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Podcast;"
} : {
  name: "kdollr-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 = process.env.NODE_ENV === "production" ? {
  name: "1tdfbhq-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Podcast;"
} : {
  name: "1tdfbhq-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Podcast(_ref11) {
  var parsedReq = _ref11.parsedReq,
      podcast = _ref11.podcast,
      palette = _ref11.palette;
  var images = parsedReq.images;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("div", {
    css: _ref13
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref14
  }, "egghead.io", (0, _core.jsx)("span", {
    css: /*#__PURE__*/(0, _css2["default"])({
      color: vibrant
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, "/podcasts"))), (0, _core.jsx)("h1", {
    css: _ref15
  }, emojify(podcast.title))), (0, _core.jsx)("img", {
    src: podcast.image_url,
    width: "648px",
    heigh: "648px",
    css: /*#__PURE__*/(0, _css2["default"])({
      clipPath: 'circle(220px at center)',
      zoom: 1.1,
      position: 'absolute',
      right: -20,
      top: -30,
      zIndex: 5,
      boxShadow: '0 2.8px 2.2px rgba(0, 0, 0, 0.02), 0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035), 0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05), 0 100px 80px rgba(0, 0, 0, 0.07)'
    }, ";label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  })));
}

var _ref17 = process.env.NODE_ENV === "production" ? {
  name: "16920ml-Lesson",
  styles: "margin-right:50px;width:100%;max-width:130px;;label:Lesson;"
} : {
  name: "16920ml-Lesson",
  styles: "margin-right:50px;width:100%;max-width:130px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 = process.env.NODE_ENV === "production" ? {
  name: "2bh3tq-Lesson",
  styles: "border-radius:10px;width:100%;max-width:130px;;label:Lesson;"
} : {
  name: "2bh3tq-Lesson",
  styles: "border-radius:10px;width:100%;max-width:130px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref19 = process.env.NODE_ENV === "production" ? {
  name: "2d57xe-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;;label:Lesson;"
} : {
  name: "2d57xe-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref20 = process.env.NODE_ENV === "production" ? {
  name: "19xj1ib-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;;label:Lesson;"
} : {
  name: "19xj1ib-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref21 = process.env.NODE_ENV === "production" ? {
  name: "1f3auih-Lesson",
  styles: "margin-right:15px;;label:Lesson;"
} : {
  name: "1f3auih-Lesson",
  styles: "margin-right:15px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref22 = process.env.NODE_ENV === "production" ? {
  name: "1t1wn5v-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:32px;flex-wrap:wrap;div{padding:15px 0;};label:Lesson;"
} : {
  name: "1t1wn5v-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:32px;flex-wrap:wrap;div{padding:15px 0;};label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref23 = process.env.NODE_ENV === "production" ? {
  name: "1ihhs-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;;label:Lesson;"
} : {
  name: "1ihhs-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref24 = process.env.NODE_ENV === "production" ? {
  name: "lducn0-Lesson",
  styles: "border-radius:50%;width:70px;height:70px;margin-right:15px;;label:Lesson;"
} : {
  name: "lducn0-Lesson",
  styles: "border-radius:50%;width:70px;height:70px;margin-right:15px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref25 = process.env.NODE_ENV === "production" ? {
  name: "1rcwwwe-Lesson",
  styles: "display:flex;align-items:center;margin-right:36px;;label:Lesson;"
} : {
  name: "1rcwwwe-Lesson",
  styles: "display:flex;align-items:center;margin-right:36px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref26 = process.env.NODE_ENV === "production" ? {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;"
} : {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref27 = process.env.NODE_ENV === "production" ? {
  name: "1lz36d0-Lesson",
  styles: "display:flex;align-items:center;;label:Lesson;"
} : {
  name: "1lz36d0-Lesson",
  styles: "display:flex;align-items:center;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref28 = process.env.NODE_ENV === "production" ? {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;"
} : {
  name: "d3a4la-Lesson",
  styles: "margin-right:10px;;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Lesson(_ref16) {
  var lesson = _ref16.lesson,
      parsedReq = _ref16.parsedReq,
      palette = _ref16.palette;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  var darkVibrant = "rgba(".concat(palette.DarkVibrant._rgb.toString(), ", 1)");
  var images = parsedReq.images;
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      padding: 50,
      display: 'flex',
      alignItems: 'center',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref17
  }, (0, _core.jsx)("img", {
    // tag image
    src: lesson.image_256_url,
    css: _ref18
  })), (0, _core.jsx)("div", {
    // right column holder
    css: _ref19
  }, (0, _core.jsx)("div", {
    css: _ref20
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "72px",
    css: _ref21
  }), ' ', "egghead.io"), (0, _core.jsx)("h1", {
    // title
    css: /*#__PURE__*/(0, _css2["default"])({
      fontSize: lesson.title.length > 30 ? lesson.title.length > 45 ? lesson.title.length > 55 ? 52 : 56 : 62 : 66,
      lineHeight: 1.3,
      padding: 0,
      marginBottom: 30
    }, ";label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, lesson.title.replace("\u2019", "'")), (0, _core.jsx)("div", {
    // byline holder
    css: _ref22
  }, (0, _core.jsx)("div", {
    // instructor
    css: _ref23
  }, (0, _core.jsx)("img", {
    src: lesson.instructor.avatar_64_url,
    css: _ref24
  }), ' ', emojify(lesson.instructor.full_name)), (0, _core.jsx)("div", {
    // duration
    css: _ref25
  }, (0, _core.jsx)("svg", {
    css: _ref26,
    xmlns: "http://www.w3.org/2000/svg",
    width: "36",
    height: "36",
    viewBox: "0 0 36 36"
  }, (0, _core.jsx)("path", {
    fill: "#A1A7BC",
    d: "M18,0 C8.0588745,0 0,8.0588745 0,18 C0,27.9411255 8.0588745,36 18,36 C27.9411255,36 36,27.9411255 36,18 C36,13.2261032 34.1035769,8.64773275 30.7279221,5.27207794 C27.3522672,1.89642313 22.7738968,0 18,0 Z M18,32.4 C10.0470996,32.4 3.6,25.9529004 3.6,18 C3.6,10.0470996 10.0470996,3.6 18,3.6 C25.9529004,3.6 32.4,10.0470996 32.4,18 C32.4,21.8191175 30.8828615,25.4818138 28.1823376,28.1823376 C25.4818138,30.8828615 21.8191175,32.4 18,32.4 Z M23.58,19.134 L19.8,16.956 L19.8,9 C19.8,8.00588745 18.9941125,7.2 18,7.2 C17.0058875,7.2 16.2,8.00588745 16.2,9 L16.2,18.216 C16.2106581,18.3400236 16.2410401,18.4615518 16.29,18.576 C16.3270691,18.682795 16.375338,18.7853664 16.434,18.882 C16.4832556,18.9843112 16.5436188,19.0808923 16.614,19.17 L16.902,19.404 L17.064,19.566 L21.744,22.266 C22.0183252,22.4214848 22.3286825,22.5021777 22.644,22.5000445 C23.4637073,22.505731 24.1837581,21.9569026 24.3954984,21.1649942 C24.6072386,20.3730858 24.2571828,19.5381326 23.544,19.134 L23.58,19.134 Z"
  })), ' ', (0, _convertTime["default"])(lesson.duration)), lesson.free_forever && (0, _core.jsx)("div", {
    // community resource
    css: _ref27
  }, (0, _core.jsx)("svg", {
    css: _ref28,
    xmlns: "http://www.w3.org/2000/svg",
    width: "42",
    height: "38",
    viewBox: "0 0 42 38"
  }, (0, _core.jsx)("g", {
    fill: "#FFB430"
  }, (0, _core.jsx)("path", {
    d: "M38.64,15.54 L32.34,15.54 C31.052,12.488 28,10.36 24.472,10.36 C19.768,10.36 15.932,14.168 15.932,18.844 C15.932,23.52 19.768,27.328 24.472,27.328 C28,27.328 31.024,25.2 32.312,22.176 L38.64,22.176 C40.488,22.176 42,20.692 42,18.844 C42,17.052 40.488,15.54 38.64,15.54 Z M24.472,22.148 C22.652,22.148 21.168,20.692 21.168,18.872 C21.168,17.052 22.652,15.596 24.472,15.596 C26.292,15.596 27.776,17.052 27.776,18.872 C27.776,20.692 26.292,22.148 24.472,22.148 Z"
  }), (0, _core.jsx)("path", {
    d: "M37.912,31.192 L32.984,26.656 C32.62,26.32 32.088,26.348 31.752,26.684 C29.596,28.728 26.6,29.932 23.324,29.652 C18.032,29.232 13.776,24.92 13.412,19.656 C12.964,13.384 17.976,8.12 24.22,8.12 C26.964,8.12 29.456,9.128 31.388,10.808 C31.724,11.116 32.256,11.116 32.592,10.808 L37.604,6.216 C37.8,6.02 37.828,5.712 37.632,5.516 C33.964,1.876 28.84,-0.28 23.212,0.028 C14.364,0.476 7.056,7.056 5.516,15.54 L3.36,15.54 C1.512,15.54 0,17.052 0,18.9 C0,20.748 1.512,22.26 3.36,22.26 L5.516,22.26 C7.112,31.08 14.868,37.8 24.22,37.8 C29.624,37.8 34.468,35.56 37.94,31.976 C38.136,31.752 38.136,31.416 37.912,31.192 Z"
  }))), ' ', "Community Resource")))));
}

var _ref31 = process.env.NODE_ENV === "production" ? {
  name: "jps4qh-TechLogos",
  styles: "display:flex;align-items:center;justify-content:center;padding-top:60px;;label:TechLogos;"
} : {
  name: "jps4qh-TechLogos",
  styles: "display:flex;align-items:center;justify-content:center;padding-top:60px;;label:TechLogos;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref32 = process.env.NODE_ENV === "production" ? {
  name: "1bbfb71-TechLogos",
  styles: "margin:0 20px;;label:TechLogos;"
} : {
  name: "1bbfb71-TechLogos",
  styles: "margin:0 20px;;label:TechLogos;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref33 = process.env.NODE_ENV === "production" ? {
  name: "ffkmae-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;padding:50px;width:100%;max-width:620px;;label:Instructor;"
} : {
  name: "ffkmae-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;padding:50px;width:100%;max-width:620px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref34 = process.env.NODE_ENV === "production" ? {
  name: "1m568lv-Instructor",
  styles: "display:flex;align-items:center;;label:Instructor;"
} : {
  name: "1m568lv-Instructor",
  styles: "display:flex;align-items:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref35 = process.env.NODE_ENV === "production" ? {
  name: "18ygg57-Instructor",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Instructor;"
} : {
  name: "18ygg57-Instructor",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref36 = process.env.NODE_ENV === "production" ? {
  name: "7nw3ed-Instructor",
  styles: "font-weight:700;font-size:58px;padding:56px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Instructor;"
} : {
  name: "7nw3ed-Instructor",
  styles: "font-weight:700;font-size:58px;padding:56px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref37 = process.env.NODE_ENV === "production" ? {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;"
} : {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref38 = process.env.NODE_ENV === "production" ? {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;"
} : {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref39 = process.env.NODE_ENV === "production" ? {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;"
} : {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref40 = process.env.NODE_ENV === "production" ? {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;"
} : {
  name: "10z0ugn-Instructor",
  styles: "display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref41 = process.env.NODE_ENV === "production" ? {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;"
} : {
  name: "w9p8tl-Instructor",
  styles: "font-size:48px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref42 = process.env.NODE_ENV === "production" ? {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;"
} : {
  name: "15j1vd4-Instructor",
  styles: "opacity:0.7;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref43 = process.env.NODE_ENV === "production" ? {
  name: "axzzs2-Instructor",
  styles: "margin-right:60px;border-radius:20px;;label:Instructor;"
} : {
  name: "axzzs2-Instructor",
  styles: "margin-right:60px;border-radius:20px;;label:Instructor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Instructor(_ref29) {
  var parsedReq = _ref29.parsedReq,
      instructor = _ref29.instructor,
      palette = _ref29.palette;
  var images = parsedReq.images;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  var uniqTags = (0, _lodash.map)((0, _lodash.uniqBy)(instructor.lesson_tags, 'label'), function (tag) {
    return tag.image_url;
  });
  var hasPublishedCourse = instructor.published_courses !== 0;

  var TechLogos = function TechLogos(_ref30) {
    var _ref30$limit = _ref30.limit,
        limit = _ref30$limit === void 0 ? 5 : _ref30$limit;
    if (!(0, _lodash.isEmpty)(uniqTags)) return (0, _core.jsx)("div", {
      css: _ref31
    }, uniqTags.slice(0, limit).map(function (tag) {
      return (0, _core.jsx)("img", {
        key: tag,
        src: tag,
        width: "50px",
        css: _ref32
      });
    }));else return null;
  };

  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref33
  }, (0, _core.jsx)("div", {
    css: _ref34
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref35
  }, "egghead.io ", (0, _core.jsx)("span", {
    css: /*#__PURE__*/(0, _css2["default"])({
      color: vibrant
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, "instructor"))), (0, _core.jsx)("h1", {
    css: _ref36
  }, emojify(instructor.full_name)), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      display: 'grid',
      width: '100%',
      gridTemplateColumns: instructor.published_lessons !== 0 && instructor.published_courses !== 0 ? '1fr 1fr' : '1fr'
    }, ";label:Instructor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, instructor.published_lessons && (0, _core.jsx)("div", {
    css: _ref37
  }, (0, _core.jsx)("h2", {
    css: _ref38
  }, instructor.published_lessons), (0, _core.jsx)("h3", {
    css: _ref39
  }, instructor.published_lessons > 1 ? 'lessons' : 'lesson')), hasPublishedCourse && (0, _core.jsx)("div", {
    css: _ref40
  }, (0, _core.jsx)("h2", {
    css: _ref41
  }, instructor.published_courses), (0, _core.jsx)("h3", {
    css: _ref42
  }, instructor.published_courses > 1 ? 'courses' : 'course'))), (0, _core.jsx)(TechLogos, null)), (0, _core.jsx)("img", {
    src: instructor.avatar_256_url,
    width: "620px",
    heigh: "620px",
    css: _ref43
  })));
}

var _ref45 = process.env.NODE_ENV === "production" ? {
  name: "36nn9d-Playlists",
  styles: "display:flex;flex-shrink:0;align-items:center;justify-content:center;width:38%;;label:Playlists;"
} : {
  name: "36nn9d-Playlists",
  styles: "display:flex;flex-shrink:0;align-items:center;justify-content:center;width:38%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref46 = process.env.NODE_ENV === "production" ? {
  name: "1liqdsu-Playlists",
  styles: "display:block;width:100%;max-width:500px;;label:Playlists;"
} : {
  name: "1liqdsu-Playlists",
  styles: "display:block;width:100%;max-width:500px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref47 = process.env.NODE_ENV === "production" ? {
  name: "of3uq5-Playlists",
  styles: "flex-grow:1;padding:90px 0 90px 3%;;label:Playlists;"
} : {
  name: "of3uq5-Playlists",
  styles: "flex-grow:1;padding:90px 0 90px 3%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref48 = process.env.NODE_ENV === "production" ? {
  name: "kjfovw-Playlists",
  styles: "width:250px;height:62px;margin-bottom:20px;;label:Playlists;"
} : {
  name: "kjfovw-Playlists",
  styles: "width:250px;height:62px;margin-bottom:20px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref49 = process.env.NODE_ENV === "production" ? {
  name: "rj7oxi-Playlists",
  styles: "font-size:30px;display:flex;align-items:center;margin-top:30px;;label:Playlists;"
} : {
  name: "rj7oxi-Playlists",
  styles: "font-size:30px;display:flex;align-items:center;margin-top:30px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref50 = process.env.NODE_ENV === "production" ? {
  name: "1oduul4-Playlists",
  styles: "border-radius:50%;width:64px;height:64px;;label:Playlists;"
} : {
  name: "1oduul4-Playlists",
  styles: "border-radius:50%;width:64px;height:64px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref51 = process.env.NODE_ENV === "production" ? {
  name: "14ir6o4-Playlists",
  styles: "display:flex;align-items:center;margin-left:30px;;label:Playlists;"
} : {
  name: "14ir6o4-Playlists",
  styles: "display:flex;align-items:center;margin-left:30px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref52 = process.env.NODE_ENV === "production" ? {
  name: "kccywv-Playlists",
  styles: "align-items:center;display:flex;justify-content:space-between;width:100%;height:100%;;label:Playlists;"
} : {
  name: "kccywv-Playlists",
  styles: "align-items:center;display:flex;justify-content:space-between;width:100%;height:100%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref53 = process.env.NODE_ENV === "production" ? {
  name: "oci22x-Playlists",
  styles: "width:100%;max-width:460px;height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;overflow:hidden;background-color:black;;label:Playlists;"
} : {
  name: "oci22x-Playlists",
  styles: "width:100%;max-width:460px;height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;overflow:hidden;background-color:black;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref54 = process.env.NODE_ENV === "production" ? {
  name: "fxsjk7-Playlists",
  styles: "transform:rotateZ(15deg);display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;margin:-110px 0 0 -60px;zoom:1.45;opacity:0.9;;label:Playlists;"
} : {
  name: "fxsjk7-Playlists",
  styles: "transform:rotateZ(15deg);display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative;margin:-110px 0 0 -60px;zoom:1.45;opacity:0.9;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref55 = process.env.NODE_ENV === "production" ? {
  name: "10kc6ht-Playlists",
  styles: "position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;;label:Playlists;"
} : {
  name: "10kc6ht-Playlists",
  styles: "position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlzQmMiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyVG9TdGF0aWNNYXJrdXAgfSBmcm9tICdyZWFjdC1kb20vc2VydmVyJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQgeyBpc0VtcHR5LCBtYXAsIHVuaXFCeSB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGNvbnZlcnRUaW1lIGZyb20gJy4vY29udmVydFRpbWUnXG5pbXBvcnQgdHdlbW9qaSBmcm9tICd0d2Vtb2ppJ1xuXG5jb25zdCB0d09wdGlvbnMgPSB7IGZvbGRlcjogJ3N2ZycsIGV4dDogJy5zdmcnIH1cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5jb25zdCBoYXNBcnR3b3JrSW1hZ2UgPSAodXJsKSA9PiB7XG4gIHJldHVybiAhdXJsLm1hdGNoKC9cXC90YWdzXFwvLylcbn1cbi8vIGNvbnN0IGVnZ2hlYWRMb2dvU3JjID0gcmVhZEZpbGVTeW5jKGAke19fZGlybmFtZX0vZWdnaGVhZC1sb2dvLnN2Z2ApLnRvU3RyaW5nKFxuLy8gICAnYmFzZTY0Jyxcbi8vIClcbi8vIGNvbnN0IGVnZ2hlYWRMb2dvID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGVnZ2hlYWRMb2dvU3JjXG5cbmNvbnN0IHJnbHIgPSByZWFkRmlsZVN5bmMoXG4gIGAke19fZGlybmFtZX0vLi4vLi4vX2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZjJgLFxuKS50b1N0cmluZygnYmFzZTY0JylcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInO1xuICAgIGZvbnQtc3R5bGU6ICBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBzcmM6IHVybChkYXRhOmZvbnQvd29mZjI7Y2hhcnNldD11dGYtODtiYXNlNjQsJHtyZ2xyfSkgZm9ybWF0KCd3b2ZmMicpO1xufVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHN5c3RlbS11aSwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250O1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7IHJlc291cmNlLCBwYXJzZWRSZXEgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoeyBwYXJzZWRSZXEgfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7IG1hcmdpbkxlZnQ6IDIwIH19PkhvdyB0byBlZ2doZWFkPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHdpZHRoOiAnMTAwJScsIG1heFdpZHRoOiA2NjAgfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNSxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzEycHggMCcsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHRleHQpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3sgbWFyZ2luTGVmdDogMjAgfX0+U3RvcmU8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7IHBhcnNlZFJlcSwgcG9kY2FzdCwgcGFsZXR0ZSB9KSB7XG4gIGNvbnN0IHsgaW1hZ2VzIH0gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7IGZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvPHNwYW4gY3NzPXt7IGNvbG9yOiB2aWJyYW50IH19Pi9wb2RjYXN0czwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNDYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocG9kY2FzdC50aXRsZSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHsgbGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGUgfSkge1xuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IGRhcmtWaWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLkRhcmtWaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB7IGltYWdlcyB9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17eyBtYXJnaW5SaWdodDogNTAsIHdpZHRoOiAnMTAwJScsIG1heFdpZHRoOiAxMzAgfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3sgbWFyZ2luUmlnaHQ6IDE1IH19IC8+eycgJ31cbiAgICAgICAgICAgIGVnZ2hlYWQuaW9cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIC8vIHRpdGxlXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgbGVzc29uLnRpdGxlLmxlbmd0aCA+IDMwXG4gICAgICAgICAgICAgICAgICA/IGxlc3Nvbi50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IGxlc3Nvbi50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgID8gNTJcbiAgICAgICAgICAgICAgICAgICAgICA6IDU2XG4gICAgICAgICAgICAgICAgICAgIDogNjJcbiAgICAgICAgICAgICAgICAgIDogNjYsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xlc3Nvbi50aXRsZS5yZXBsYWNlKGDigJlgLCBgJ2ApfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgLy8gYnlsaW5lIGhvbGRlclxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzMixcbiAgICAgICAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgICAgICAgZGl2OiB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzE1cHggMCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gaW5zdHJ1Y3RvclxuICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcwLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MCxcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KGxlc3Nvbi5pbnN0cnVjdG9yLmZ1bGxfbmFtZSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblJpZ2h0OiAzNiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAxMCB9fVxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiMzZcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjM2XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDM2IDM2XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ExQTdCQ1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTE4LDAgQzguMDU4ODc0NSwwIDAsOC4wNTg4NzQ1IDAsMTggQzAsMjcuOTQxMTI1NSA4LjA1ODg3NDUsMzYgMTgsMzYgQzI3Ljk0MTEyNTUsMzYgMzYsMjcuOTQxMTI1NSAzNiwxOCBDMzYsMTMuMjI2MTAzMiAzNC4xMDM1NzY5LDguNjQ3NzMyNzUgMzAuNzI3OTIyMSw1LjI3MjA3Nzk0IEMyNy4zNTIyNjcyLDEuODk2NDIzMTMgMjIuNzczODk2OCwwIDE4LDAgWiBNMTgsMzIuNCBDMTAuMDQ3MDk5NiwzMi40IDMuNiwyNS45NTI5MDA0IDMuNiwxOCBDMy42LDEwLjA0NzA5OTYgMTAuMDQ3MDk5NiwzLjYgMTgsMy42IEMyNS45NTI5MDA0LDMuNiAzMi40LDEwLjA0NzA5OTYgMzIuNCwxOCBDMzIuNCwyMS44MTkxMTc1IDMwLjg4Mjg2MTUsMjUuNDgxODEzOCAyOC4xODIzMzc2LDI4LjE4MjMzNzYgQzI1LjQ4MTgxMzgsMzAuODgyODYxNSAyMS44MTkxMTc1LDMyLjQgMTgsMzIuNCBaIE0yMy41OCwxOS4xMzQgTDE5LjgsMTYuOTU2IEwxOS44LDkgQzE5LjgsOC4wMDU4ODc0NSAxOC45OTQxMTI1LDcuMiAxOCw3LjIgQzE3LjAwNTg4NzUsNy4yIDE2LjIsOC4wMDU4ODc0NSAxNi4yLDkgTDE2LjIsMTguMjE2IEMxNi4yMTA2NTgxLDE4LjM0MDAyMzYgMTYuMjQxMDQwMSwxOC40NjE1NTE4IDE2LjI5LDE4LjU3NiBDMTYuMzI3MDY5MSwxOC42ODI3OTUgMTYuMzc1MzM4LDE4Ljc4NTM2NjQgMTYuNDM0LDE4Ljg4MiBDMTYuNDgzMjU1NiwxOC45ODQzMTEyIDE2LjU0MzYxODgsMTkuMDgwODkyMyAxNi42MTQsMTkuMTcgTDE2LjkwMiwxOS40MDQgTDE3LjA2NCwxOS41NjYgTDIxLjc0NCwyMi4yNjYgQzIyLjAxODMyNTIsMjIuNDIxNDg0OCAyMi4zMjg2ODI1LDIyLjUwMjE3NzcgMjIuNjQ0LDIyLjUwMDA0NDUgQzIzLjQ2MzcwNzMsMjIuNTA1NzMxIDI0LjE4Mzc1ODEsMjEuOTU2OTAyNiAyNC4zOTU0OTg0LDIxLjE2NDk5NDIgQzI0LjYwNzIzODYsMjAuMzczMDg1OCAyNC4yNTcxODI4LDE5LjUzODEzMjYgMjMuNTQ0LDE5LjEzNCBMMjMuNTgsMTkuMTM0IFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShsZXNzb24uZHVyYXRpb24pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bGVzc29uLmZyZWVfZm9yZXZlciAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAvLyBjb21tdW5pdHkgcmVzb3VyY2VcbiAgICAgICAgICAgICAgICBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAxMCB9fVxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjM4XCJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDIgMzhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjRkZCNDMwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzguNjQsMTUuNTQgTDMyLjM0LDE1LjU0IEMzMS4wNTIsMTIuNDg4IDI4LDEwLjM2IDI0LjQ3MiwxMC4zNiBDMTkuNzY4LDEwLjM2IDE1LjkzMiwxNC4xNjggMTUuOTMyLDE4Ljg0NCBDMTUuOTMyLDIzLjUyIDE5Ljc2OCwyNy4zMjggMjQuNDcyLDI3LjMyOCBDMjgsMjcuMzI4IDMxLjAyNCwyNS4yIDMyLjMxMiwyMi4xNzYgTDM4LjY0LDIyLjE3NiBDNDAuNDg4LDIyLjE3NiA0MiwyMC42OTIgNDIsMTguODQ0IEM0MiwxNy4wNTIgNDAuNDg4LDE1LjU0IDM4LjY0LDE1LjU0IFogTTI0LjQ3MiwyMi4xNDggQzIyLjY1MiwyMi4xNDggMjEuMTY4LDIwLjY5MiAyMS4xNjgsMTguODcyIEMyMS4xNjgsMTcuMDUyIDIyLjY1MiwxNS41OTYgMjQuNDcyLDE1LjU5NiBDMjYuMjkyLDE1LjU5NiAyNy43NzYsMTcuMDUyIDI3Ljc3NiwxOC44NzIgQzI3Ljc3NiwyMC42OTIgMjYuMjkyLDIyLjE0OCAyNC40NzIsMjIuMTQ4IFpcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM3LjkxMiwzMS4xOTIgTDMyLjk4NCwyNi42NTYgQzMyLjYyLDI2LjMyIDMyLjA4OCwyNi4zNDggMzEuNzUyLDI2LjY4NCBDMjkuNTk2LDI4LjcyOCAyNi42LDI5LjkzMiAyMy4zMjQsMjkuNjUyIEMxOC4wMzIsMjkuMjMyIDEzLjc3NiwyNC45MiAxMy40MTIsMTkuNjU2IEMxMi45NjQsMTMuMzg0IDE3Ljk3Niw4LjEyIDI0LjIyLDguMTIgQzI2Ljk2NCw4LjEyIDI5LjQ1Niw5LjEyOCAzMS4zODgsMTAuODA4IEMzMS43MjQsMTEuMTE2IDMyLjI1NiwxMS4xMTYgMzIuNTkyLDEwLjgwOCBMMzcuNjA0LDYuMjE2IEMzNy44LDYuMDIgMzcuODI4LDUuNzEyIDM3LjYzMiw1LjUxNiBDMzMuOTY0LDEuODc2IDI4Ljg0LC0wLjI4IDIzLjIxMiwwLjAyOCBDMTQuMzY0LDAuNDc2IDcuMDU2LDcuMDU2IDUuNTE2LDE1LjU0IEwzLjM2LDE1LjU0IEMxLjUxMiwxNS41NCAwLDE3LjA1MiAwLDE4LjkgQzAsMjAuNzQ4IDEuNTEyLDIyLjI2IDMuMzYsMjIuMjYgTDUuNTE2LDIyLjI2IEM3LjExMiwzMS4wOCAxNC44NjgsMzcuOCAyNC4yMiwzNy44IEMyOS42MjQsMzcuOCAzNC40NjgsMzUuNTYgMzcuOTQsMzEuOTc2IEMzOC4xMzYsMzEuNzUyIDM4LjEzNiwzMS40MTYgMzcuOTEyLDMxLjE5MiBaXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICAgIENvbW11bml0eSBSZXNvdXJjZVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yKHsgcGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlIH0pIHtcbiAgY29uc3QgeyBpbWFnZXMgfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHsgbGltaXQgPSA1IH0pID0+IHtcbiAgICBpZiAoIWlzRW1wdHkodW5pcVRhZ3MpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiA2MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3VuaXFUYWdzLnNsaWNlKDAsIGxpbWl0KS5tYXAoKHRhZykgPT4gKFxuICAgICAgICAgICAgPGltZyBrZXk9e3RhZ30gc3JjPXt0YWd9IHdpZHRoPVwiNTBweFwiIGNzcz17eyBtYXJnaW46ICcwIDIwcHgnIH19IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIGVsc2UgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjIwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMlxuICAgICAgICAgICAgICBjc3M9e3sgZm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7IGNvbG9yOiB2aWJyYW50IH19Pmluc3RydWN0b3I8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDU4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KGluc3RydWN0b3IuZnVsbF9uYW1lKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAhPT0gMCAmJlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgICAgICAgICAgICAgICAgID8gJzFmciAxZnInXG4gICAgICAgICAgICAgICAgICA6ICcxZnInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7IGZvbnRTaXplOiA0OCB9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3sgb3BhY2l0eTogMC43IH19PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgPiAxID8gJ2xlc3NvbnMnIDogJ2xlc3Nvbid9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2hhc1B1Ymxpc2hlZENvdXJzZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7IGZvbnRTaXplOiA0OCB9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3sgb3BhY2l0eTogMC43IH19PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiA2MCwgYm9yZGVyUmFkaXVzOiAyMCB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQbGF5bGlzdHMoeyBwYXJzZWRSZXEsIHBsYXlsaXN0LCBpdGVtc1RvTWFwLCBwYWxldHRlLCBsZXNzb25zVG90YWwgfSkge1xuICBjb25zdCB7IGltYWdlcywgdGhlbWUgfSA9IHBhcnNlZFJlcVxuXG4gIGxldCBiYWNrZ3JvdW5kID0gJ3doaXRlJ1xuICBsZXQgZm9yZWdyb3VuZCA9ICdibGFjaydcblxuICBpZiAodGhlbWUgPT09ICdkYXJrJykge1xuICAgIGJhY2tncm91bmQgPSAnYmxhY2snXG4gICAgZm9yZWdyb3VuZCA9ICd3aGl0ZSdcbiAgfVxuXG4gIGNvbnN0IGhhc0FydHdvcmsgPSBoYXNBcnR3b3JrSW1hZ2UocGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmwpXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICB7aGFzQXJ0d29yayA/IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCByZ2IoJHtwYWxldHRlLlZpYnJhbnQucmdiLnRvU3RyaW5nKCl9KWAsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMCAzJScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB3aWR0aDogJzM4JScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtwbGF5bGlzdC5zcXVhcmVfY292ZXJfNDgwX3VybH1cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnNTAwcHgnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc5MHB4IDAgOTBweCAzJScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTYwNTY0MzIwMi9vZy1pbWFnZXMvZWdnaGVhZC1sb2dvLnN2Z1wiXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMjUwcHgnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzYycHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzIwcHgnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA2MFxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDgwXG4gICAgICAgICAgICAgICAgICAgICAgPyAnNDBweCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICc0NHB4J1xuICAgICAgICAgICAgICAgICAgICA6ICc1NHB4JyxcbiAgICAgICAgICAgICAgICBjb2xvcjogZm9yZWdyb3VuZCxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzMwcHgnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICczMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwgJiYgKFxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwuaW5jbHVkZXMoJ2dyYXZhdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwucmVwbGFjZSgnLy8nLCAnaHR0cHM6Ly8nKVxuICAgICAgICAgICAgICAgICAgICAgIDogcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3NzPXt7IGJvcmRlclJhZGl1czogJzUwJScsIHdpZHRoOiAnNjRweCcsIGhlaWdodDogJzY0cHgnIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcxNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvcmVncm91bmQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMzBweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtsZXNzb25zVG90YWx9IHZpZGVvIGxlc3NvbnNcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogNDYwLFxuICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZVooMTVkZWcpJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogJy0xMTBweCAwIDAgLTYwcHgnLFxuICAgICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC45LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXRlbXNUb01hcC5tYXAoKGxlc3NvbikgPT4gKFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiOTVcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgOTUgOTVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICAgIGN5PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgICByPVwiNDYuMzJcIlxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiMwNTE3MjFcIlxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMjUyNTI2XCJcbiAgICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk00MC4wNDAwMDE1LDYwLjM2MTM1NiBDNDAuMDQwMDAxNSw2MS43NjQzNjMgNDAuOTgwODE3OCw2Mi4yOTI1NTY5IDQyLjE1NTkyMTUsNjEuNTMxNjkwNCBMNTkuMTgxMTE1Myw1MC41MDgwNjgyIEM2MC4zNDk3MDU3LDQ5Ljc1MTQxOTEgNjAuMzU2MjE5LDQ4LjUyODg2NTcgNTkuMTgxMTE1Myw0Ny43Njc5OTkyIEw0Mi4xNTU5MjE1LDM2Ljc0NDM3NzEgQzQwLjk4NzMzMTIsMzUuOTg3NzI4IDQwLjA0MDAwMTUsMzYuNTIyMTEzNiA0MC4wNDAwMDE1LDM3LjkxNDcxMTQgTDQwLjA0MDAwMTUsNjAuMzYxMzU2IFpcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgIC8vIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICAgIDxoMlxuICAgICAgICAgICAgICAgIGNzcz17eyBmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KScgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGVnZ2hlYWQuaW9cbiAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aDFcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc1NnB4IDAnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgICAgLy8gZm9uU2l6ZTogNTgsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDQ1XG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA1MlxuICAgICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxoM1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENvbGxlY3Rpb24gYnl7JyAnfVxuICAgICAgICAgICAgICA8c3BhbiBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fT5cbiAgICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuYXZhdGFyX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5pbmNsdWRlcygnZ3JhdmF0YXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6ICc1MCUnLCBtYXJnaW46ICcwIDE2cHgnIH19XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTZcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWV9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblRvcDogJzFyZW0nIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKHBsYXlsaXN0LmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBvZGNhc3QgcG9kY2FzdD17cG9kY2FzdH0gcGFsZXR0ZT17cGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgYXZhdGFyUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8SW5zdHJ1Y3RvclxuICAgICAgICAgIGluc3RydWN0b3I9e2luc3RydWN0b3J9XG4gICAgICAgICAgcGFsZXR0ZT17YXZhdGFyUGFsZXR0ZX1cbiAgICAgICAgICBwYXJzZWRSZXE9e3BhcnNlZFJlcX1cbiAgICAgICAgLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuXG4gICAgICBsZXQgaXRlbXNUb01hcCA9IFtdXG5cbiAgICAgIGNvbnN0IHVwcGVyTGV2ZWxMZXNzb25zID0gcGxheWxpc3QuaXRlbXMuZmlsdGVyKFxuICAgICAgICAoeyB0aHVtYl9uYWlsIH0pID0+ICEhdGh1bWJfbmFpbCxcbiAgICAgIClcblxuICAgICAgY29uc3Qgc3ViUGxheWxpc3RzID0gcGxheWxpc3QuaXRlbXMuZmlsdGVyKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS50eXBlID09PSAncGxheWxpc3QnLFxuICAgICAgKVxuXG4gICAgICBpZiAoIWlzRW1wdHkodXBwZXJMZXZlbExlc3NvbnMpKSB7XG4gICAgICAgIGl0ZW1zVG9NYXAgPSB1cHBlckxldmVsTGVzc29ucy5zbGljZSgwLCAzKVxuICAgICAgfSBlbHNlIGlmICghaXNFbXB0eShzdWJQbGF5bGlzdHMpKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KHN1YlBsYXlsaXN0c1swXS5pdGVtc191cmwpXG4gICAgICAgIGl0ZW1zVG9NYXAgPSBkYXRhLnNsaWNlKDAsIDMpXG4gICAgICB9XG5cbiAgICAgIGxldCBzdWJQbGF5bGlzdHNMZXNzb25zQW1vdW50ID0gMFxuXG4gICAgICBjb25zdCBwcm9taXNlcyA9IHN1YlBsYXlsaXN0cy5tYXAoKHsgaXRlbXNfdXJsIH0pID0+XG4gICAgICAgIGF4aW9zLmdldChpdGVtc191cmwpLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKSxcbiAgICAgIClcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgIHN1YlBsYXlsaXN0c0xlc3NvbnNBbW91bnQgPSByZXN1bHRzXG4gICAgICAgIC5tYXAoKHIpID0+IHIuZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZSA9PT0gJ2xlc3NvbicpLmxlbmd0aClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBjdXIpID0+IGFjYyArIGN1ciwgMClcblxuICAgICAgY29uc3QgbGVzc29uc1RvdGFsID0gdXBwZXJMZXZlbExlc3NvbnMubGVuZ3RoICsgc3ViUGxheWxpc3RzTGVzc29uc0Ftb3VudFxuXG4gICAgICBjb25zdCBwbGF5bGlzdFBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG5cbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UGxheWxpc3RzXG4gICAgICAgICAgcGxheWxpc3Q9e3BsYXlsaXN0fVxuICAgICAgICAgIHBhcnNlZFJlcT17cGFyc2VkUmVxfVxuICAgICAgICAgIGl0ZW1zVG9NYXA9e2l0ZW1zVG9NYXB9XG4gICAgICAgICAgcGFsZXR0ZT17cGxheWxpc3RQYWxldHRlfVxuICAgICAgICAgIGxlc3NvbnNUb3RhbD17bGVzc29uc1RvdGFsfVxuICAgICAgICAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YCxcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbGVzc29uJzpcbiAgICAgIGNvbnN0IGxlc3NvbiA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvbGVzc29ucy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHRhZ1BhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20obGVzc29uLmltYWdlXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref56 = process.env.NODE_ENV === "production" ? {
  name: "5v98uz-Playlists",
  styles: "display:flex;flex-direction:column;padding:75px;width:100%;;label:Playlists;"
} : {
  name: "5v98uz-Playlists",
  styles: "display:flex;flex-direction:column;padding:75px;width:100%;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref57 = process.env.NODE_ENV === "production" ? {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;"
} : {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref58 = process.env.NODE_ENV === "production" ? {
  name: "rhszqc-Playlists",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Playlists;"
} : {
  name: "rhszqc-Playlists",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref59 = process.env.NODE_ENV === "production" ? {
  name: "1br25ws-Playlists",
  styles: "width:100%;display:flex;align-items:center;margin:0 auto;text-align:center;;label:Playlists;"
} : {
  name: "1br25ws-Playlists",
  styles: "width:100%;display:flex;align-items:center;margin:0 auto;text-align:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZ3QmMiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyVG9TdGF0aWNNYXJrdXAgfSBmcm9tICdyZWFjdC1kb20vc2VydmVyJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQgeyBpc0VtcHR5LCBtYXAsIHVuaXFCeSB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCAqIGFzIFZpYnJhbnQgZnJvbSAnbm9kZS12aWJyYW50J1xuaW1wb3J0IGNvbnZlcnRUaW1lIGZyb20gJy4vY29udmVydFRpbWUnXG5pbXBvcnQgdHdlbW9qaSBmcm9tICd0d2Vtb2ppJ1xuXG5jb25zdCB0d09wdGlvbnMgPSB7IGZvbGRlcjogJ3N2ZycsIGV4dDogJy5zdmcnIH1cbmNvbnN0IGVtb2ppZnkgPSAodGV4dCkgPT4gdHdlbW9qaS5wYXJzZSh0ZXh0LCB0d09wdGlvbnMpXG5jb25zdCBoYXNBcnR3b3JrSW1hZ2UgPSAodXJsKSA9PiB7XG4gIHJldHVybiAhdXJsLm1hdGNoKC9cXC90YWdzXFwvLylcbn1cbi8vIGNvbnN0IGVnZ2hlYWRMb2dvU3JjID0gcmVhZEZpbGVTeW5jKGAke19fZGlybmFtZX0vZWdnaGVhZC1sb2dvLnN2Z2ApLnRvU3RyaW5nKFxuLy8gICAnYmFzZTY0Jyxcbi8vIClcbi8vIGNvbnN0IGVnZ2hlYWRMb2dvID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGVnZ2hlYWRMb2dvU3JjXG5cbmNvbnN0IHJnbHIgPSByZWFkRmlsZVN5bmMoXG4gIGAke19fZGlybmFtZX0vLi4vLi4vX2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZjJgLFxuKS50b1N0cmluZygnYmFzZTY0JylcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInO1xuICAgIGZvbnQtc3R5bGU6ICBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBzcmM6IHVybChkYXRhOmZvbnQvd29mZjI7Y2hhcnNldD11dGYtODtiYXNlNjQsJHtyZ2xyfSkgZm9ybWF0KCd3b2ZmMicpO1xufVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyNDI1Mjk7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHN5c3RlbS11aSwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250O1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7IHJlc291cmNlLCBwYXJzZWRSZXEgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoeyBwYXJzZWRSZXEgfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7IG1hcmdpbkxlZnQ6IDIwIH19PkhvdyB0byBlZ2doZWFkPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHdpZHRoOiAnMTAwJScsIG1heFdpZHRoOiA2NjAgfX0+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzI0cHggMCAwICMyNDI1MjksIC0yNHB4IDAgMCAjMjQyNTI5JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICc0NnB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNSxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzEycHggMCcsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHRleHQpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFN0b3JlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjI4cHggNjI4cHgnLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3sgbWFyZ2luTGVmdDogMjAgfX0+U3RvcmU8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzMycHggMCAwIHdoaXRlLCAtMzJweCAwIDAgd2hpdGUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDAnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUG9kY2FzdCh7IHBhcnNlZFJlcSwgcG9kY2FzdCwgcGFsZXR0ZSB9KSB7XG4gIGNvbnN0IHsgaW1hZ2VzIH0gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7IGZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvPHNwYW4gY3NzPXt7IGNvbG9yOiB2aWJyYW50IH19Pi9wb2RjYXN0czwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBmb250U2l6ZTogNDYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczMnB4IDAnLFxuICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2Vtb2ppZnkocG9kY2FzdC50aXRsZSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17cG9kY2FzdC5pbWFnZV91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2NDhweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2NDhweFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjbGlwUGF0aDogJ2NpcmNsZSgyMjBweCBhdCBjZW50ZXIpJyxcbiAgICAgICAgICAgIHpvb206IDEuMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgcmlnaHQ6IC0yMCxcbiAgICAgICAgICAgIHRvcDogLTMwLFxuICAgICAgICAgICAgekluZGV4OiA1LFxuICAgICAgICAgICAgYm94U2hhZG93OlxuICAgICAgICAgICAgICAnMCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDIpLCAwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wMjgpLCAwIDEyLjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wMzUpLCAwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA0MiksIDAgNDEuOHB4IDMzLjRweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjA3KScsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gTGVzc29uKHsgbGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGUgfSkge1xuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IGRhcmtWaWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLkRhcmtWaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB7IGltYWdlcyB9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17eyBtYXJnaW5SaWdodDogNTAsIHdpZHRoOiAnMTAwJScsIG1heFdpZHRoOiAxMzAgfX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgLy8gdGFnIGltYWdlXG4gICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbWFnZV8yNTZfdXJsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMTAsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiAxMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3sgbWFyZ2luUmlnaHQ6IDE1IH19IC8+eycgJ31cbiAgICAgICAgICAgIGVnZ2hlYWQuaW9cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIC8vIHRpdGxlXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgbGVzc29uLnRpdGxlLmxlbmd0aCA+IDMwXG4gICAgICAgICAgICAgICAgICA/IGxlc3Nvbi50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICA/IGxlc3Nvbi50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgID8gNTJcbiAgICAgICAgICAgICAgICAgICAgICA6IDU2XG4gICAgICAgICAgICAgICAgICAgIDogNjJcbiAgICAgICAgICAgICAgICAgIDogNjYsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xlc3Nvbi50aXRsZS5yZXBsYWNlKGDigJlgLCBgJ2ApfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgLy8gYnlsaW5lIGhvbGRlclxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzMixcbiAgICAgICAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgICAgICAgZGl2OiB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzE1cHggMCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gaW5zdHJ1Y3RvclxuICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luUmlnaHQ6IDM2LCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcwLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MCxcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KGxlc3Nvbi5pbnN0cnVjdG9yLmZ1bGxfbmFtZSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgLy8gZHVyYXRpb25cbiAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblJpZ2h0OiAzNiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAxMCB9fVxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiMzZcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjM2XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDM2IDM2XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiI0ExQTdCQ1wiXG4gICAgICAgICAgICAgICAgICBkPVwiTTE4LDAgQzguMDU4ODc0NSwwIDAsOC4wNTg4NzQ1IDAsMTggQzAsMjcuOTQxMTI1NSA4LjA1ODg3NDUsMzYgMTgsMzYgQzI3Ljk0MTEyNTUsMzYgMzYsMjcuOTQxMTI1NSAzNiwxOCBDMzYsMTMuMjI2MTAzMiAzNC4xMDM1NzY5LDguNjQ3NzMyNzUgMzAuNzI3OTIyMSw1LjI3MjA3Nzk0IEMyNy4zNTIyNjcyLDEuODk2NDIzMTMgMjIuNzczODk2OCwwIDE4LDAgWiBNMTgsMzIuNCBDMTAuMDQ3MDk5NiwzMi40IDMuNiwyNS45NTI5MDA0IDMuNiwxOCBDMy42LDEwLjA0NzA5OTYgMTAuMDQ3MDk5NiwzLjYgMTgsMy42IEMyNS45NTI5MDA0LDMuNiAzMi40LDEwLjA0NzA5OTYgMzIuNCwxOCBDMzIuNCwyMS44MTkxMTc1IDMwLjg4Mjg2MTUsMjUuNDgxODEzOCAyOC4xODIzMzc2LDI4LjE4MjMzNzYgQzI1LjQ4MTgxMzgsMzAuODgyODYxNSAyMS44MTkxMTc1LDMyLjQgMTgsMzIuNCBaIE0yMy41OCwxOS4xMzQgTDE5LjgsMTYuOTU2IEwxOS44LDkgQzE5LjgsOC4wMDU4ODc0NSAxOC45OTQxMTI1LDcuMiAxOCw3LjIgQzE3LjAwNTg4NzUsNy4yIDE2LjIsOC4wMDU4ODc0NSAxNi4yLDkgTDE2LjIsMTguMjE2IEMxNi4yMTA2NTgxLDE4LjM0MDAyMzYgMTYuMjQxMDQwMSwxOC40NjE1NTE4IDE2LjI5LDE4LjU3NiBDMTYuMzI3MDY5MSwxOC42ODI3OTUgMTYuMzc1MzM4LDE4Ljc4NTM2NjQgMTYuNDM0LDE4Ljg4MiBDMTYuNDgzMjU1NiwxOC45ODQzMTEyIDE2LjU0MzYxODgsMTkuMDgwODkyMyAxNi42MTQsMTkuMTcgTDE2LjkwMiwxOS40MDQgTDE3LjA2NCwxOS41NjYgTDIxLjc0NCwyMi4yNjYgQzIyLjAxODMyNTIsMjIuNDIxNDg0OCAyMi4zMjg2ODI1LDIyLjUwMjE3NzcgMjIuNjQ0LDIyLjUwMDA0NDUgQzIzLjQ2MzcwNzMsMjIuNTA1NzMxIDI0LjE4Mzc1ODEsMjEuOTU2OTAyNiAyNC4zOTU0OTg0LDIxLjE2NDk5NDIgQzI0LjYwNzIzODYsMjAuMzczMDg1OCAyNC4yNTcxODI4LDE5LjUzODEzMjYgMjMuNTQ0LDE5LjEzNCBMMjMuNTgsMTkuMTM0IFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPnsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShsZXNzb24uZHVyYXRpb24pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bGVzc29uLmZyZWVfZm9yZXZlciAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAvLyBjb21tdW5pdHkgcmVzb3VyY2VcbiAgICAgICAgICAgICAgICBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAxMCB9fVxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjM4XCJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDIgMzhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjRkZCNDMwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzguNjQsMTUuNTQgTDMyLjM0LDE1LjU0IEMzMS4wNTIsMTIuNDg4IDI4LDEwLjM2IDI0LjQ3MiwxMC4zNiBDMTkuNzY4LDEwLjM2IDE1LjkzMiwxNC4xNjggMTUuOTMyLDE4Ljg0NCBDMTUuOTMyLDIzLjUyIDE5Ljc2OCwyNy4zMjggMjQuNDcyLDI3LjMyOCBDMjgsMjcuMzI4IDMxLjAyNCwyNS4yIDMyLjMxMiwyMi4xNzYgTDM4LjY0LDIyLjE3NiBDNDAuNDg4LDIyLjE3NiA0MiwyMC42OTIgNDIsMTguODQ0IEM0MiwxNy4wNTIgNDAuNDg4LDE1LjU0IDM4LjY0LDE1LjU0IFogTTI0LjQ3MiwyMi4xNDggQzIyLjY1MiwyMi4xNDggMjEuMTY4LDIwLjY5MiAyMS4xNjgsMTguODcyIEMyMS4xNjgsMTcuMDUyIDIyLjY1MiwxNS41OTYgMjQuNDcyLDE1LjU5NiBDMjYuMjkyLDE1LjU5NiAyNy43NzYsMTcuMDUyIDI3Ljc3NiwxOC44NzIgQzI3Ljc3NiwyMC42OTIgMjYuMjkyLDIyLjE0OCAyNC40NzIsMjIuMTQ4IFpcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM3LjkxMiwzMS4xOTIgTDMyLjk4NCwyNi42NTYgQzMyLjYyLDI2LjMyIDMyLjA4OCwyNi4zNDggMzEuNzUyLDI2LjY4NCBDMjkuNTk2LDI4LjcyOCAyNi42LDI5LjkzMiAyMy4zMjQsMjkuNjUyIEMxOC4wMzIsMjkuMjMyIDEzLjc3NiwyNC45MiAxMy40MTIsMTkuNjU2IEMxMi45NjQsMTMuMzg0IDE3Ljk3Niw4LjEyIDI0LjIyLDguMTIgQzI2Ljk2NCw4LjEyIDI5LjQ1Niw5LjEyOCAzMS4zODgsMTAuODA4IEMzMS43MjQsMTEuMTE2IDMyLjI1NiwxMS4xMTYgMzIuNTkyLDEwLjgwOCBMMzcuNjA0LDYuMjE2IEMzNy44LDYuMDIgMzcuODI4LDUuNzEyIDM3LjYzMiw1LjUxNiBDMzMuOTY0LDEuODc2IDI4Ljg0LC0wLjI4IDIzLjIxMiwwLjAyOCBDMTQuMzY0LDAuNDc2IDcuMDU2LDcuMDU2IDUuNTE2LDE1LjU0IEwzLjM2LDE1LjU0IEMxLjUxMiwxNS41NCAwLDE3LjA1MiAwLDE4LjkgQzAsMjAuNzQ4IDEuNTEyLDIyLjI2IDMuMzYsMjIuMjYgTDUuNTE2LDIyLjI2IEM3LjExMiwzMS4wOCAxNC44NjgsMzcuOCAyNC4yMiwzNy44IEMyOS42MjQsMzcuOCAzNC40NjgsMzUuNTYgMzcuOTQsMzEuOTc2IEMzOC4xMzYsMzEuNzUyIDM4LjEzNiwzMS40MTYgMzcuOTEyLDMxLjE5MiBaXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICAgIENvbW11bml0eSBSZXNvdXJjZVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yKHsgcGFyc2VkUmVxLCBpbnN0cnVjdG9yLCBwYWxldHRlIH0pIHtcbiAgY29uc3QgeyBpbWFnZXMgfSA9IHBhcnNlZFJlcVxuICBjb25zdCB2aWJyYW50ID0gYHJnYmEoJHtwYWxldHRlLlZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHVuaXFUYWdzID0gbWFwKHVuaXFCeShpbnN0cnVjdG9yLmxlc3Nvbl90YWdzLCAnbGFiZWwnKSwgKHRhZykgPT4ge1xuICAgIHJldHVybiB0YWcuaW1hZ2VfdXJsXG4gIH0pXG4gIGNvbnN0IGhhc1B1Ymxpc2hlZENvdXJzZSA9IGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgY29uc3QgVGVjaExvZ29zID0gKHsgbGltaXQgPSA1IH0pID0+IHtcbiAgICBpZiAoIWlzRW1wdHkodW5pcVRhZ3MpKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiA2MCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3VuaXFUYWdzLnNsaWNlKDAsIGxpbWl0KS5tYXAoKHRhZykgPT4gKFxuICAgICAgICAgICAgPGltZyBrZXk9e3RhZ30gc3JjPXt0YWd9IHdpZHRoPVwiNTBweFwiIGNzcz17eyBtYXJnaW46ICcwIDIwcHgnIH19IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIGVsc2UgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgJHt2aWJyYW50fWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogNjIwLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMlxuICAgICAgICAgICAgICBjc3M9e3sgZm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIGVnZ2hlYWQuaW8gPHNwYW4gY3NzPXt7IGNvbG9yOiB2aWJyYW50IH19Pmluc3RydWN0b3I8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDU4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KGluc3RydWN0b3IuZnVsbF9uYW1lKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAhPT0gMCAmJlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgIT09IDBcbiAgICAgICAgICAgICAgICAgID8gJzFmciAxZnInXG4gICAgICAgICAgICAgICAgICA6ICcxZnInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29ucyAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7IGZvbnRTaXplOiA0OCB9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfbGVzc29uc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3sgb3BhY2l0eTogMC43IH19PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgPiAxID8gJ2xlc3NvbnMnIDogJ2xlc3Nvbid9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2hhc1B1Ymxpc2hlZENvdXJzZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDIgY3NzPXt7IGZvbnRTaXplOiA0OCB9fT57aW5zdHJ1Y3Rvci5wdWJsaXNoZWRfY291cnNlc308L2gyPlxuICAgICAgICAgICAgICAgIDxoMyBjc3M9e3sgb3BhY2l0eTogMC43IH19PlxuICAgICAgICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXMgPiAxID8gJ2NvdXJzZXMnIDogJ2NvdXJzZSd9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxUZWNoTG9nb3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e2luc3RydWN0b3IuYXZhdGFyXzI1Nl91cmx9XG4gICAgICAgICAgd2lkdGg9XCI2MjBweFwiXG4gICAgICAgICAgaGVpZ2g9XCI2MjBweFwiXG4gICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiA2MCwgYm9yZGVyUmFkaXVzOiAyMCB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQbGF5bGlzdHMoeyBwYXJzZWRSZXEsIHBsYXlsaXN0LCBpdGVtc1RvTWFwLCBwYWxldHRlLCBsZXNzb25zVG90YWwgfSkge1xuICBjb25zdCB7IGltYWdlcywgdGhlbWUgfSA9IHBhcnNlZFJlcVxuXG4gIGxldCBiYWNrZ3JvdW5kID0gJ3doaXRlJ1xuICBsZXQgZm9yZWdyb3VuZCA9ICdibGFjaydcblxuICBpZiAodGhlbWUgPT09ICdkYXJrJykge1xuICAgIGJhY2tncm91bmQgPSAnYmxhY2snXG4gICAgZm9yZWdyb3VuZCA9ICd3aGl0ZSdcbiAgfVxuXG4gIGNvbnN0IGhhc0FydHdvcmsgPSBoYXNBcnR3b3JrSW1hZ2UocGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmwpXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICB7aGFzQXJ0d29yayA/IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCByZ2IoJHtwYWxldHRlLlZpYnJhbnQucmdiLnRvU3RyaW5nKCl9KWAsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMCAzJScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB3aWR0aDogJzM4JScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtwbGF5bGlzdC5zcXVhcmVfY292ZXJfNDgwX3VybH1cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnNTAwcHgnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc5MHB4IDAgOTBweCAzJScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTYwNTY0MzIwMi9vZy1pbWFnZXMvZWdnaGVhZC1sb2dvLnN2Z1wiXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMjUwcHgnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzYycHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzIwcHgnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA2MFxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDgwXG4gICAgICAgICAgICAgICAgICAgICAgPyAnNDBweCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICc0NHB4J1xuICAgICAgICAgICAgICAgICAgICA6ICc1NHB4JyxcbiAgICAgICAgICAgICAgICBjb2xvcjogZm9yZWdyb3VuZCxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzMwcHgnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICczMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwgJiYgKFxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwuaW5jbHVkZXMoJ2dyYXZhdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwucmVwbGFjZSgnLy8nLCAnaHR0cHM6Ly8nKVxuICAgICAgICAgICAgICAgICAgICAgIDogcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3NzPXt7IGJvcmRlclJhZGl1czogJzUwJScsIHdpZHRoOiAnNjRweCcsIGhlaWdodDogJzY0cHgnIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcxNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvcmVncm91bmQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmZ1bGxfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMzBweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtsZXNzb25zVG90YWx9IHZpZGVvIGxlc3NvbnNcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogNDYwLFxuICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZVooMTVkZWcpJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogJy0xMTBweCAwIDAgLTYwcHgnLFxuICAgICAgICAgICAgICAgIHpvb206IDEuNDUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC45LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXRlbXNUb01hcC5tYXAoKGxlc3NvbikgPT4gKFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtsZXNzb24udGh1bWJfbmFpbH0gd2lkdGg9XCI0NjBcIiBrZXk9e2xlc3Nvbi5pZH0gLz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCI5NVwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiOTVcIlxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgOTUgOTVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgY3g9XCI0Ny4zMlwiXG4gICAgICAgICAgICAgICAgICAgIGN5PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgICByPVwiNDYuMzJcIlxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRlwiXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cIiMwNTE3MjFcIlxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMjUyNTI2XCJcbiAgICAgICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk00MC4wNDAwMDE1LDYwLjM2MTM1NiBDNDAuMDQwMDAxNSw2MS43NjQzNjMgNDAuOTgwODE3OCw2Mi4yOTI1NTY5IDQyLjE1NTkyMTUsNjEuNTMxNjkwNCBMNTkuMTgxMTE1Myw1MC41MDgwNjgyIEM2MC4zNDk3MDU3LDQ5Ljc1MTQxOTEgNjAuMzU2MjE5LDQ4LjUyODg2NTcgNTkuMTgxMTE1Myw0Ny43Njc5OTkyIEw0Mi4xNTU5MjE1LDM2Ljc0NDM3NzEgQzQwLjk4NzMzMTIsMzUuOTg3NzI4IDQwLjA0MDAwMTUsMzYuNTIyMTEzNiA0MC4wNDAwMDE1LDM3LjkxNDcxMTQgTDQwLjA0MDAwMTUsNjAuMzYxMzU2IFpcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgIC8vIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBwYWRkaW5nOiA3NSxcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICAgIDxoMlxuICAgICAgICAgICAgICAgIGNzcz17eyBmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KScgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGVnZ2hlYWQuaW9cbiAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aDFcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc1NnB4IDAnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgICAgLy8gZm9uU2l6ZTogNTgsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgICBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0LnRpdGxlLmxlbmd0aCA+IDQ1XG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA1NVxuICAgICAgICAgICAgICAgICAgICAgICAgPyA0OFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA1MlxuICAgICAgICAgICAgICAgICAgICAgIDogNTZcbiAgICAgICAgICAgICAgICAgICAgOiA2MCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2Vtb2ppZnkocGxheWxpc3QudGl0bGUpfVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxoM1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENvbGxlY3Rpb24gYnl7JyAnfVxuICAgICAgICAgICAgICA8c3BhbiBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fT5cbiAgICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuYXZhdGFyX3VybCAmJiAoXG4gICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5pbmNsdWRlcygnZ3JhdmF0YXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6ICc1MCUnLCBtYXJnaW46ICcwIDE2cHgnIH19XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTZcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWV9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIG1hcmdpblRvcDogJzFyZW0nIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5pdGVtcy5sZW5ndGh9IHZpZGVvIGxlc3NvbnMseycgJ31cbiAgICAgICAgICAgICAge2NvbnZlcnRUaW1lKHBsYXlsaXN0LmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlICdpbnN0cnVjdG9yLWd1aWRlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzdG9yZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8U3RvcmUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwb2RjYXN0JzpcbiAgICAgIGNvbnN0IHBvZGNhc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BvZGNhc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBvZGNhc3QgcG9kY2FzdD17cG9kY2FzdH0gcGFsZXR0ZT17cGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpbnN0cnVjdG9yJzpcbiAgICAgIGNvbnN0IGluc3RydWN0b3IgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2luc3RydWN0b3JzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgYXZhdGFyUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgY29uc29sZS5sb2cocGFsZXR0ZSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8SW5zdHJ1Y3RvclxuICAgICAgICAgIGluc3RydWN0b3I9e2luc3RydWN0b3J9XG4gICAgICAgICAgcGFsZXR0ZT17YXZhdGFyUGFsZXR0ZX1cbiAgICAgICAgICBwYXJzZWRSZXE9e3BhcnNlZFJlcX1cbiAgICAgICAgLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BsYXlsaXN0cyc6XG4gICAgICBjb25zdCBwbGF5bGlzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcGxheWxpc3RzLyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuXG4gICAgICBsZXQgaXRlbXNUb01hcCA9IFtdXG5cbiAgICAgIGNvbnN0IHVwcGVyTGV2ZWxMZXNzb25zID0gcGxheWxpc3QuaXRlbXMuZmlsdGVyKFxuICAgICAgICAoeyB0aHVtYl9uYWlsIH0pID0+ICEhdGh1bWJfbmFpbCxcbiAgICAgIClcblxuICAgICAgY29uc3Qgc3ViUGxheWxpc3RzID0gcGxheWxpc3QuaXRlbXMuZmlsdGVyKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS50eXBlID09PSAncGxheWxpc3QnLFxuICAgICAgKVxuXG4gICAgICBpZiAoIWlzRW1wdHkodXBwZXJMZXZlbExlc3NvbnMpKSB7XG4gICAgICAgIGl0ZW1zVG9NYXAgPSB1cHBlckxldmVsTGVzc29ucy5zbGljZSgwLCAzKVxuICAgICAgfSBlbHNlIGlmICghaXNFbXB0eShzdWJQbGF5bGlzdHMpKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KHN1YlBsYXlsaXN0c1swXS5pdGVtc191cmwpXG4gICAgICAgIGl0ZW1zVG9NYXAgPSBkYXRhLnNsaWNlKDAsIDMpXG4gICAgICB9XG5cbiAgICAgIGxldCBzdWJQbGF5bGlzdHNMZXNzb25zQW1vdW50ID0gMFxuXG4gICAgICBjb25zdCBwcm9taXNlcyA9IHN1YlBsYXlsaXN0cy5tYXAoKHsgaXRlbXNfdXJsIH0pID0+XG4gICAgICAgIGF4aW9zLmdldChpdGVtc191cmwpLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKSxcbiAgICAgIClcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgIHN1YlBsYXlsaXN0c0xlc3NvbnNBbW91bnQgPSByZXN1bHRzXG4gICAgICAgIC5tYXAoKHIpID0+IHIuZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZSA9PT0gJ2xlc3NvbicpLmxlbmd0aClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBjdXIpID0+IGFjYyArIGN1ciwgMClcblxuICAgICAgY29uc3QgbGVzc29uc1RvdGFsID0gdXBwZXJMZXZlbExlc3NvbnMubGVuZ3RoICsgc3ViUGxheWxpc3RzTGVzc29uc0Ftb3VudFxuXG4gICAgICBjb25zdCBwbGF5bGlzdFBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG5cbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8UGxheWxpc3RzXG4gICAgICAgICAgcGxheWxpc3Q9e3BsYXlsaXN0fVxuICAgICAgICAgIHBhcnNlZFJlcT17cGFyc2VkUmVxfVxuICAgICAgICAgIGl0ZW1zVG9NYXA9e2l0ZW1zVG9NYXB9XG4gICAgICAgICAgcGFsZXR0ZT17cGxheWxpc3RQYWxldHRlfVxuICAgICAgICAgIGxlc3NvbnNUb3RhbD17bGVzc29uc1RvdGFsfVxuICAgICAgICAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YCxcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbGVzc29uJzpcbiAgICAgIGNvbnN0IGxlc3NvbiA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvbGVzc29ucy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHRhZ1BhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20obGVzc29uLmltYWdlXzI1Nl91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gIH1cbiAgLy8gY29uc29sZS5sb2cobWFya3VwKVxuICByZXR1cm4gbWFya3VwXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref60 = process.env.NODE_ENV === "production" ? {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;"
} : {
  name: "be80nt-Playlists",
  styles: "display:flex;align-items:center;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXN4Qm9CIiwiZmlsZSI6Ii4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlclRvU3RhdGljTWFya3VwIH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7IGpzeCwgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xuaW1wb3J0IHsgaXNFbXB0eSwgbWFwLCB1bmlxQnkgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBWaWJyYW50IGZyb20gJ25vZGUtdmlicmFudCdcbmltcG9ydCBjb252ZXJ0VGltZSBmcm9tICcuL2NvbnZlcnRUaW1lJ1xuaW1wb3J0IHR3ZW1vamkgZnJvbSAndHdlbW9qaSdcblxuY29uc3QgdHdPcHRpb25zID0geyBmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJyB9XG5jb25zdCBlbW9qaWZ5ID0gKHRleHQpID0+IHR3ZW1vamkucGFyc2UodGV4dCwgdHdPcHRpb25zKVxuY29uc3QgaGFzQXJ0d29ya0ltYWdlID0gKHVybCkgPT4ge1xuICByZXR1cm4gIXVybC5tYXRjaCgvXFwvdGFnc1xcLy8pXG59XG4vLyBjb25zdCBlZ2doZWFkTG9nb1NyYyA9IHJlYWRGaWxlU3luYyhgJHtfX2Rpcm5hbWV9L2VnZ2hlYWQtbG9nby5zdmdgKS50b1N0cmluZyhcbi8vICAgJ2Jhc2U2NCcsXG4vLyApXG4vLyBjb25zdCBlZ2doZWFkTG9nbyA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyBlZ2doZWFkTG9nb1NyY1xuXG5jb25zdCByZ2xyID0gcmVhZEZpbGVTeW5jKFxuICBgJHtfX2Rpcm5hbWV9Ly4uLy4uL19mb250cy9JbnRlci1SZWd1bGFyLndvZmYyYCxcbikudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICBAZm9udC1mYWNlIHtcbiAgICBmb250LWZhbWlseTogJ0ludGVyJztcbiAgICBmb250LXN0eWxlOiAgbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgc3JjOiB1cmwoZGF0YTpmb250L3dvZmYyO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCR7cmdscn0pIGZvcm1hdCgnd29mZjInKTtcbn1cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udDtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17eyBtYXJnaW5MZWZ0OiAyMCB9fT5Ib3cgdG8gZWdnaGVhZDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNjYwIH19PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMyNDI1MjknLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcyNHB4IDAgMCAjMjQyNTI5LCAtMjRweCAwIDAgIzI0MjUyOScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnNDZweCcsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0KX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBTdG9yZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYyOHB4IDYyOHB4JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgNTAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7IG1hcmdpbkxlZnQ6IDIwIH19PlN0b3JlPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxoMVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBvZGNhc3QoeyBwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGUgfSkge1xuICBjb25zdCB7IGltYWdlcyB9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2NDAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17eyBmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KScgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17eyBjb2xvcjogdmlicmFudCB9fT4vcG9kY2FzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDQ2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMzJweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHBvZGNhc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7IGxlc3NvbiwgcGFyc2VkUmVxLCBwYWxldHRlIH0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgeyBpbWFnZXMgfSA9IHBhcnNlZFJlcVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjc3M9e3sgbWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTMwIH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTMwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIC8vIHJpZ2h0IGNvbHVtbiBob2xkZXJcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzYsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MnB4XCIgY3NzPXt7IG1hcmdpblJpZ2h0OiAxNSB9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZShg4oCZYCwgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgc3JjPXtsZXNzb24uaW5zdHJ1Y3Rvci5hdmF0YXJfNjRfdXJsfVxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiA3MCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogNzAsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTUsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz57JyAnfVxuICAgICAgICAgICAgICB7ZW1vamlmeShsZXNzb24uaW5zdHJ1Y3Rvci5mdWxsX25hbWUpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBtYXJnaW5SaWdodDogMzYgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogMTAgfX1cbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjM2XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzNlwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBMUE3QkNcIlxuICAgICAgICAgICAgICAgICAgZD1cIk0xOCwwIEM4LjA1ODg3NDUsMCAwLDguMDU4ODc0NSAwLDE4IEMwLDI3Ljk0MTEyNTUgOC4wNTg4NzQ1LDM2IDE4LDM2IEMyNy45NDExMjU1LDM2IDM2LDI3Ljk0MTEyNTUgMzYsMTggQzM2LDEzLjIyNjEwMzIgMzQuMTAzNTc2OSw4LjY0NzczMjc1IDMwLjcyNzkyMjEsNS4yNzIwNzc5NCBDMjcuMzUyMjY3MiwxLjg5NjQyMzEzIDIyLjc3Mzg5NjgsMCAxOCwwIFogTTE4LDMyLjQgQzEwLjA0NzA5OTYsMzIuNCAzLjYsMjUuOTUyOTAwNCAzLjYsMTggQzMuNiwxMC4wNDcwOTk2IDEwLjA0NzA5OTYsMy42IDE4LDMuNiBDMjUuOTUyOTAwNCwzLjYgMzIuNCwxMC4wNDcwOTk2IDMyLjQsMTggQzMyLjQsMjEuODE5MTE3NSAzMC44ODI4NjE1LDI1LjQ4MTgxMzggMjguMTgyMzM3NiwyOC4xODIzMzc2IEMyNS40ODE4MTM4LDMwLjg4Mjg2MTUgMjEuODE5MTE3NSwzMi40IDE4LDMyLjQgWiBNMjMuNTgsMTkuMTM0IEwxOS44LDE2Ljk1NiBMMTkuOCw5IEMxOS44LDguMDA1ODg3NDUgMTguOTk0MTEyNSw3LjIgMTgsNy4yIEMxNy4wMDU4ODc1LDcuMiAxNi4yLDguMDA1ODg3NDUgMTYuMiw5IEwxNi4yLDE4LjIxNiBDMTYuMjEwNjU4MSwxOC4zNDAwMjM2IDE2LjI0MTA0MDEsMTguNDYxNTUxOCAxNi4yOSwxOC41NzYgQzE2LjMyNzA2OTEsMTguNjgyNzk1IDE2LjM3NTMzOCwxOC43ODUzNjY0IDE2LjQzNCwxOC44ODIgQzE2LjQ4MzI1NTYsMTguOTg0MzExMiAxNi41NDM2MTg4LDE5LjA4MDg5MjMgMTYuNjE0LDE5LjE3IEwxNi45MDIsMTkuNDA0IEwxNy4wNjQsMTkuNTY2IEwyMS43NDQsMjIuMjY2IEMyMi4wMTgzMjUyLDIyLjQyMTQ4NDggMjIuMzI4NjgyNSwyMi41MDIxNzc3IDIyLjY0NCwyMi41MDAwNDQ1IEMyMy40NjM3MDczLDIyLjUwNTczMSAyNC4xODM3NTgxLDIxLjk1NjkwMjYgMjQuMzk1NDk4NCwyMS4xNjQ5OTQyIEMyNC42MDcyMzg2LDIwLjM3MzA4NTggMjQuMjU3MTgyOCwxOS41MzgxMzI2IDIzLjU0NCwxOS4xMzQgTDIzLjU4LDE5LjEzNCBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUobGVzc29uLmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2xlc3Nvbi5mcmVlX2ZvcmV2ZXIgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgLy8gY29tbXVuaXR5IHJlc291cmNlXG4gICAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogMTAgfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7IHBhcnNlZFJlcSwgaW5zdHJ1Y3RvciwgcGFsZXR0ZSB9KSB7XG4gIGNvbnN0IHsgaW1hZ2VzIH0gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB1bmlxVGFncyA9IG1hcCh1bmlxQnkoaW5zdHJ1Y3Rvci5sZXNzb25fdGFncywgJ2xhYmVsJyksICh0YWcpID0+IHtcbiAgICByZXR1cm4gdGFnLmltYWdlX3VybFxuICB9KVxuICBjb25zdCBoYXNQdWJsaXNoZWRDb3Vyc2UgPSBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gIGNvbnN0IFRlY2hMb2dvcyA9ICh7IGxpbWl0ID0gNSB9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3sgbWFyZ2luOiAnMCAyMHB4JyB9fSAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICBlbHNlIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDYyMCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7IGZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvIDxzcGFuIGNzcz17eyBjb2xvcjogdmlicmFudCB9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgIT09IDAgJiZcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gICAgICAgICAgICAgICAgICA/ICcxZnIgMWZyJ1xuICAgICAgICAgICAgICAgICAgOiAnMWZyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17eyBmb250U2l6ZTogNDggfX0+e2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7IG9wYWNpdHk6IDAuNyB9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17eyBmb250U2l6ZTogNDggfX0+e2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7IG9wYWNpdHk6IDAuNyB9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzID4gMSA/ICdjb3Vyc2VzJyA6ICdjb3Vyc2UnfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VGVjaExvZ29zIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjIwcHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjIwcHhcIlxuICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogNjAsIGJvcmRlclJhZGl1czogMjAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHsgcGFyc2VkUmVxLCBwbGF5bGlzdCwgaXRlbXNUb01hcCwgcGFsZXR0ZSwgbGVzc29uc1RvdGFsIH0pIHtcbiAgY29uc3QgeyBpbWFnZXMsIHRoZW1lIH0gPSBwYXJzZWRSZXFcblxuICBsZXQgYmFja2dyb3VuZCA9ICd3aGl0ZSdcbiAgbGV0IGZvcmVncm91bmQgPSAnYmxhY2snXG5cbiAgaWYgKHRoZW1lID09PSAnZGFyaycpIHtcbiAgICBiYWNrZ3JvdW5kID0gJ2JsYWNrJ1xuICAgIGZvcmVncm91bmQgPSAnd2hpdGUnXG4gIH1cblxuICBjb25zdCBoYXNBcnR3b3JrID0gaGFzQXJ0d29ya0ltYWdlKHBsYXlsaXN0LnNxdWFyZV9jb3Zlcl80ODBfdXJsKVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAge2hhc0FydHdvcmsgPyAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgcmdiKCR7cGFsZXR0ZS5WaWJyYW50LnJnYi50b1N0cmluZygpfSlgLFxuICAgICAgICAgICAgcGFkZGluZzogJzAgMyUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogYmFja2dyb3VuZCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICczOCUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17cGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmx9XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzUwMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnOTBweCAwIDkwcHggMyUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE2MDU2NDMyMDIvb2ctaW1hZ2VzL2VnZ2hlYWQtbG9nby5zdmdcIlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogJzI1MHB4JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICc2MnB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcyMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNjBcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA4MFxuICAgICAgICAgICAgICAgICAgICAgID8gJzQwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnNDRweCdcbiAgICAgICAgICAgICAgICAgICAgOiAnNTRweCcsXG4gICAgICAgICAgICAgICAgY29sb3I6IGZvcmVncm91bmQsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7ZW1vamlmeShwbGF5bGlzdC50aXRsZSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICczMHB4JyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnMzBweCcsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6ICc1MCUnLCB3aWR0aDogJzY0cHgnLCBoZWlnaHQ6ICc2NHB4JyB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMTZweCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmb3JlZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJzMwcHgnLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7bGVzc29uc1RvdGFsfSB2aWRlbyBsZXNzb25zXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGVaKDE1ZGVnKScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICctMTEwcHggMCAwIC02MHB4JyxcbiAgICAgICAgICAgICAgICB6b29tOiAxLjQ1LFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2l0ZW1zVG9NYXAubWFwKChsZXNzb24pID0+IChcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17bGVzc29uLnRodW1iX25haWx9IHdpZHRoPVwiNDYwXCIga2V5PXtsZXNzb24uaWR9IC8+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiOTVcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDk1IDk1XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICAgIGN4PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgICAgcj1cIjQ2LjMyXCJcbiAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiIzI1MjUyNlwiXG4gICAgICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAvLyBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgcGFkZGluZzogNzUsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgICBjc3M9e3sgZm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGgxXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNDhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgICA6IDU2XG4gICAgICAgICAgICAgICAgICAgIDogNjAsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBDb2xsZWN0aW9uIGJ5eycgJ31cbiAgICAgICAgICAgICAgPHNwYW4gY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwgJiYgKFxuICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwuaW5jbHVkZXMoJ2dyYXZhdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiAnNTAlJywgbWFyZ2luOiAnMCAxNnB4JyB9fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuZnVsbF9uYW1lfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBtYXJnaW5Ub3A6ICcxcmVtJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7cGxheWxpc3QuaXRlbXMubGVuZ3RofSB2aWRlbyBsZXNzb25zLHsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc3RvcmUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPFN0b3JlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncG9kY2FzdCc6XG4gICAgICBjb25zdCBwb2RjYXN0ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9wb2RjYXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaW5zdHJ1Y3Rvcic6XG4gICAgICBjb25zdCBpbnN0cnVjdG9yID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9pbnN0cnVjdG9ycy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwbGF5bGlzdHMnOlxuICAgICAgY29uc3QgcGxheWxpc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BsYXlsaXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcblxuICAgICAgbGV0IGl0ZW1zVG9NYXAgPSBbXVxuXG4gICAgICBjb25zdCB1cHBlckxldmVsTGVzc29ucyA9IHBsYXlsaXN0Lml0ZW1zLmZpbHRlcihcbiAgICAgICAgKHsgdGh1bWJfbmFpbCB9KSA9PiAhIXRodW1iX25haWwsXG4gICAgICApXG5cbiAgICAgIGNvbnN0IHN1YlBsYXlsaXN0cyA9IHBsYXlsaXN0Lml0ZW1zLmZpbHRlcihcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gJ3BsYXlsaXN0JyxcbiAgICAgIClcblxuICAgICAgaWYgKCFpc0VtcHR5KHVwcGVyTGV2ZWxMZXNzb25zKSkge1xuICAgICAgICBpdGVtc1RvTWFwID0gdXBwZXJMZXZlbExlc3NvbnMuc2xpY2UoMCwgMylcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW1wdHkoc3ViUGxheWxpc3RzKSkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldChzdWJQbGF5bGlzdHNbMF0uaXRlbXNfdXJsKVxuICAgICAgICBpdGVtc1RvTWFwID0gZGF0YS5zbGljZSgwLCAzKVxuICAgICAgfVxuXG4gICAgICBsZXQgc3ViUGxheWxpc3RzTGVzc29uc0Ftb3VudCA9IDBcblxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBzdWJQbGF5bGlzdHMubWFwKCh7IGl0ZW1zX3VybCB9KSA9PlxuICAgICAgICBheGlvcy5nZXQoaXRlbXNfdXJsKS50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSksXG4gICAgICApXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICBzdWJQbGF5bGlzdHNMZXNzb25zQW1vdW50ID0gcmVzdWx0c1xuICAgICAgICAubWFwKChyKSA9PiByLmZpbHRlcigoeyB0eXBlIH0pID0+IHR5cGUgPT09ICdsZXNzb24nKS5sZW5ndGgpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MgKyBjdXIsIDApXG5cbiAgICAgIGNvbnN0IGxlc3NvbnNUb3RhbCA9IHVwcGVyTGV2ZWxMZXNzb25zLmxlbmd0aCArIHN1YlBsYXlsaXN0c0xlc3NvbnNBbW91bnRcblxuICAgICAgY29uc3QgcGxheWxpc3RQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKHBsYXlsaXN0LnNxdWFyZV9jb3Zlcl80ODBfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0c1xuICAgICAgICAgIHBsYXlsaXN0PXtwbGF5bGlzdH1cbiAgICAgICAgICBwYXJzZWRSZXE9e3BhcnNlZFJlcX1cbiAgICAgICAgICBpdGVtc1RvTWFwPXtpdGVtc1RvTWFwfVxuICAgICAgICAgIHBhbGV0dGU9e3BsYXlsaXN0UGFsZXR0ZX1cbiAgICAgICAgICBsZXNzb25zVG90YWw9e2xlc3NvbnNUb3RhbH1cbiAgICAgICAgLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3Nlcmllcyc6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoXG4gICAgICAgICAgYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWAsXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBjb25zdCB0YWdQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKGxlc3Nvbi5pbWFnZV8yNTZfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxMZXNzb24gbGVzc29uPXtsZXNzb259IHBhbGV0dGU9e3RhZ1BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICB9XG4gIC8vIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref61 = process.env.NODE_ENV === "production" ? {
  name: "15nik7s-Playlists",
  styles: "border-radius:50%;margin:0 16px;;label:Playlists;"
} : {
  name: "15nik7s-Playlists",
  styles: "border-radius:50%;margin:0 16px;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTh4Qm9CIiwiZmlsZSI6Ii4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlclRvU3RhdGljTWFya3VwIH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7IGpzeCwgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xuaW1wb3J0IHsgaXNFbXB0eSwgbWFwLCB1bmlxQnkgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBWaWJyYW50IGZyb20gJ25vZGUtdmlicmFudCdcbmltcG9ydCBjb252ZXJ0VGltZSBmcm9tICcuL2NvbnZlcnRUaW1lJ1xuaW1wb3J0IHR3ZW1vamkgZnJvbSAndHdlbW9qaSdcblxuY29uc3QgdHdPcHRpb25zID0geyBmb2xkZXI6ICdzdmcnLCBleHQ6ICcuc3ZnJyB9XG5jb25zdCBlbW9qaWZ5ID0gKHRleHQpID0+IHR3ZW1vamkucGFyc2UodGV4dCwgdHdPcHRpb25zKVxuY29uc3QgaGFzQXJ0d29ya0ltYWdlID0gKHVybCkgPT4ge1xuICByZXR1cm4gIXVybC5tYXRjaCgvXFwvdGFnc1xcLy8pXG59XG4vLyBjb25zdCBlZ2doZWFkTG9nb1NyYyA9IHJlYWRGaWxlU3luYyhgJHtfX2Rpcm5hbWV9L2VnZ2hlYWQtbG9nby5zdmdgKS50b1N0cmluZyhcbi8vICAgJ2Jhc2U2NCcsXG4vLyApXG4vLyBjb25zdCBlZ2doZWFkTG9nbyA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyBlZ2doZWFkTG9nb1NyY1xuXG5jb25zdCByZ2xyID0gcmVhZEZpbGVTeW5jKFxuICBgJHtfX2Rpcm5hbWV9Ly4uLy4uL19mb250cy9JbnRlci1SZWd1bGFyLndvZmYyYCxcbikudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICBAZm9udC1mYWNlIHtcbiAgICBmb250LWZhbWlseTogJ0ludGVyJztcbiAgICBmb250LXN0eWxlOiAgbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgc3JjOiB1cmwoZGF0YTpmb250L3dvZmYyO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCR7cmdscn0pIGZvcm1hdCgnd29mZjInKTtcbn1cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udDtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3Qge1xuICAgIHRleHQsXG4gICAgdGhlbWUsXG4gICAgbWQsXG4gICAgZm9udFNpemUsXG4gICAgaW1hZ2VzLFxuICAgIGJnSW1hZ2UsXG4gICAgd2lkdGhzLFxuICAgIGhlaWdodHMsXG4gICAgcmVzb3VyY2VUeXBlLFxuICB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgcGFkZGluZzogJzUwcHggODBweCcsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7XG4gICAgICAgICAgICAhaXNFbXB0eShiZ0ltYWdlKVxuICAgICAgICAgICAgICA/IGJnSW1hZ2VcbiAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGczZ3lrMGd1L2ltYWdlL3VwbG9hZC92MTU3MTMwMDIxNy9vZy1pbWFnZS1hc3NldHMvaW5zdHJ1Y3Rvci1ndWlkZV8yeC5wbmcnXG4gICAgICAgICAgfSlgLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17eyBtYXJnaW5MZWZ0OiAyMCB9fT5Ib3cgdG8gZWdnaGVhZDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogNjYwIH19PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMyNDI1MjknLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcyNHB4IDAgMCAjMjQyNTI5LCAtMjRweCAwIDAgIzI0MjUyOScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnNDZweCcsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjUsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4IDAnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeSh0ZXh0KX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBTdG9yZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYyOHB4IDYyOHB4JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgNTAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MHB4XCIgLz5cbiAgICAgICAgICA8aDMgY3NzPXt7IG1hcmdpbkxlZnQ6IDIwIH19PlN0b3JlPC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxoMVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIFBvZGNhc3QoeyBwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGUgfSkge1xuICBjb25zdCB7IGltYWdlcyB9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiA2NDAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17eyBmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KScgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgZWdnaGVhZC5pbzxzcGFuIGNzcz17eyBjb2xvcjogdmlicmFudCB9fT4vcG9kY2FzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDQ2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMzJweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtlbW9qaWZ5KHBvZGNhc3QudGl0bGUpfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7IGxlc3NvbiwgcGFyc2VkUmVxLCBwYWxldHRlIH0pIHtcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCBkYXJrVmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5EYXJrVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgeyBpbWFnZXMgfSA9IHBhcnNlZFJlcVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYm9yZGVyVG9wOiBgMjVweCBzb2xpZCAke3ZpYnJhbnR9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjc3M9e3sgbWFyZ2luUmlnaHQ6IDUwLCB3aWR0aDogJzEwMCUnLCBtYXhXaWR0aDogMTMwIH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTMwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIC8vIHJpZ2h0IGNvbHVtbiBob2xkZXJcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzYsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI3MnB4XCIgY3NzPXt7IG1hcmdpblJpZ2h0OiAxNSB9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGUucmVwbGFjZShg4oCZYCwgYCdgKX1cbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIC8vIGJ5bGluZSBob2xkZXJcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAgICAgICAgIGRpdjoge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgc3JjPXtsZXNzb24uaW5zdHJ1Y3Rvci5hdmF0YXJfNjRfdXJsfVxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiA3MCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogNzAsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTUsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz57JyAnfVxuICAgICAgICAgICAgICB7ZW1vamlmeShsZXNzb24uaW5zdHJ1Y3Rvci5mdWxsX25hbWUpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBtYXJnaW5SaWdodDogMzYgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogMTAgfX1cbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjM2XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzNlwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBMUE3QkNcIlxuICAgICAgICAgICAgICAgICAgZD1cIk0xOCwwIEM4LjA1ODg3NDUsMCAwLDguMDU4ODc0NSAwLDE4IEMwLDI3Ljk0MTEyNTUgOC4wNTg4NzQ1LDM2IDE4LDM2IEMyNy45NDExMjU1LDM2IDM2LDI3Ljk0MTEyNTUgMzYsMTggQzM2LDEzLjIyNjEwMzIgMzQuMTAzNTc2OSw4LjY0NzczMjc1IDMwLjcyNzkyMjEsNS4yNzIwNzc5NCBDMjcuMzUyMjY3MiwxLjg5NjQyMzEzIDIyLjc3Mzg5NjgsMCAxOCwwIFogTTE4LDMyLjQgQzEwLjA0NzA5OTYsMzIuNCAzLjYsMjUuOTUyOTAwNCAzLjYsMTggQzMuNiwxMC4wNDcwOTk2IDEwLjA0NzA5OTYsMy42IDE4LDMuNiBDMjUuOTUyOTAwNCwzLjYgMzIuNCwxMC4wNDcwOTk2IDMyLjQsMTggQzMyLjQsMjEuODE5MTE3NSAzMC44ODI4NjE1LDI1LjQ4MTgxMzggMjguMTgyMzM3NiwyOC4xODIzMzc2IEMyNS40ODE4MTM4LDMwLjg4Mjg2MTUgMjEuODE5MTE3NSwzMi40IDE4LDMyLjQgWiBNMjMuNTgsMTkuMTM0IEwxOS44LDE2Ljk1NiBMMTkuOCw5IEMxOS44LDguMDA1ODg3NDUgMTguOTk0MTEyNSw3LjIgMTgsNy4yIEMxNy4wMDU4ODc1LDcuMiAxNi4yLDguMDA1ODg3NDUgMTYuMiw5IEwxNi4yLDE4LjIxNiBDMTYuMjEwNjU4MSwxOC4zNDAwMjM2IDE2LjI0MTA0MDEsMTguNDYxNTUxOCAxNi4yOSwxOC41NzYgQzE2LjMyNzA2OTEsMTguNjgyNzk1IDE2LjM3NTMzOCwxOC43ODUzNjY0IDE2LjQzNCwxOC44ODIgQzE2LjQ4MzI1NTYsMTguOTg0MzExMiAxNi41NDM2MTg4LDE5LjA4MDg5MjMgMTYuNjE0LDE5LjE3IEwxNi45MDIsMTkuNDA0IEwxNy4wNjQsMTkuNTY2IEwyMS43NDQsMjIuMjY2IEMyMi4wMTgzMjUyLDIyLjQyMTQ4NDggMjIuMzI4NjgyNSwyMi41MDIxNzc3IDIyLjY0NCwyMi41MDAwNDQ1IEMyMy40NjM3MDczLDIyLjUwNTczMSAyNC4xODM3NTgxLDIxLjk1NjkwMjYgMjQuMzk1NDk4NCwyMS4xNjQ5OTQyIEMyNC42MDcyMzg2LDIwLjM3MzA4NTggMjQuMjU3MTgyOCwxOS41MzgxMzI2IDIzLjU0NCwxOS4xMzQgTDIzLjU4LDE5LjEzNCBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUobGVzc29uLmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2xlc3Nvbi5mcmVlX2ZvcmV2ZXIgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgLy8gY29tbXVuaXR5IHJlc291cmNlXG4gICAgICAgICAgICAgICAgY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogMTAgfX1cbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MlwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOFwiXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQyIDM4XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwiI0ZGQjQzMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM4LjY0LDE1LjU0IEwzMi4zNCwxNS41NCBDMzEuMDUyLDEyLjQ4OCAyOCwxMC4zNiAyNC40NzIsMTAuMzYgQzE5Ljc2OCwxMC4zNiAxNS45MzIsMTQuMTY4IDE1LjkzMiwxOC44NDQgQzE1LjkzMiwyMy41MiAxOS43NjgsMjcuMzI4IDI0LjQ3MiwyNy4zMjggQzI4LDI3LjMyOCAzMS4wMjQsMjUuMiAzMi4zMTIsMjIuMTc2IEwzOC42NCwyMi4xNzYgQzQwLjQ4OCwyMi4xNzYgNDIsMjAuNjkyIDQyLDE4Ljg0NCBDNDIsMTcuMDUyIDQwLjQ4OCwxNS41NCAzOC42NCwxNS41NCBaIE0yNC40NzIsMjIuMTQ4IEMyMi42NTIsMjIuMTQ4IDIxLjE2OCwyMC42OTIgMjEuMTY4LDE4Ljg3MiBDMjEuMTY4LDE3LjA1MiAyMi42NTIsMTUuNTk2IDI0LjQ3MiwxNS41OTYgQzI2LjI5MiwxNS41OTYgMjcuNzc2LDE3LjA1MiAyNy43NzYsMTguODcyIEMyNy43NzYsMjAuNjkyIDI2LjI5MiwyMi4xNDggMjQuNDcyLDIyLjE0OCBaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0zNy45MTIsMzEuMTkyIEwzMi45ODQsMjYuNjU2IEMzMi42MiwyNi4zMiAzMi4wODgsMjYuMzQ4IDMxLjc1MiwyNi42ODQgQzI5LjU5NiwyOC43MjggMjYuNiwyOS45MzIgMjMuMzI0LDI5LjY1MiBDMTguMDMyLDI5LjIzMiAxMy43NzYsMjQuOTIgMTMuNDEyLDE5LjY1NiBDMTIuOTY0LDEzLjM4NCAxNy45NzYsOC4xMiAyNC4yMiw4LjEyIEMyNi45NjQsOC4xMiAyOS40NTYsOS4xMjggMzEuMzg4LDEwLjgwOCBDMzEuNzI0LDExLjExNiAzMi4yNTYsMTEuMTE2IDMyLjU5MiwxMC44MDggTDM3LjYwNCw2LjIxNiBDMzcuOCw2LjAyIDM3LjgyOCw1LjcxMiAzNy42MzIsNS41MTYgQzMzLjk2NCwxLjg3NiAyOC44NCwtMC4yOCAyMy4yMTIsMC4wMjggQzE0LjM2NCwwLjQ3NiA3LjA1Niw3LjA1NiA1LjUxNiwxNS41NCBMMy4zNiwxNS41NCBDMS41MTIsMTUuNTQgMCwxNy4wNTIgMCwxOC45IEMwLDIwLjc0OCAxLjUxMiwyMi4yNiAzLjM2LDIyLjI2IEw1LjUxNiwyMi4yNiBDNy4xMTIsMzEuMDggMTQuODY4LDM3LjggMjQuMjIsMzcuOCBDMjkuNjI0LDM3LjggMzQuNDY4LDM1LjU2IDM3Ljk0LDMxLjk3NiBDMzguMTM2LDMxLjc1MiAzOC4xMzYsMzEuNDE2IDM3LjkxMiwzMS4xOTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICAgICAgPC9zdmc+eycgJ31cbiAgICAgICAgICAgICAgICBDb21tdW5pdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvcih7IHBhcnNlZFJlcSwgaW5zdHJ1Y3RvciwgcGFsZXR0ZSB9KSB7XG4gIGNvbnN0IHsgaW1hZ2VzIH0gPSBwYXJzZWRSZXFcbiAgY29uc3QgdmlicmFudCA9IGByZ2JhKCR7cGFsZXR0ZS5WaWJyYW50Ll9yZ2IudG9TdHJpbmcoKX0sIDEpYFxuICBjb25zdCB1bmlxVGFncyA9IG1hcCh1bmlxQnkoaW5zdHJ1Y3Rvci5sZXNzb25fdGFncywgJ2xhYmVsJyksICh0YWcpID0+IHtcbiAgICByZXR1cm4gdGFnLmltYWdlX3VybFxuICB9KVxuICBjb25zdCBoYXNQdWJsaXNoZWRDb3Vyc2UgPSBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gIGNvbnN0IFRlY2hMb2dvcyA9ICh7IGxpbWl0ID0gNSB9KSA9PiB7XG4gICAgaWYgKCFpc0VtcHR5KHVuaXFUYWdzKSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogNjAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt1bmlxVGFncy5zbGljZSgwLCBsaW1pdCkubWFwKCh0YWcpID0+IChcbiAgICAgICAgICAgIDxpbWcga2V5PXt0YWd9IHNyYz17dGFnfSB3aWR0aD1cIjUwcHhcIiBjc3M9e3sgbWFyZ2luOiAnMCAyMHB4JyB9fSAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICBlbHNlIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgcGFkZGluZzogNTAsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDYyMCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNjBweFwiIC8+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7IGZvbnRTaXplOiAzNCwgbWFyZ2luTGVmdDogMTQsIGNvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBlZ2doZWFkLmlvIDxzcGFuIGNzcz17eyBjb2xvcjogdmlicmFudCB9fT5pbnN0cnVjdG9yPC9zcGFuPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiA1OCxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzU2cHggMCcsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjkpJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZW1vamlmeShpbnN0cnVjdG9yLmZ1bGxfbmFtZSl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOlxuICAgICAgICAgICAgICAgIGluc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgIT09IDAgJiZcbiAgICAgICAgICAgICAgICBpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzICE9PSAwXG4gICAgICAgICAgICAgICAgICA/ICcxZnIgMWZyJ1xuICAgICAgICAgICAgICAgICAgOiAnMWZyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnMgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17eyBmb250U2l6ZTogNDggfX0+e2luc3RydWN0b3IucHVibGlzaGVkX2xlc3NvbnN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7IG9wYWNpdHk6IDAuNyB9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9sZXNzb25zID4gMSA/ICdsZXNzb25zJyA6ICdsZXNzb24nfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYXNQdWJsaXNoZWRDb3Vyc2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgyIGNzcz17eyBmb250U2l6ZTogNDggfX0+e2luc3RydWN0b3IucHVibGlzaGVkX2NvdXJzZXN9PC9oMj5cbiAgICAgICAgICAgICAgICA8aDMgY3NzPXt7IG9wYWNpdHk6IDAuNyB9fT5cbiAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdG9yLnB1Ymxpc2hlZF9jb3Vyc2VzID4gMSA/ICdjb3Vyc2VzJyA6ICdjb3Vyc2UnfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VGVjaExvZ29zIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtpbnN0cnVjdG9yLmF2YXRhcl8yNTZfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjIwcHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjIwcHhcIlxuICAgICAgICAgIGNzcz17eyBtYXJnaW5SaWdodDogNjAsIGJvcmRlclJhZGl1czogMjAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZnVuY3Rpb24gUGxheWxpc3RzKHsgcGFyc2VkUmVxLCBwbGF5bGlzdCwgaXRlbXNUb01hcCwgcGFsZXR0ZSwgbGVzc29uc1RvdGFsIH0pIHtcbiAgY29uc3QgeyBpbWFnZXMsIHRoZW1lIH0gPSBwYXJzZWRSZXFcblxuICBsZXQgYmFja2dyb3VuZCA9ICd3aGl0ZSdcbiAgbGV0IGZvcmVncm91bmQgPSAnYmxhY2snXG5cbiAgaWYgKHRoZW1lID09PSAnZGFyaycpIHtcbiAgICBiYWNrZ3JvdW5kID0gJ2JsYWNrJ1xuICAgIGZvcmVncm91bmQgPSAnd2hpdGUnXG4gIH1cblxuICBjb25zdCBoYXNBcnR3b3JrID0gaGFzQXJ0d29ya0ltYWdlKHBsYXlsaXN0LnNxdWFyZV9jb3Zlcl80ODBfdXJsKVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAge2hhc0FydHdvcmsgPyAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclRvcDogYDI1cHggc29saWQgcmdiKCR7cGFsZXR0ZS5WaWJyYW50LnJnYi50b1N0cmluZygpfSlgLFxuICAgICAgICAgICAgcGFkZGluZzogJzAgMyUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogYmFja2dyb3VuZCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgd2lkdGg6ICczOCUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17cGxheWxpc3Quc3F1YXJlX2NvdmVyXzQ4MF91cmx9XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzUwMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnOTBweCAwIDkwcHggMyUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE2MDU2NDMyMDIvb2ctaW1hZ2VzL2VnZ2hlYWQtbG9nby5zdmdcIlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogJzI1MHB4JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICc2MnB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcyMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNjBcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA4MFxuICAgICAgICAgICAgICAgICAgICAgID8gJzQwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnNDRweCdcbiAgICAgICAgICAgICAgICAgICAgOiAnNTRweCcsXG4gICAgICAgICAgICAgICAgY29sb3I6IGZvcmVncm91bmQsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7ZW1vamlmeShwbGF5bGlzdC50aXRsZSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICczMHB4JyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnMzBweCcsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsICYmIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLmluY2x1ZGVzKCdncmF2YXRhcicpXG4gICAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC5vd25lci5hdmF0YXJfdXJsLnJlcGxhY2UoJy8vJywgJ2h0dHBzOi8vJylcbiAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6ICc1MCUnLCB3aWR0aDogJzY0cHgnLCBoZWlnaHQ6ICc2NHB4JyB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMTZweCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmb3JlZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5vd25lci5mdWxsX25hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJzMwcHgnLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7bGVzc29uc1RvdGFsfSB2aWRlbyBsZXNzb25zXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgbWF4V2lkdGg6IDQ2MCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGVaKDE1ZGVnKScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICctMTEwcHggMCAwIC02MHB4JyxcbiAgICAgICAgICAgICAgICB6b29tOiAxLjQ1LFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2l0ZW1zVG9NYXAubWFwKChsZXNzb24pID0+IChcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17bGVzc29uLnRodW1iX25haWx9IHdpZHRoPVwiNDYwXCIga2V5PXtsZXNzb24uaWR9IC8+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgIHdpZHRoPVwiOTVcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjk1XCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDk1IDk1XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICAgIGN4PVwiNDcuMzJcIlxuICAgICAgICAgICAgICAgICAgICBjeT1cIjQ3LjMyXCJcbiAgICAgICAgICAgICAgICAgICAgcj1cIjQ2LjMyXCJcbiAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgICAgICAgICAgICBzdHJva2U9XCIjMDUxNzIxXCJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiIzI1MjUyNlwiXG4gICAgICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICAgICAgICAgICAgICAgIGQ9XCJNNDAuMDQwMDAxNSw2MC4zNjEzNTYgQzQwLjA0MDAwMTUsNjEuNzY0MzYzIDQwLjk4MDgxNzgsNjIuMjkyNTU2OSA0Mi4xNTU5MjE1LDYxLjUzMTY5MDQgTDU5LjE4MTExNTMsNTAuNTA4MDY4MiBDNjAuMzQ5NzA1Nyw0OS43NTE0MTkxIDYwLjM1NjIxOSw0OC41Mjg4NjU3IDU5LjE4MTExNTMsNDcuNzY3OTk5MiBMNDIuMTU1OTIxNSwzNi43NDQzNzcxIEM0MC45ODczMzEyLDM1Ljk4NzcyOCA0MC4wNDAwMDE1LDM2LjUyMjExMzYgNDAuMDQwMDAxNSwzNy45MTQ3MTE0IEw0MC4wNDAwMDE1LDYwLjM2MTM1NiBaXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAvLyBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgcGFkZGluZzogNzUsXG4gICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgICBjc3M9e3sgZm9udFNpemU6IDM0LCBtYXJnaW5MZWZ0OiAxNCwgY29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGgxXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnNTZweCAwJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KScsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAgIC8vIGZvblNpemU6IDU4LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgcGxheWxpc3QudGl0bGUubGVuZ3RoID4gMzBcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5bGlzdC50aXRsZS5sZW5ndGggPiA0NVxuICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3QudGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNDhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNTJcbiAgICAgICAgICAgICAgICAgICAgICA6IDU2XG4gICAgICAgICAgICAgICAgICAgIDogNjAsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtlbW9qaWZ5KHBsYXlsaXN0LnRpdGxlKX1cbiAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBDb2xsZWN0aW9uIGJ5eycgJ31cbiAgICAgICAgICAgICAgPHNwYW4gY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICAgICAge3BsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwgJiYgKFxuICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmwuaW5jbHVkZXMoJ2dyYXZhdGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGxheWxpc3Qub3duZXIuYXZhdGFyX3VybC5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBsYXlsaXN0Lm93bmVyLmF2YXRhcl91cmxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiAnNTAlJywgbWFyZ2luOiAnMCAxNnB4JyB9fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7cGxheWxpc3Qub3duZXIuZnVsbF9uYW1lfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBtYXJnaW5Ub3A6ICcxcmVtJyB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7cGxheWxpc3QuaXRlbXMubGVuZ3RofSB2aWRlbyBsZXNzb25zLHsnICd9XG4gICAgICAgICAgICAgIHtjb252ZXJ0VGltZShwbGF5bGlzdC5kdXJhdGlvbil9XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc3RvcmUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPFN0b3JlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncG9kY2FzdCc6XG4gICAgICBjb25zdCBwb2RjYXN0ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9wb2RjYXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20ocG9kY2FzdC5pbWFnZV91cmwpXG4gICAgICAgIC5nZXRQYWxldHRlKClcbiAgICAgICAgLnRoZW4oKHBhbGV0dGUpID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaW5zdHJ1Y3Rvcic6XG4gICAgICBjb25zdCBpbnN0cnVjdG9yID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS9pbnN0cnVjdG9ycy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIGNvbnN0IGF2YXRhclBhbGV0dGUgPSBhd2FpdCBWaWJyYW50LmZyb20oaW5zdHJ1Y3Rvci5hdmF0YXJfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbigocGFsZXR0ZSkgPT4gcGFsZXR0ZSlcbiAgICAgIGNvbnNvbGUubG9nKHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEluc3RydWN0b3JcbiAgICAgICAgICBpbnN0cnVjdG9yPXtpbnN0cnVjdG9yfVxuICAgICAgICAgIHBhbGV0dGU9e2F2YXRhclBhbGV0dGV9XG4gICAgICAgICAgcGFyc2VkUmVxPXtwYXJzZWRSZXF9XG4gICAgICAgIC8+LFxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwbGF5bGlzdHMnOlxuICAgICAgY29uc3QgcGxheWxpc3QgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL3BsYXlsaXN0cy8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcblxuICAgICAgbGV0IGl0ZW1zVG9NYXAgPSBbXVxuXG4gICAgICBjb25zdCB1cHBlckxldmVsTGVzc29ucyA9IHBsYXlsaXN0Lml0ZW1zLmZpbHRlcihcbiAgICAgICAgKHsgdGh1bWJfbmFpbCB9KSA9PiAhIXRodW1iX25haWwsXG4gICAgICApXG5cbiAgICAgIGNvbnN0IHN1YlBsYXlsaXN0cyA9IHBsYXlsaXN0Lml0ZW1zLmZpbHRlcihcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gJ3BsYXlsaXN0JyxcbiAgICAgIClcblxuICAgICAgaWYgKCFpc0VtcHR5KHVwcGVyTGV2ZWxMZXNzb25zKSkge1xuICAgICAgICBpdGVtc1RvTWFwID0gdXBwZXJMZXZlbExlc3NvbnMuc2xpY2UoMCwgMylcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW1wdHkoc3ViUGxheWxpc3RzKSkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldChzdWJQbGF5bGlzdHNbMF0uaXRlbXNfdXJsKVxuICAgICAgICBpdGVtc1RvTWFwID0gZGF0YS5zbGljZSgwLCAzKVxuICAgICAgfVxuXG4gICAgICBsZXQgc3ViUGxheWxpc3RzTGVzc29uc0Ftb3VudCA9IDBcblxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBzdWJQbGF5bGlzdHMubWFwKCh7IGl0ZW1zX3VybCB9KSA9PlxuICAgICAgICBheGlvcy5nZXQoaXRlbXNfdXJsKS50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSksXG4gICAgICApXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICBzdWJQbGF5bGlzdHNMZXNzb25zQW1vdW50ID0gcmVzdWx0c1xuICAgICAgICAubWFwKChyKSA9PiByLmZpbHRlcigoeyB0eXBlIH0pID0+IHR5cGUgPT09ICdsZXNzb24nKS5sZW5ndGgpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MgKyBjdXIsIDApXG5cbiAgICAgIGNvbnN0IGxlc3NvbnNUb3RhbCA9IHVwcGVyTGV2ZWxMZXNzb25zLmxlbmd0aCArIHN1YlBsYXlsaXN0c0xlc3NvbnNBbW91bnRcblxuICAgICAgY29uc3QgcGxheWxpc3RQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKHBsYXlsaXN0LnNxdWFyZV9jb3Zlcl80ODBfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPFBsYXlsaXN0c1xuICAgICAgICAgIHBsYXlsaXN0PXtwbGF5bGlzdH1cbiAgICAgICAgICBwYXJzZWRSZXE9e3BhcnNlZFJlcX1cbiAgICAgICAgICBpdGVtc1RvTWFwPXtpdGVtc1RvTWFwfVxuICAgICAgICAgIHBhbGV0dGU9e3BsYXlsaXN0UGFsZXR0ZX1cbiAgICAgICAgICBsZXNzb25zVG90YWw9e2xlc3NvbnNUb3RhbH1cbiAgICAgICAgLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3Nlcmllcyc6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoXG4gICAgICAgICAgYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWAsXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiBkYXRhKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4sXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBjb25zdCB0YWdQYWxldHRlID0gYXdhaXQgVmlicmFudC5mcm9tKGxlc3Nvbi5pbWFnZV8yNTZfdXJsKVxuICAgICAgICAuZ2V0UGFsZXR0ZSgpXG4gICAgICAgIC50aGVuKChwYWxldHRlKSA9PiBwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxMZXNzb24gbGVzc29uPXtsZXNzb259IHBhbGV0dGU9e3RhZ1BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPixcbiAgICAgIClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+LFxuICAgICAgKVxuICB9XG4gIC8vIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref62 = process.env.NODE_ENV === "production" ? {
  name: "feqmdq-Playlists",
  styles: "display:flex;align-items:center;margin-top:1rem;;label:Playlists;"
} : {
  name: "feqmdq-Playlists",
  styles: "display:flex;align-items:center;margin-top:1rem;;label:Playlists;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function Playlists(_ref44) {
  var parsedReq = _ref44.parsedReq,
      playlist = _ref44.playlist,
      itemsToMap = _ref44.itemsToMap,
      palette = _ref44.palette,
      lessonsTotal = _ref44.lessonsTotal;
  var images = parsedReq.images,
      theme = parsedReq.theme;
  var background = 'white';
  var foreground = 'black';

  if (theme === 'dark') {
    background = 'black';
    foreground = 'white';
  }

  var hasArtwork = hasArtworkImage(playlist.square_cover_480_url);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), hasArtwork ? (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid rgb(".concat(palette.Vibrant.rgb.toString(), ")"),
      padding: '0 3%',
      background: background
    }, ";label:Playlists;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref45
  }, (0, _core.jsx)("img", {
    src: playlist.square_cover_480_url,
    css: _ref46
  })), (0, _core.jsx)("div", {
    css: _ref47
  }, (0, _core.jsx)("img", {
    src: "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1605643202/og-images/egghead-logo.svg",
    css: _ref48
  }), (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      fontSize: playlist.title.length > 60 ? playlist.title.length > 80 ? '40px' : '44px' : '54px',
      color: foreground,
      fontWeight: 600,
      fontStyle: 'normal',
      lineHeight: 1.2
    }, ";label:Playlists;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, emojify(playlist.title)), (0, _core.jsx)("div", {
    css: _ref49
  }, playlist.owner.avatar_url && (0, _core.jsx)("img", {
    src: playlist.owner.avatar_url.includes('gravatar') ? playlist.owner.avatar_url.replace('//', 'https://') : playlist.owner.avatar_url,
    css: _ref50
  }), playlist.owner.full_name && (0, _core.jsx)("div", {
    css: /*#__PURE__*/(0, _css2["default"])({
      marginLeft: '16px',
      color: foreground,
      fontWeight: 600
    }, ";label:Playlists;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, playlist.owner.full_name), (0, _core.jsx)("div", {
    css: _ref51
  }, lessonsTotal, " video lessons")))) : (0, _core.jsx)("div", {
    css: _ref52
  }, (0, _core.jsx)("div", {
    css: _ref53
  }, (0, _core.jsx)("div", {
    css: _ref54
  }, itemsToMap.map(function (lesson) {
    return (0, _core.jsx)("img", {
      src: lesson.thumb_nail,
      width: "460",
      key: lesson.id
    });
  })), (0, _core.jsx)("div", {
    css: _ref55
  }, (0, _core.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "95",
    height: "95",
    viewBox: "0 0 95 95"
  }, (0, _core.jsx)("g", {
    fill: "none",
    fillRule: "evenodd"
  }, (0, _core.jsx)("circle", {
    cx: "47.32",
    cy: "47.32",
    r: "46.32",
    fill: "#FFF",
    stroke: "#051721",
    strokeWidth: "2"
  }), (0, _core.jsx)("path", {
    fill: "#252526",
    fillRule: "nonzero",
    d: "M40.0400015,60.361356 C40.0400015,61.764363 40.9808178,62.2925569 42.1559215,61.5316904 L59.1811153,50.5080682 C60.3497057,49.7514191 60.356219,48.5288657 59.1811153,47.7679992 L42.1559215,36.7443771 C40.9873312,35.987728 40.0400015,36.5221136 40.0400015,37.9147114 L40.0400015,60.361356 Z"
  }))))), (0, _core.jsx)("div", {
    css: _ref56
  }, (0, _core.jsx)("div", {
    css: _ref57
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref58
  }, "egghead.io")), (0, _core.jsx)("h1", {
    css: /*#__PURE__*/(0, _css2["default"])({
      fontWeight: 700,
      padding: '56px 0',
      color: 'rgba(0, 0, 0, 0.9)',
      lineHeight: 1.2,
      // fonSize: 58,
      fontSize: playlist.title.length > 30 ? playlist.title.length > 45 ? playlist.title.length > 55 ? 48 : 52 : 56 : 60
    }, ";label:Playlists;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, emojify(playlist.title)), (0, _core.jsx)("h3", {
    css: _ref59
  }, "Collection by", ' ', (0, _core.jsx)("span", {
    css: _ref60
  }, playlist.owner.avatar_url && (0, _core.jsx)("img", {
    src: playlist.owner.avatar_url.includes('gravatar') ? playlist.owner.avatar_url.replace('//', 'https://') : playlist.owner.avatar_url,
    css: _ref61,
    width: "56"
  }), playlist.owner.full_name)), (0, _core.jsx)("h3", {
    css: _ref62
  }, playlist.items.length, " video lessons,", ' ', (0, _convertTime["default"])(playlist.duration)))));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(parsedReq) {
    var markup, podcast, palette, instructor, avatarPalette, playlist, itemsToMap, upperLevelLessons, subPlaylists, _yield$axios$get, data, subPlaylistsLessonsAmount, promises, results, lessonsTotal, playlistPalette, resource, lesson, tagPalette;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'store' ? 6 : _context.t0 === 'podcast' ? 8 : _context.t0 === 'instructor' ? 17 : _context.t0 === 'playlists' ? 26 : _context.t0 === 'series' ? 54 : _context.t0 === 'lesson' ? 59 : 67;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 6:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Store, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 8:
            _context.next = 10;
            return _axios["default"].get("https://egghead.io/api/v1/podcasts/".concat(parsedReq.text)).then(function (_ref63) {
              var data = _ref63.data;
              return data;
            });

          case 10:
            podcast = _context.sent;
            _context.next = 13;
            return Vibrant.from(podcast.image_url).getPalette().then(function (palette) {
              return palette;
            });

          case 13:
            palette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Podcast, {
              podcast: podcast,
              palette: palette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 17:
            _context.next = 19;
            return _axios["default"].get("https://egghead.io/api/v1/instructors/".concat(parsedReq.text)).then(function (_ref64) {
              var data = _ref64.data;
              return data;
            });

          case 19:
            instructor = _context.sent;
            _context.next = 22;
            return Vibrant.from(instructor.avatar_256_url).getPalette().then(function (palette) {
              return palette;
            });

          case 22:
            avatarPalette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Instructor, {
              instructor: instructor,
              palette: avatarPalette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 26:
            _context.next = 28;
            return _axios["default"].get("https://egghead.io/api/v1/playlists/".concat(parsedReq.text)).then(function (_ref65) {
              var data = _ref65.data;
              return data;
            });

          case 28:
            playlist = _context.sent;
            itemsToMap = [];
            upperLevelLessons = playlist.items.filter(function (_ref66) {
              var thumb_nail = _ref66.thumb_nail;
              return !!thumb_nail;
            });
            subPlaylists = playlist.items.filter(function (item) {
              return item.type === 'playlist';
            });

            if ((0, _lodash.isEmpty)(upperLevelLessons)) {
              _context.next = 36;
              break;
            }

            itemsToMap = upperLevelLessons.slice(0, 3);
            _context.next = 42;
            break;

          case 36:
            if ((0, _lodash.isEmpty)(subPlaylists)) {
              _context.next = 42;
              break;
            }

            _context.next = 39;
            return _axios["default"].get(subPlaylists[0].items_url);

          case 39:
            _yield$axios$get = _context.sent;
            data = _yield$axios$get.data;
            itemsToMap = data.slice(0, 3);

          case 42:
            subPlaylistsLessonsAmount = 0;
            promises = subPlaylists.map(function (_ref67) {
              var items_url = _ref67.items_url;
              return _axios["default"].get(items_url).then(function (_ref68) {
                var data = _ref68.data;
                return data;
              });
            });
            _context.next = 46;
            return Promise.all(promises);

          case 46:
            results = _context.sent;
            subPlaylistsLessonsAmount = results.map(function (r) {
              return r.filter(function (_ref69) {
                var type = _ref69.type;
                return type === 'lesson';
              }).length;
            }).reduce(function (acc, cur) {
              return acc + cur;
            }, 0);
            lessonsTotal = upperLevelLessons.length + subPlaylistsLessonsAmount;
            _context.next = 51;
            return Vibrant.from(playlist.square_cover_480_url).getPalette().then(function (palette) {
              return palette;
            });

          case 51:
            playlistPalette = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Playlists, {
              playlist: playlist,
              parsedReq: parsedReq,
              itemsToMap: itemsToMap,
              palette: playlistPalette,
              lessonsTotal: lessonsTotal
            }));
            return _context.abrupt("break", 68);

          case 54:
            _context.next = 56;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref70) {
              var data = _ref70.data;
              return data;
            });

          case 56:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 59:
            _context.next = 61;
            return _axios["default"].get("https://egghead.io/api/v1/lessons/".concat(parsedReq.text)).then(function (_ref71) {
              var data = _ref71.data;
              return data;
            });

          case 61:
            lesson = _context.sent;
            _context.next = 64;
            return Vibrant.from(lesson.image_256_url).getPalette().then(function (palette) {
              return palette;
            });

          case 64:
            tagPalette = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Lesson, {
              lesson: lesson,
              palette: tagPalette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 68);

          case 67:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 68:
            return _context.abrupt("return", markup);

          case 69:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}