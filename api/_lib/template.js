"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

var _lodash = require("lodash");

var Vibrant = _interopRequireWildcard(require("node-vibrant"));

var _fonts = _interopRequireDefault(require("./fonts"));

var _convertTime = _interopRequireDefault(require("./convertTime"));

import { jsx as ___EmotionJSX } from "@emotion/core";

/** @jsx jsx */
var reset =
/*#__PURE__*/

/*#__PURE__*/
(0, _core.css)(_fonts["default"], " *,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#242529;font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Open Sans','Helvetica Neue',sans-serif;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;}label:reset;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVpQiIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQgZm9udHMgZnJvbSAnLi9mb250cydcbmltcG9ydCBjb252ZXJ0VGltZSBmcm9tICcuL2NvbnZlcnRUaW1lJ1xuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgJHtmb250c31cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90byxcbiAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIC8vZm9udEZhbWlseTogJ0ludGVyLCBIZWx2ZXRpY2EsIEhlbHZldGljYSBOZXVlLCBzeXN0ZW0tdWksIFNhbnMtU2VyaWYnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCcsXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICB7LyogZW1vamlzOiB7ZW1vamlmeShzYW5pdGl6ZUh0bWwodGV4dCkpfSAqL31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBTdG9yZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdJbnRlciwgSGVsdmV0aWNhLCBIZWx2ZXRpY2EgTmV1ZSwgc3lzdGVtLXVpLCBTYW5zLVNlcmlmJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICc2MjhweCA2MjhweCcsXG4gICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlIDUwJScsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBTdG9yZVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgICAgICAgfX1cbiAgICAgICAgPiAqL31cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIC8vYmFja2dyb3VuZENvbG9yOiAnI0ZGMkQ1NScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2gxPlxuICAgICAgICB7LyogPC9kaXY+ICovfVxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb2RjYXN0KHtwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgLy8gaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgICBlZ2doZWFkLmlvPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT4vcG9kY2FzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDQ2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMzJweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7bGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgLy8gZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgLy8ganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIC8vIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17e21hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDE3MH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgICAvLyBtYXJnaW5SaWdodDogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGV9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDM2LFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qICA8c3ZnXG4gICAgICAgICAgICAgIC8vIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjg0XCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiODRcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDg0IDg0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIgMilcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICBjeD1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICByPVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9e3ZpYnJhbnR9XG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjIuOTk2XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPXtcbiAgICAgICAgICAgICAgICAgICAgbGVzc29uLnByaW1hcnlfdGFnLm5hbWUgPT09ICdqYXZhc2NyaXB0J1xuICAgICAgICAgICAgICAgICAgICAgID8gZGFya1ZpYnJhbnRcbiAgICAgICAgICAgICAgICAgICAgICA6ICcjRjdGQ0Y2J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZD1cIk0zMi4yNTg1NDMyLDIzLjkzMjMxOTMgTDU1LjQzMTAwMjgsMzguNjc4NDI5OSBDNTYuMTI4OTAzLDM5LjEyMjU0ODIgNTYuMzM0NjMzOSw0MC4wNDgzMzcxIDU1Ljg5MDUxNTUsNDAuNzQ2MjM3MyBDNTUuNzcyODE4MSw0MC45MzExOTA0IDU1LjYxNTk1NTgsNDEuMDg4MDUyNyA1NS40MzEwMDI4LDQxLjIwNTc1MDEgTDMyLjI1ODU0MzIsNTUuOTUxODYwNyBDMzEuNTYwNjQzLDU2LjM5NTk3OTEgMzAuNjM0ODU0MSw1Ni4xOTAyNDgyIDMwLjE5MDczNTgsNTUuNDkyMzQ4IEMzMC4wMzc3OTk4LDU1LjI1MjAyIDI5Ljk1NjU2NzUsNTQuOTczMDYzNiAyOS45NTY1Njc1LDU0LjY4ODIwMDYgTDI5Ljk1NjU2NzUsMjUuMTk1OTc5NCBDMjkuOTU2NTY3NSwyNC4zNjg3NTE2IDMwLjYyNzE2ODEsMjMuNjk4MTUxIDMxLjQ1NDM5NTksMjMuNjk4MTUxIEMzMS43MzkyNTg5LDIzLjY5ODE1MSAzMi4wMTgyMTUzLDIzLjc3OTM4MzMgMzIuMjU4NTQzMiwyMy45MzIzMTkzIFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPiAqL31cblxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcyLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MixcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtsZXNzb24uaW5zdHJ1Y3Rvci5mdWxsX25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICBjc3M9e3ttYXJnaW5SaWdodDogMTB9fVxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjM4XCJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDIgMzhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjRkZCNDMwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzguNjQsMTUuNTQgTDMyLjM0LDE1LjU0IEMzMS4wNTIsMTIuNDg4IDI4LDEwLjM2IDI0LjQ3MiwxMC4zNiBDMTkuNzY4LDEwLjM2IDE1LjkzMiwxNC4xNjggMTUuOTMyLDE4Ljg0NCBDMTUuOTMyLDIzLjUyIDE5Ljc2OCwyNy4zMjggMjQuNDcyLDI3LjMyOCBDMjgsMjcuMzI4IDMxLjAyNCwyNS4yIDMyLjMxMiwyMi4xNzYgTDM4LjY0LDIyLjE3NiBDNDAuNDg4LDIyLjE3NiA0MiwyMC42OTIgNDIsMTguODQ0IEM0MiwxNy4wNTIgNDAuNDg4LDE1LjU0IDM4LjY0LDE1LjU0IFogTTI0LjQ3MiwyMi4xNDggQzIyLjY1MiwyMi4xNDggMjEuMTY4LDIwLjY5MiAyMS4xNjgsMTguODcyIEMyMS4xNjgsMTcuMDUyIDIyLjY1MiwxNS41OTYgMjQuNDcyLDE1LjU5NiBDMjYuMjkyLDE1LjU5NiAyNy43NzYsMTcuMDUyIDI3Ljc3NiwxOC44NzIgQzI3Ljc3NiwyMC42OTIgMjYuMjkyLDIyLjE0OCAyNC40NzIsMjIuMTQ4IFpcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM3LjkxMiwzMS4xOTIgTDMyLjk4NCwyNi42NTYgQzMyLjYyLDI2LjMyIDMyLjA4OCwyNi4zNDggMzEuNzUyLDI2LjY4NCBDMjkuNTk2LDI4LjcyOCAyNi42LDI5LjkzMiAyMy4zMjQsMjkuNjUyIEMxOC4wMzIsMjkuMjMyIDEzLjc3NiwyNC45MiAxMy40MTIsMTkuNjU2IEMxMi45NjQsMTMuMzg0IDE3Ljk3Niw4LjEyIDI0LjIyLDguMTIgQzI2Ljk2NCw4LjEyIDI5LjQ1Niw5LjEyOCAzMS4zODgsMTAuODA4IEMzMS43MjQsMTEuMTE2IDMyLjI1NiwxMS4xMTYgMzIuNTkyLDEwLjgwOCBMMzcuNjA0LDYuMjE2IEMzNy44LDYuMDIgMzcuODI4LDUuNzEyIDM3LjYzMiw1LjUxNiBDMzMuOTY0LDEuODc2IDI4Ljg0LC0wLjI4IDIzLjIxMiwwLjAyOCBDMTQuMzY0LDAuNDc2IDcuMDU2LDcuMDU2IDUuNTE2LDE1LjU0IEwzLjM2LDE1LjU0IEMxLjUxMiwxNS41NCAwLDE3LjA1MiAwLDE4LjkgQzAsMjAuNzQ4IDEuNTEyLDIyLjI2IDMuMzYsMjIuMjYgTDUuNTE2LDIyLjI2IEM3LjExMiwzMS4wOCAxNC44NjgsMzcuOCAyNC4yMiwzNy44IEMyOS42MjQsMzcuOCAzNC40NjgsMzUuNTYgMzcuOTQsMzEuOTc2IEMzOC4xMzYsMzEuNzUyIDM4LjEzNiwzMS40MTYgMzcuOTEyLDMxLjE5MiBaXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICAgIENvbW11bml0eSBSZXNvdXJjZVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjM2XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzNlwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBMUE3QkNcIlxuICAgICAgICAgICAgICAgICAgZD1cIk0xOCwwIEM4LjA1ODg3NDUsMCAwLDguMDU4ODc0NSAwLDE4IEMwLDI3Ljk0MTEyNTUgOC4wNTg4NzQ1LDM2IDE4LDM2IEMyNy45NDExMjU1LDM2IDM2LDI3Ljk0MTEyNTUgMzYsMTggQzM2LDEzLjIyNjEwMzIgMzQuMTAzNTc2OSw4LjY0NzczMjc1IDMwLjcyNzkyMjEsNS4yNzIwNzc5NCBDMjcuMzUyMjY3MiwxLjg5NjQyMzEzIDIyLjc3Mzg5NjgsMCAxOCwwIFogTTE4LDMyLjQgQzEwLjA0NzA5OTYsMzIuNCAzLjYsMjUuOTUyOTAwNCAzLjYsMTggQzMuNiwxMC4wNDcwOTk2IDEwLjA0NzA5OTYsMy42IDE4LDMuNiBDMjUuOTUyOTAwNCwzLjYgMzIuNCwxMC4wNDcwOTk2IDMyLjQsMTggQzMyLjQsMjEuODE5MTE3NSAzMC44ODI4NjE1LDI1LjQ4MTgxMzggMjguMTgyMzM3NiwyOC4xODIzMzc2IEMyNS40ODE4MTM4LDMwLjg4Mjg2MTUgMjEuODE5MTE3NSwzMi40IDE4LDMyLjQgWiBNMjMuNTgsMTkuMTM0IEwxOS44LDE2Ljk1NiBMMTkuOCw5IEMxOS44LDguMDA1ODg3NDUgMTguOTk0MTEyNSw3LjIgMTgsNy4yIEMxNy4wMDU4ODc1LDcuMiAxNi4yLDguMDA1ODg3NDUgMTYuMiw5IEwxNi4yLDE4LjIxNiBDMTYuMjEwNjU4MSwxOC4zNDAwMjM2IDE2LjI0MTA0MDEsMTguNDYxNTUxOCAxNi4yOSwxOC41NzYgQzE2LjMyNzA2OTEsMTguNjgyNzk1IDE2LjM3NTMzOCwxOC43ODUzNjY0IDE2LjQzNCwxOC44ODIgQzE2LjQ4MzI1NTYsMTguOTg0MzExMiAxNi41NDM2MTg4LDE5LjA4MDg5MjMgMTYuNjE0LDE5LjE3IEwxNi45MDIsMTkuNDA0IEwxNy4wNjQsMTkuNTY2IEwyMS43NDQsMjIuMjY2IEMyMi4wMTgzMjUyLDIyLjQyMTQ4NDggMjIuMzI4NjgyNSwyMi41MDIxNzc3IDIyLjY0NCwyMi41MDAwNDQ1IEMyMy40NjM3MDczLDIyLjUwNTczMSAyNC4xODM3NTgxLDIxLjk1NjkwMjYgMjQuMzk1NDk4NCwyMS4xNjQ5OTQyIEMyNC42MDcyMzg2LDIwLjM3MzA4NTggMjQuMjU3MTgyOCwxOS41MzgxMzI2IDIzLjU0NCwxOS4xMzQgTDIzLjU4LDE5LjEzNCBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUobGVzc29uLmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3N0b3JlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxTdG9yZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BvZGNhc3QnOlxuICAgICAgY29uc3QgcG9kY2FzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcG9kY2FzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"), "label:reset;");

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "gb5bef-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:InstructorGuide;"
} : {
  name: "gb5bef-InstructorGuide",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "vl70m2-InstructorGuide",
  styles: "margin-left:20px;label:InstructorGuide;"
} : {
  name: "vl70m2-InstructorGuide",
  styles: "margin-left:20px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9HYyIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQgZm9udHMgZnJvbSAnLi9mb250cydcbmltcG9ydCBjb252ZXJ0VGltZSBmcm9tICcuL2NvbnZlcnRUaW1lJ1xuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgJHtmb250c31cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90byxcbiAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIC8vZm9udEZhbWlseTogJ0ludGVyLCBIZWx2ZXRpY2EsIEhlbHZldGljYSBOZXVlLCBzeXN0ZW0tdWksIFNhbnMtU2VyaWYnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCcsXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICB7LyogZW1vamlzOiB7ZW1vamlmeShzYW5pdGl6ZUh0bWwodGV4dCkpfSAqL31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBTdG9yZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdJbnRlciwgSGVsdmV0aWNhLCBIZWx2ZXRpY2EgTmV1ZSwgc3lzdGVtLXVpLCBTYW5zLVNlcmlmJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICc2MjhweCA2MjhweCcsXG4gICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlIDUwJScsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBTdG9yZVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgICAgICAgfX1cbiAgICAgICAgPiAqL31cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIC8vYmFja2dyb3VuZENvbG9yOiAnI0ZGMkQ1NScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2gxPlxuICAgICAgICB7LyogPC9kaXY+ICovfVxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb2RjYXN0KHtwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgLy8gaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgICBlZ2doZWFkLmlvPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT4vcG9kY2FzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDQ2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMzJweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7bGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgLy8gZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgLy8ganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIC8vIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17e21hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDE3MH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgICAvLyBtYXJnaW5SaWdodDogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGV9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDM2LFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qICA8c3ZnXG4gICAgICAgICAgICAgIC8vIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjg0XCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiODRcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDg0IDg0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIgMilcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICBjeD1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICByPVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9e3ZpYnJhbnR9XG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjIuOTk2XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPXtcbiAgICAgICAgICAgICAgICAgICAgbGVzc29uLnByaW1hcnlfdGFnLm5hbWUgPT09ICdqYXZhc2NyaXB0J1xuICAgICAgICAgICAgICAgICAgICAgID8gZGFya1ZpYnJhbnRcbiAgICAgICAgICAgICAgICAgICAgICA6ICcjRjdGQ0Y2J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZD1cIk0zMi4yNTg1NDMyLDIzLjkzMjMxOTMgTDU1LjQzMTAwMjgsMzguNjc4NDI5OSBDNTYuMTI4OTAzLDM5LjEyMjU0ODIgNTYuMzM0NjMzOSw0MC4wNDgzMzcxIDU1Ljg5MDUxNTUsNDAuNzQ2MjM3MyBDNTUuNzcyODE4MSw0MC45MzExOTA0IDU1LjYxNTk1NTgsNDEuMDg4MDUyNyA1NS40MzEwMDI4LDQxLjIwNTc1MDEgTDMyLjI1ODU0MzIsNTUuOTUxODYwNyBDMzEuNTYwNjQzLDU2LjM5NTk3OTEgMzAuNjM0ODU0MSw1Ni4xOTAyNDgyIDMwLjE5MDczNTgsNTUuNDkyMzQ4IEMzMC4wMzc3OTk4LDU1LjI1MjAyIDI5Ljk1NjU2NzUsNTQuOTczMDYzNiAyOS45NTY1Njc1LDU0LjY4ODIwMDYgTDI5Ljk1NjU2NzUsMjUuMTk1OTc5NCBDMjkuOTU2NTY3NSwyNC4zNjg3NTE2IDMwLjYyNzE2ODEsMjMuNjk4MTUxIDMxLjQ1NDM5NTksMjMuNjk4MTUxIEMzMS43MzkyNTg5LDIzLjY5ODE1MSAzMi4wMTgyMTUzLDIzLjc3OTM4MzMgMzIuMjU4NTQzMiwyMy45MzIzMTkzIFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPiAqL31cblxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcyLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MixcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtsZXNzb24uaW5zdHJ1Y3Rvci5mdWxsX25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICBjc3M9e3ttYXJnaW5SaWdodDogMTB9fVxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjM4XCJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDIgMzhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjRkZCNDMwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzguNjQsMTUuNTQgTDMyLjM0LDE1LjU0IEMzMS4wNTIsMTIuNDg4IDI4LDEwLjM2IDI0LjQ3MiwxMC4zNiBDMTkuNzY4LDEwLjM2IDE1LjkzMiwxNC4xNjggMTUuOTMyLDE4Ljg0NCBDMTUuOTMyLDIzLjUyIDE5Ljc2OCwyNy4zMjggMjQuNDcyLDI3LjMyOCBDMjgsMjcuMzI4IDMxLjAyNCwyNS4yIDMyLjMxMiwyMi4xNzYgTDM4LjY0LDIyLjE3NiBDNDAuNDg4LDIyLjE3NiA0MiwyMC42OTIgNDIsMTguODQ0IEM0MiwxNy4wNTIgNDAuNDg4LDE1LjU0IDM4LjY0LDE1LjU0IFogTTI0LjQ3MiwyMi4xNDggQzIyLjY1MiwyMi4xNDggMjEuMTY4LDIwLjY5MiAyMS4xNjgsMTguODcyIEMyMS4xNjgsMTcuMDUyIDIyLjY1MiwxNS41OTYgMjQuNDcyLDE1LjU5NiBDMjYuMjkyLDE1LjU5NiAyNy43NzYsMTcuMDUyIDI3Ljc3NiwxOC44NzIgQzI3Ljc3NiwyMC42OTIgMjYuMjkyLDIyLjE0OCAyNC40NzIsMjIuMTQ4IFpcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM3LjkxMiwzMS4xOTIgTDMyLjk4NCwyNi42NTYgQzMyLjYyLDI2LjMyIDMyLjA4OCwyNi4zNDggMzEuNzUyLDI2LjY4NCBDMjkuNTk2LDI4LjcyOCAyNi42LDI5LjkzMiAyMy4zMjQsMjkuNjUyIEMxOC4wMzIsMjkuMjMyIDEzLjc3NiwyNC45MiAxMy40MTIsMTkuNjU2IEMxMi45NjQsMTMuMzg0IDE3Ljk3Niw4LjEyIDI0LjIyLDguMTIgQzI2Ljk2NCw4LjEyIDI5LjQ1Niw5LjEyOCAzMS4zODgsMTAuODA4IEMzMS43MjQsMTEuMTE2IDMyLjI1NiwxMS4xMTYgMzIuNTkyLDEwLjgwOCBMMzcuNjA0LDYuMjE2IEMzNy44LDYuMDIgMzcuODI4LDUuNzEyIDM3LjYzMiw1LjUxNiBDMzMuOTY0LDEuODc2IDI4Ljg0LC0wLjI4IDIzLjIxMiwwLjAyOCBDMTQuMzY0LDAuNDc2IDcuMDU2LDcuMDU2IDUuNTE2LDE1LjU0IEwzLjM2LDE1LjU0IEMxLjUxMiwxNS41NCAwLDE3LjA1MiAwLDE4LjkgQzAsMjAuNzQ4IDEuNTEyLDIyLjI2IDMuMzYsMjIuMjYgTDUuNTE2LDIyLjI2IEM3LjExMiwzMS4wOCAxNC44NjgsMzcuOCAyNC4yMiwzNy44IEMyOS42MjQsMzcuOCAzNC40NjgsMzUuNTYgMzcuOTQsMzEuOTc2IEMzOC4xMzYsMzEuNzUyIDM4LjEzNiwzMS40MTYgMzcuOTEyLDMxLjE5MiBaXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICAgIENvbW11bml0eSBSZXNvdXJjZVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjM2XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzNlwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBMUE3QkNcIlxuICAgICAgICAgICAgICAgICAgZD1cIk0xOCwwIEM4LjA1ODg3NDUsMCAwLDguMDU4ODc0NSAwLDE4IEMwLDI3Ljk0MTEyNTUgOC4wNTg4NzQ1LDM2IDE4LDM2IEMyNy45NDExMjU1LDM2IDM2LDI3Ljk0MTEyNTUgMzYsMTggQzM2LDEzLjIyNjEwMzIgMzQuMTAzNTc2OSw4LjY0NzczMjc1IDMwLjcyNzkyMjEsNS4yNzIwNzc5NCBDMjcuMzUyMjY3MiwxLjg5NjQyMzEzIDIyLjc3Mzg5NjgsMCAxOCwwIFogTTE4LDMyLjQgQzEwLjA0NzA5OTYsMzIuNCAzLjYsMjUuOTUyOTAwNCAzLjYsMTggQzMuNiwxMC4wNDcwOTk2IDEwLjA0NzA5OTYsMy42IDE4LDMuNiBDMjUuOTUyOTAwNCwzLjYgMzIuNCwxMC4wNDcwOTk2IDMyLjQsMTggQzMyLjQsMjEuODE5MTE3NSAzMC44ODI4NjE1LDI1LjQ4MTgxMzggMjguMTgyMzM3NiwyOC4xODIzMzc2IEMyNS40ODE4MTM4LDMwLjg4Mjg2MTUgMjEuODE5MTE3NSwzMi40IDE4LDMyLjQgWiBNMjMuNTgsMTkuMTM0IEwxOS44LDE2Ljk1NiBMMTkuOCw5IEMxOS44LDguMDA1ODg3NDUgMTguOTk0MTEyNSw3LjIgMTgsNy4yIEMxNy4wMDU4ODc1LDcuMiAxNi4yLDguMDA1ODg3NDUgMTYuMiw5IEwxNi4yLDE4LjIxNiBDMTYuMjEwNjU4MSwxOC4zNDAwMjM2IDE2LjI0MTA0MDEsMTguNDYxNTUxOCAxNi4yOSwxOC41NzYgQzE2LjMyNzA2OTEsMTguNjgyNzk1IDE2LjM3NTMzOCwxOC43ODUzNjY0IDE2LjQzNCwxOC44ODIgQzE2LjQ4MzI1NTYsMTguOTg0MzExMiAxNi41NDM2MTg4LDE5LjA4MDg5MjMgMTYuNjE0LDE5LjE3IEwxNi45MDIsMTkuNDA0IEwxNy4wNjQsMTkuNTY2IEwyMS43NDQsMjIuMjY2IEMyMi4wMTgzMjUyLDIyLjQyMTQ4NDggMjIuMzI4NjgyNSwyMi41MDIxNzc3IDIyLjY0NCwyMi41MDAwNDQ1IEMyMy40NjM3MDczLDIyLjUwNTczMSAyNC4xODM3NTgxLDIxLjk1NjkwMjYgMjQuMzk1NDk4NCwyMS4xNjQ5OTQyIEMyNC42MDcyMzg2LDIwLjM3MzA4NTggMjQuMjU3MTgyOCwxOS41MzgxMzI2IDIzLjU0NCwxOS4xMzQgTDIzLjU4LDE5LjEzNCBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUobGVzc29uLmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3N0b3JlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxTdG9yZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BvZGNhc3QnOlxuICAgICAgY29uc3QgcG9kY2FzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcG9kY2FzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "1ngusay-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;label:InstructorGuide;"
} : {
  name: "1ngusay-InstructorGuide",
  styles: "color:white;background-color:#242529;box-shadow:32px 0 0 #242529, -32px 0 0 #242529;font-size:48px;font-weight:600;line-height:1.25;padding:8px 0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: 'contain'
    }, "label:InstructorGuide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJFUSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcbmltcG9ydCB7aXNFbXB0eX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0ICogYXMgVmlicmFudCBmcm9tICdub2RlLXZpYnJhbnQnXG5pbXBvcnQgZm9udHMgZnJvbSAnLi9mb250cydcbmltcG9ydCBjb252ZXJ0VGltZSBmcm9tICcuL2NvbnZlcnRUaW1lJ1xuXG5jb25zdCByZXNldCA9IGNzc2BcbiAgJHtmb250c31cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAjMjQyNTI5O1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90byxcbiAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBoNiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIH1cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgfVxuICBoMyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICB9XG5gXG5cbmZ1bmN0aW9uIEFwcCh7cmVzb3VyY2UsIHBhcnNlZFJlcX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHtwYXJzZWRSZXF9KSB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIHRoZW1lLFxuICAgIG1kLFxuICAgIGZvbnRTaXplLFxuICAgIGltYWdlcyxcbiAgICBiZ0ltYWdlLFxuICAgIHdpZHRocyxcbiAgICBoZWlnaHRzLFxuICAgIHJlc291cmNlVHlwZSxcbiAgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICAgICAgICAgIC8vZm9udEZhbWlseTogJ0ludGVyLCBIZWx2ZXRpY2EsIEhlbHZldGljYSBOZXVlLCBzeXN0ZW0tdWksIFNhbnMtU2VyaWYnLFxuICAgICAgICAgIHBhZGRpbmc6ICc1MHB4IDgwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke1xuICAgICAgICAgICAgIWlzRW1wdHkoYmdJbWFnZSlcbiAgICAgICAgICAgICAgPyBiZ0ltYWdlXG4gICAgICAgICAgICAgIDogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RnM2d5azBndS9pbWFnZS91cGxvYWQvdjE1NzEzMDAyMTcvb2ctaW1hZ2UtYXNzZXRzL2luc3RydWN0b3ItZ3VpZGVfMngucG5nJ1xuICAgICAgICAgIH0pYCxcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IDUwLFxuICAgICAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcwcHhcIiAvPlxuICAgICAgICAgIDxoMyBjc3M9e3ttYXJnaW5MZWZ0OiAyMH19PlxuICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgSG93IHRvIGVnZ2hlYWRcbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI0MjUyOScsXG4gICAgICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogJyNGRjJENTUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMzJweCAwIDAgIzI0MjUyOSwgLTMycHggMCAwICMyNDI1MjknLFxuICAgICAgICAgICAgZm9udFNpemU6ICc0OHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMCcsXG4gICAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdHZW9yZ2lhLCBQYWxhdGlubywgQm9va21hbiwgc2VyaWYnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICB7LyogZW1vamlzOiB7ZW1vamlmeShzYW5pdGl6ZUh0bWwodGV4dCkpfSAqL31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBTdG9yZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgICB0aGVtZSxcbiAgICBtZCxcbiAgICBmb250U2l6ZSxcbiAgICBpbWFnZXMsXG4gICAgYmdJbWFnZSxcbiAgICB3aWR0aHMsXG4gICAgaGVpZ2h0cyxcbiAgICByZXNvdXJjZVR5cGUsXG4gIH0gPSBwYXJzZWRSZXFcbiAgY29uc29sZS5sb2coJ1BBUlNFRCBSRVFVRVNUJywgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAvL2ZvbnRGYW1pbHk6ICdJbnRlciwgSGVsdmV0aWNhLCBIZWx2ZXRpY2EgTmV1ZSwgc3lzdGVtLXVpLCBTYW5zLVNlcmlmJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNTBweCA4MHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtcbiAgICAgICAgICAgICFpc0VtcHR5KGJnSW1hZ2UpXG4gICAgICAgICAgICAgID8gYmdJbWFnZVxuICAgICAgICAgICAgICA6ICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZzNneWswZ3UvaW1hZ2UvdXBsb2FkL3YxNTcxMzAwMjE3L29nLWltYWdlLWFzc2V0cy9pbnN0cnVjdG9yLWd1aWRlXzJ4LnBuZydcbiAgICAgICAgICB9KWAsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6ICc2MjhweCA2MjhweCcsXG4gICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlIDUwJScsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDUwLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgc3JjPXtpbWFnZXNbMF19IHdpZHRoPVwiNzBweFwiIC8+XG4gICAgICAgICAgPGgzIGNzcz17e21hcmdpbkxlZnQ6IDIwfX0+XG4gICAgICAgICAgICB7Lyoge3Jlc291cmNlVHlwZS5yZXBsYWNlKCctJywgJyAnKX0gKi99XG4gICAgICAgICAgICBTdG9yZVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgICAgICAgfX1cbiAgICAgICAgPiAqL31cbiAgICAgICAgPGgxXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIC8vYmFja2dyb3VuZENvbG9yOiAnI0ZGMkQ1NScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICczMnB4IDAgMCB3aGl0ZSwgLTMycHggMCAwIHdoaXRlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnNDhweCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMjUsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAwJyxcbiAgICAgICAgICAgIC8vZm9udEZhbWlseTogJ0dlb3JnaWEsIFBhbGF0aW5vLCBCb29rbWFuLCBzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2gxPlxuICAgICAgICB7LyogPC9kaXY+ICovfVxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb2RjYXN0KHtwYXJzZWRSZXEsIHBvZGNhc3QsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUwLFxuICAgICAgICAgICAgLy8gaGVpZ2h0OiA2MjgsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDY0MCxcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlc1swXX0gd2lkdGg9XCI2MHB4XCIgLz5cbiAgICAgICAgICAgIDxoMiBjc3M9e3tmb250U2l6ZTogMzQsIG1hcmdpbkxlZnQ6IDE0LCBjb2xvcjogJ3JnYmEoMCwwLDAsMC44KSd9fT5cbiAgICAgICAgICAgICAgey8qIHtyZXNvdXJjZVR5cGUucmVwbGFjZSgnLScsICcgJyl9ICovfVxuICAgICAgICAgICAgICBlZ2doZWFkLmlvPHNwYW4gY3NzPXt7Y29sb3I6IHZpYnJhbnR9fT4vcG9kY2FzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDQ2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMzJweCAwJyxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOSknLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb2RjYXN0LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3BvZGNhc3QuaW1hZ2VfdXJsfVxuICAgICAgICAgIHdpZHRoPVwiNjQ4cHhcIlxuICAgICAgICAgIGhlaWdoPVwiNjQ4cHhcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgY2xpcFBhdGg6ICdjaXJjbGUoMjIwcHggYXQgY2VudGVyKScsXG4gICAgICAgICAgICB6b29tOiAxLjEsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAtMjAsXG4gICAgICAgICAgICB0b3A6IC0zMCxcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgJzAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAyKSwgMCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDI4KSwgMCAxMi41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDM1KSwgMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wNDIpLCAwIDQxLjhweCAzMy40cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4wNyknLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmZ1bmN0aW9uIExlc3Nvbih7bGVzc29uLCBwYXJzZWRSZXEsIHBhbGV0dGV9KSB7XG4gIGNvbnN0IHZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuVmlicmFudC5fcmdiLnRvU3RyaW5nKCl9LCAxKWBcbiAgY29uc3QgZGFya1ZpYnJhbnQgPSBgcmdiYSgke3BhbGV0dGUuRGFya1ZpYnJhbnQuX3JnYi50b1N0cmluZygpfSwgMSlgXG4gIGNvbnN0IHtpbWFnZXN9ID0gcGFyc2VkUmVxXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBwYWRkaW5nOiA1MCxcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgLy8gZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgLy8ganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIC8vIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBib3JkZXJUb3A6IGAyNXB4IHNvbGlkICR7dmlicmFudH1gLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNzcz17e21hcmdpblJpZ2h0OiA1MCwgd2lkdGg6ICcxMDAlJywgbWF4V2lkdGg6IDE3MH19PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIC8vIHRhZyBpbWFnZVxuICAgICAgICAgICAgc3JjPXtsZXNzb24uaW1hZ2VfMjU2X3VybH1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgICAvLyBtYXJnaW5SaWdodDogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgLy8gcmlnaHQgY29sdW1uIGhvbGRlclxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2VzWzBdfSB3aWR0aD1cIjcycHhcIiBjc3M9e3ttYXJnaW5SaWdodDogMTV9fSAvPnsnICd9XG4gICAgICAgICAgICBlZ2doZWFkLmlvXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICAvLyB0aXRsZVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgIGxlc3Nvbi50aXRsZS5sZW5ndGggPiAzMFxuICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNDVcbiAgICAgICAgICAgICAgICAgICAgPyBsZXNzb24udGl0bGUubGVuZ3RoID4gNTVcbiAgICAgICAgICAgICAgICAgICAgICA/IDUyXG4gICAgICAgICAgICAgICAgICAgICAgOiA1NlxuICAgICAgICAgICAgICAgICAgICA6IDYyXG4gICAgICAgICAgICAgICAgICA6IDY2LFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMzAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsZXNzb24udGl0bGV9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAvLyBieWxpbmUgaG9sZGVyXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDM2LFxuICAgICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAwJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qICA8c3ZnXG4gICAgICAgICAgICAgIC8vIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNn19XG4gICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjg0XCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiODRcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDg0IDg0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIgMilcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICBjeD1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICBjeT1cIjM5Ljk0MlwiXG4gICAgICAgICAgICAgICAgICByPVwiMzkuOTQyXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9e3ZpYnJhbnR9XG4gICAgICAgICAgICAgICAgICBzdHJva2U9XCIjRkZGXCJcbiAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjIuOTk2XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBmaWxsPXtcbiAgICAgICAgICAgICAgICAgICAgbGVzc29uLnByaW1hcnlfdGFnLm5hbWUgPT09ICdqYXZhc2NyaXB0J1xuICAgICAgICAgICAgICAgICAgICAgID8gZGFya1ZpYnJhbnRcbiAgICAgICAgICAgICAgICAgICAgICA6ICcjRjdGQ0Y2J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZD1cIk0zMi4yNTg1NDMyLDIzLjkzMjMxOTMgTDU1LjQzMTAwMjgsMzguNjc4NDI5OSBDNTYuMTI4OTAzLDM5LjEyMjU0ODIgNTYuMzM0NjMzOSw0MC4wNDgzMzcxIDU1Ljg5MDUxNTUsNDAuNzQ2MjM3MyBDNTUuNzcyODE4MSw0MC45MzExOTA0IDU1LjYxNTk1NTgsNDEuMDg4MDUyNyA1NS40MzEwMDI4LDQxLjIwNTc1MDEgTDMyLjI1ODU0MzIsNTUuOTUxODYwNyBDMzEuNTYwNjQzLDU2LjM5NTk3OTEgMzAuNjM0ODU0MSw1Ni4xOTAyNDgyIDMwLjE5MDczNTgsNTUuNDkyMzQ4IEMzMC4wMzc3OTk4LDU1LjI1MjAyIDI5Ljk1NjU2NzUsNTQuOTczMDYzNiAyOS45NTY1Njc1LDU0LjY4ODIwMDYgTDI5Ljk1NjU2NzUsMjUuMTk1OTc5NCBDMjkuOTU2NTY3NSwyNC4zNjg3NTE2IDMwLjYyNzE2ODEsMjMuNjk4MTUxIDMxLjQ1NDM5NTksMjMuNjk4MTUxIEMzMS43MzkyNTg5LDIzLjY5ODE1MSAzMi4wMTgyMTUzLDIzLjc3OTM4MzMgMzIuMjU4NTQzMiwyMy45MzIzMTkzIFpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPiAqL31cblxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAvLyBpbnN0cnVjdG9yXG4gICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2xlc3Nvbi5pbnN0cnVjdG9yLmF2YXRhcl82NF91cmx9XG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDcyLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA3MixcbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIHtsZXNzb24uaW5zdHJ1Y3Rvci5mdWxsX25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtsZXNzb24uZnJlZV9mb3JldmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIC8vIGNvbW11bml0eSByZXNvdXJjZVxuICAgICAgICAgICAgICAgIGNzcz17e21hcmdpblJpZ2h0OiAzNiwgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICBjc3M9e3ttYXJnaW5SaWdodDogMTB9fVxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjM4XCJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDIgMzhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjRkZCNDMwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMzguNjQsMTUuNTQgTDMyLjM0LDE1LjU0IEMzMS4wNTIsMTIuNDg4IDI4LDEwLjM2IDI0LjQ3MiwxMC4zNiBDMTkuNzY4LDEwLjM2IDE1LjkzMiwxNC4xNjggMTUuOTMyLDE4Ljg0NCBDMTUuOTMyLDIzLjUyIDE5Ljc2OCwyNy4zMjggMjQuNDcyLDI3LjMyOCBDMjgsMjcuMzI4IDMxLjAyNCwyNS4yIDMyLjMxMiwyMi4xNzYgTDM4LjY0LDIyLjE3NiBDNDAuNDg4LDIyLjE3NiA0MiwyMC42OTIgNDIsMTguODQ0IEM0MiwxNy4wNTIgNDAuNDg4LDE1LjU0IDM4LjY0LDE1LjU0IFogTTI0LjQ3MiwyMi4xNDggQzIyLjY1MiwyMi4xNDggMjEuMTY4LDIwLjY5MiAyMS4xNjgsMTguODcyIEMyMS4xNjgsMTcuMDUyIDIyLjY1MiwxNS41OTYgMjQuNDcyLDE1LjU5NiBDMjYuMjkyLDE1LjU5NiAyNy43NzYsMTcuMDUyIDI3Ljc3NiwxOC44NzIgQzI3Ljc3NiwyMC42OTIgMjYuMjkyLDIyLjE0OCAyNC40NzIsMjIuMTQ4IFpcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTM3LjkxMiwzMS4xOTIgTDMyLjk4NCwyNi42NTYgQzMyLjYyLDI2LjMyIDMyLjA4OCwyNi4zNDggMzEuNzUyLDI2LjY4NCBDMjkuNTk2LDI4LjcyOCAyNi42LDI5LjkzMiAyMy4zMjQsMjkuNjUyIEMxOC4wMzIsMjkuMjMyIDEzLjc3NiwyNC45MiAxMy40MTIsMTkuNjU2IEMxMi45NjQsMTMuMzg0IDE3Ljk3Niw4LjEyIDI0LjIyLDguMTIgQzI2Ljk2NCw4LjEyIDI5LjQ1Niw5LjEyOCAzMS4zODgsMTAuODA4IEMzMS43MjQsMTEuMTE2IDMyLjI1NiwxMS4xMTYgMzIuNTkyLDEwLjgwOCBMMzcuNjA0LDYuMjE2IEMzNy44LDYuMDIgMzcuODI4LDUuNzEyIDM3LjYzMiw1LjUxNiBDMzMuOTY0LDEuODc2IDI4Ljg0LC0wLjI4IDIzLjIxMiwwLjAyOCBDMTQuMzY0LDAuNDc2IDcuMDU2LDcuMDU2IDUuNTE2LDE1LjU0IEwzLjM2LDE1LjU0IEMxLjUxMiwxNS41NCAwLDE3LjA1MiAwLDE4LjkgQzAsMjAuNzQ4IDEuNTEyLDIyLjI2IDMuMzYsMjIuMjYgTDUuNTE2LDIyLjI2IEM3LjExMiwzMS4wOCAxNC44NjgsMzcuOCAyNC4yMiwzNy44IEMyOS42MjQsMzcuOCAzNC40NjgsMzUuNTYgMzcuOTQsMzEuOTc2IEMzOC4xMzYsMzEuNzUyIDM4LjEzNiwzMS40MTYgMzcuOTEyLDMxLjE5MiBaXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICAgIENvbW11bml0eSBSZXNvdXJjZVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgICAgICAgIGNzcz17e2Rpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcid9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgY3NzPXt7bWFyZ2luUmlnaHQ6IDEwfX1cbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjM2XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzNlwiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBMUE3QkNcIlxuICAgICAgICAgICAgICAgICAgZD1cIk0xOCwwIEM4LjA1ODg3NDUsMCAwLDguMDU4ODc0NSAwLDE4IEMwLDI3Ljk0MTEyNTUgOC4wNTg4NzQ1LDM2IDE4LDM2IEMyNy45NDExMjU1LDM2IDM2LDI3Ljk0MTEyNTUgMzYsMTggQzM2LDEzLjIyNjEwMzIgMzQuMTAzNTc2OSw4LjY0NzczMjc1IDMwLjcyNzkyMjEsNS4yNzIwNzc5NCBDMjcuMzUyMjY3MiwxLjg5NjQyMzEzIDIyLjc3Mzg5NjgsMCAxOCwwIFogTTE4LDMyLjQgQzEwLjA0NzA5OTYsMzIuNCAzLjYsMjUuOTUyOTAwNCAzLjYsMTggQzMuNiwxMC4wNDcwOTk2IDEwLjA0NzA5OTYsMy42IDE4LDMuNiBDMjUuOTUyOTAwNCwzLjYgMzIuNCwxMC4wNDcwOTk2IDMyLjQsMTggQzMyLjQsMjEuODE5MTE3NSAzMC44ODI4NjE1LDI1LjQ4MTgxMzggMjguMTgyMzM3NiwyOC4xODIzMzc2IEMyNS40ODE4MTM4LDMwLjg4Mjg2MTUgMjEuODE5MTE3NSwzMi40IDE4LDMyLjQgWiBNMjMuNTgsMTkuMTM0IEwxOS44LDE2Ljk1NiBMMTkuOCw5IEMxOS44LDguMDA1ODg3NDUgMTguOTk0MTEyNSw3LjIgMTgsNy4yIEMxNy4wMDU4ODc1LDcuMiAxNi4yLDguMDA1ODg3NDUgMTYuMiw5IEwxNi4yLDE4LjIxNiBDMTYuMjEwNjU4MSwxOC4zNDAwMjM2IDE2LjI0MTA0MDEsMTguNDYxNTUxOCAxNi4yOSwxOC41NzYgQzE2LjMyNzA2OTEsMTguNjgyNzk1IDE2LjM3NTMzOCwxOC43ODUzNjY0IDE2LjQzNCwxOC44ODIgQzE2LjQ4MzI1NTYsMTguOTg0MzExMiAxNi41NDM2MTg4LDE5LjA4MDg5MjMgMTYuNjE0LDE5LjE3IEwxNi45MDIsMTkuNDA0IEwxNy4wNjQsMTkuNTY2IEwyMS43NDQsMjIuMjY2IEMyMi4wMTgzMjUyLDIyLjQyMTQ4NDggMjIuMzI4NjgyNSwyMi41MDIxNzc3IDIyLjY0NCwyMi41MDAwNDQ1IEMyMy40NjM3MDczLDIyLjUwNTczMSAyNC4xODM3NTgxLDIxLjk1NjkwMjYgMjQuMzk1NDk4NCwyMS4xNjQ5OTQyIEMyNC42MDcyMzg2LDIwLjM3MzA4NTggMjQuMjU3MTgyOCwxOS41MzgxMzI2IDIzLjU0NCwxOS4xMzQgTDIzLjU4LDE5LjEzNCBaXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz57JyAnfVxuICAgICAgICAgICAgICB7Y29udmVydFRpbWUobGVzc29uLmR1cmF0aW9uKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3N0b3JlJzpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxTdG9yZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BvZGNhc3QnOlxuICAgICAgY29uc3QgcG9kY2FzdCA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvcG9kY2FzdHMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgcGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShwb2RjYXN0LmltYWdlX3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBjb25zb2xlLmxvZyhwYWxldHRlKVxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxQb2RjYXN0IHBvZGNhc3Q9e3BvZGNhc3R9IHBhbGV0dGU9e3BhbGV0dGV9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZXJpZXMnOlxuICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxLyR7cGFyc2VkUmVxLnJlc291cmNlVHlwZX0vJHtwYXJzZWRSZXEudGV4dH1gXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2xlc3Nvbic6XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KGBodHRwczovL2VnZ2hlYWQuaW8vYXBpL3YxL2xlc3NvbnMvJHtwYXJzZWRSZXEudGV4dH1gKVxuICAgICAgICAudGhlbigoe2RhdGF9KSA9PiBkYXRhKVxuICAgICAgY29uc3QgdGFnUGFsZXR0ZSA9IGF3YWl0IFZpYnJhbnQuZnJvbShsZXNzb24uaW1hZ2VfMjU2X3VybClcbiAgICAgICAgLmdldFBhbGV0dGUoKVxuICAgICAgICAudGhlbihwYWxldHRlID0+IHBhbGV0dGUpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPExlc3NvbiBsZXNzb249e2xlc3Nvbn0gcGFsZXR0ZT17dGFnUGFsZXR0ZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"))
  }, (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref4
  }, "How to egghead")), (0, _core.jsx)("span", {
    css: _ref5
  }, text)));
}

var _ref7 = process.env.NODE_ENV === "production" ? {
  name: "gv7747-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:Store;"
} : {
  name: "gv7747-Store",
  styles: "position:absolute;left:50px;top:50px;display:flex;align-items:center;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "1b9jgnm-Store",
  styles: "margin-left:20px;label:Store;"
} : {
  name: "1b9jgnm-Store",
  styles: "margin-left:20px;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "1kea1tn-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;label:Store;"
} : {
  name: "1kea1tn-Store",
  styles: "color:black;background-color:white;box-shadow:32px 0 0 white, -32px 0 0 white;font-size:48px;font-weight:600;line-height:1.25;padding:10px 0;label:Store;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function Store(_ref6) {
  var parsedReq = _ref6.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      bgImage = parsedReq.bgImage,
      widths = parsedReq.widths,
      heights = parsedReq.heights,
      resourceType = parsedReq.resourceType;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'flex-end',
      //fontFamily: 'Inter, Helvetica, Helvetica Neue, system-ui, Sans-Serif',
      padding: '50px 80px',
      height: '100%',
      backgroundImage: "url(".concat(!(0, _lodash.isEmpty)(bgImage) ? bgImage : 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571300217/og-image-assets/instructor-guide_2x.png', ")"),
      backgroundSize: '628px 628px',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: '50% 50%'
    }, "label:Store;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref7
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "70px"
  }), (0, _core.jsx)("h3", {
    css: _ref8
  }, "Store")), (0, _core.jsx)("h1", {
    css: _ref9
  }, text)));
}

var _ref11 = process.env.NODE_ENV === "production" ? {
  name: "32nnnm-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;label:Podcast;"
} : {
  name: "32nnnm-Podcast",
  styles: "display:flex;flex-direction:column;padding:50px;width:100%;max-width:640px;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "g8uexs-Podcast",
  styles: "display:flex;align-items:center;label:Podcast;"
} : {
  name: "g8uexs-Podcast",
  styles: "display:flex;align-items:center;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "1fdna1-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);label:Podcast;"
} : {
  name: "1fdna1-Podcast",
  styles: "font-size:34px;margin-left:14px;color:rgba(0,0,0,0.8);label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "eyxyym-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;label:Podcast;"
} : {
  name: "eyxyym-Podcast",
  styles: "font-weight:600;font-size:46px;padding:32px 0;color:rgba(0, 0, 0, 0.9);line-height:1.2;label:Podcast;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function Podcast(_ref10) {
  var parsedReq = _ref10.parsedReq,
      podcast = _ref10.podcast,
      palette = _ref10.palette;
  var images = parsedReq.images;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'space-between',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, "label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref11
  }, (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "60px"
  }), (0, _core.jsx)("h2", {
    css: _ref13
  }, "egghead.io", (0, _core.jsx)("span", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      color: vibrant
    }, "label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, "/podcasts"))), (0, _core.jsx)("h1", {
    css: _ref14
  }, podcast.title)), (0, _core.jsx)("img", {
    src: podcast.image_url,
    width: "648px",
    heigh: "648px",
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      clipPath: 'circle(220px at center)',
      zoom: 1.1,
      position: 'absolute',
      right: -20,
      top: -30,
      zIndex: 5,
      boxShadow: '0 2.8px 2.2px rgba(0, 0, 0, 0.02), 0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035), 0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05), 0 100px 80px rgba(0, 0, 0, 0.07)'
    }, "label:Podcast;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  })));
}

var _ref16 = process.env.NODE_ENV === "production" ? {
  name: "1t1ebpy-Lesson",
  styles: "margin-right:50px;width:100%;max-width:170px;label:Lesson;"
} : {
  name: "1t1ebpy-Lesson",
  styles: "margin-right:50px;width:100%;max-width:170px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref17 = process.env.NODE_ENV === "production" ? {
  name: "1c3fctv-Lesson",
  styles: "border-radius:10px;width:100%;max-width:150px;label:Lesson;"
} : {
  name: "1c3fctv-Lesson",
  styles: "border-radius:10px;width:100%;max-width:150px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref18 = process.env.NODE_ENV === "production" ? {
  name: "clzani-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;label:Lesson;"
} : {
  name: "clzani-Lesson",
  styles: "display:flex;flex-direction:column;height:100%;justify-content:center;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref19 = process.env.NODE_ENV === "production" ? {
  name: "1ar2bh7-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;label:Lesson;"
} : {
  name: "1ar2bh7-Lesson",
  styles: "margin-bottom:30px;display:flex;align-items:center;font-size:36px;font-weight:600;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref20 = process.env.NODE_ENV === "production" ? {
  name: "1lk691v-Lesson",
  styles: "margin-right:15px;label:Lesson;"
} : {
  name: "1lk691v-Lesson",
  styles: "margin-right:15px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref21 = process.env.NODE_ENV === "production" ? {
  name: "bdigt8-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:36px;flex-wrap:wrap;div{padding:15px 0;}label:Lesson;"
} : {
  name: "bdigt8-Lesson",
  styles: "display:flex;align-items:center;justify-content:flex-start;font-size:36px;flex-wrap:wrap;div{padding:15px 0;}label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref22 = process.env.NODE_ENV === "production" ? {
  name: "504zsf-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;label:Lesson;"
} : {
  name: "504zsf-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref23 = process.env.NODE_ENV === "production" ? {
  name: "1wnzpmg-Lesson",
  styles: "border-radius:50%;width:72px;height:72px;margin-right:15px;label:Lesson;"
} : {
  name: "1wnzpmg-Lesson",
  styles: "border-radius:50%;width:72px;height:72px;margin-right:15px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref24 = process.env.NODE_ENV === "production" ? {
  name: "504zsf-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;label:Lesson;"
} : {
  name: "504zsf-Lesson",
  styles: "margin-right:36px;display:flex;align-items:center;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref25 = process.env.NODE_ENV === "production" ? {
  name: "1fr91n9-Lesson",
  styles: "margin-right:10px;label:Lesson;"
} : {
  name: "1fr91n9-Lesson",
  styles: "margin-right:10px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref26 = process.env.NODE_ENV === "production" ? {
  name: "vudsmv-Lesson",
  styles: "display:flex;align-items:center;label:Lesson;"
} : {
  name: "vudsmv-Lesson",
  styles: "display:flex;align-items:center;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var _ref27 = process.env.NODE_ENV === "production" ? {
  name: "1fr91n9-Lesson",
  styles: "margin-right:10px;label:Lesson;"
} : {
  name: "1fr91n9-Lesson",
  styles: "margin-right:10px;label:Lesson;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function Lesson(_ref15) {
  var lesson = _ref15.lesson,
      parsedReq = _ref15.parsedReq,
      palette = _ref15.palette;
  var vibrant = "rgba(".concat(palette.Vibrant._rgb.toString(), ", 1)");
  var darkVibrant = "rgba(".concat(palette.DarkVibrant._rgb.toString(), ", 1)");
  var images = parsedReq.images;
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      padding: 50,
      display: 'flex',
      // flexDirection: 'column',
      alignItems: 'center',
      // justifyContent: 'center',
      // textAlign: 'center',
      width: '100%',
      height: '100%',
      borderTop: "25px solid ".concat(vibrant)
    }, "label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, (0, _core.jsx)("div", {
    css: _ref16
  }, (0, _core.jsx)("img", {
    // tag image
    src: lesson.image_256_url,
    css: _ref17
  })), (0, _core.jsx)("div", {
    // right column holder
    css: _ref18
  }, (0, _core.jsx)("div", {
    css: _ref19
  }, (0, _core.jsx)("img", {
    src: images[0],
    width: "72px",
    css: _ref20
  }), ' ', "egghead.io"), (0, _core.jsx)("h1", {
    // title
    css:
    /*#__PURE__*/
    (0, _css2["default"])({
      fontSize: lesson.title.length > 30 ? lesson.title.length > 45 ? lesson.title.length > 55 ? 52 : 56 : 62 : 66,
      lineHeight: 1.3,
      padding: 0,
      marginBottom: 30
    }, "label:Lesson;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, lesson.title), (0, _core.jsx)("div", {
    // byline holder
    css: _ref21
  }, (0, _core.jsx)("div", {
    // instructor
    css: _ref22
  }, (0, _core.jsx)("img", {
    src: lesson.instructor.avatar_64_url,
    css: _ref23
  }), ' ', lesson.instructor.full_name), lesson.free_forever && (0, _core.jsx)("div", {
    // community resource
    css: _ref24
  }, (0, _core.jsx)("svg", {
    css: _ref25,
    xmlns: "http://www.w3.org/2000/svg",
    width: "42",
    height: "38",
    viewBox: "0 0 42 38"
  }, (0, _core.jsx)("g", {
    fill: "#FFB430"
  }, (0, _core.jsx)("path", {
    d: "M38.64,15.54 L32.34,15.54 C31.052,12.488 28,10.36 24.472,10.36 C19.768,10.36 15.932,14.168 15.932,18.844 C15.932,23.52 19.768,27.328 24.472,27.328 C28,27.328 31.024,25.2 32.312,22.176 L38.64,22.176 C40.488,22.176 42,20.692 42,18.844 C42,17.052 40.488,15.54 38.64,15.54 Z M24.472,22.148 C22.652,22.148 21.168,20.692 21.168,18.872 C21.168,17.052 22.652,15.596 24.472,15.596 C26.292,15.596 27.776,17.052 27.776,18.872 C27.776,20.692 26.292,22.148 24.472,22.148 Z"
  }), (0, _core.jsx)("path", {
    d: "M37.912,31.192 L32.984,26.656 C32.62,26.32 32.088,26.348 31.752,26.684 C29.596,28.728 26.6,29.932 23.324,29.652 C18.032,29.232 13.776,24.92 13.412,19.656 C12.964,13.384 17.976,8.12 24.22,8.12 C26.964,8.12 29.456,9.128 31.388,10.808 C31.724,11.116 32.256,11.116 32.592,10.808 L37.604,6.216 C37.8,6.02 37.828,5.712 37.632,5.516 C33.964,1.876 28.84,-0.28 23.212,0.028 C14.364,0.476 7.056,7.056 5.516,15.54 L3.36,15.54 C1.512,15.54 0,17.052 0,18.9 C0,20.748 1.512,22.26 3.36,22.26 L5.516,22.26 C7.112,31.08 14.868,37.8 24.22,37.8 C29.624,37.8 34.468,35.56 37.94,31.976 C38.136,31.752 38.136,31.416 37.912,31.192 Z"
  }))), ' ', "Community Resource"), (0, _core.jsx)("div", {
    // duration
    css: _ref26
  }, (0, _core.jsx)("svg", {
    css: _ref27,
    xmlns: "http://www.w3.org/2000/svg",
    width: "36",
    height: "36",
    viewBox: "0 0 36 36"
  }, (0, _core.jsx)("path", {
    fill: "#A1A7BC",
    d: "M18,0 C8.0588745,0 0,8.0588745 0,18 C0,27.9411255 8.0588745,36 18,36 C27.9411255,36 36,27.9411255 36,18 C36,13.2261032 34.1035769,8.64773275 30.7279221,5.27207794 C27.3522672,1.89642313 22.7738968,0 18,0 Z M18,32.4 C10.0470996,32.4 3.6,25.9529004 3.6,18 C3.6,10.0470996 10.0470996,3.6 18,3.6 C25.9529004,3.6 32.4,10.0470996 32.4,18 C32.4,21.8191175 30.8828615,25.4818138 28.1823376,28.1823376 C25.4818138,30.8828615 21.8191175,32.4 18,32.4 Z M23.58,19.134 L19.8,16.956 L19.8,9 C19.8,8.00588745 18.9941125,7.2 18,7.2 C17.0058875,7.2 16.2,8.00588745 16.2,9 L16.2,18.216 C16.2106581,18.3400236 16.2410401,18.4615518 16.29,18.576 C16.3270691,18.682795 16.375338,18.7853664 16.434,18.882 C16.4832556,18.9843112 16.5436188,19.0808923 16.614,19.17 L16.902,19.404 L17.064,19.566 L21.744,22.266 C22.0183252,22.4214848 22.3286825,22.5021777 22.644,22.5000445 C23.4637073,22.505731 24.1837581,21.9569026 24.3954984,21.1649942 C24.6072386,20.3730858 24.2571828,19.5381326 23.544,19.134 L23.58,19.134 Z"
  })), ' ', (0, _convertTime["default"])(lesson.duration))))));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(parsedReq) {
    var markup, podcast, palette, resource, lesson, tagPalette;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'store' ? 6 : _context.t0 === 'podcast' ? 8 : _context.t0 === 'series' ? 17 : _context.t0 === 'lesson' ? 22 : 30;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 31);

          case 6:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Store, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 31);

          case 8:
            _context.next = 10;
            return _axios["default"].get("https://egghead.io/api/v1/podcasts/".concat(parsedReq.text)).then(function (_ref28) {
              var data = _ref28.data;
              return data;
            });

          case 10:
            podcast = _context.sent;
            _context.next = 13;
            return Vibrant.from(podcast.image_url).getPalette().then(function (palette) {
              return palette;
            });

          case 13:
            palette = _context.sent;
            console.log(palette);
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Podcast, {
              podcast: podcast,
              palette: palette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 31);

          case 17:
            _context.next = 19;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref29) {
              var data = _ref29.data;
              return data;
            });

          case 19:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 31);

          case 22:
            _context.next = 24;
            return _axios["default"].get("https://egghead.io/api/v1/lessons/".concat(parsedReq.text)).then(function (_ref30) {
              var data = _ref30.data;
              return data;
            });

          case 24:
            lesson = _context.sent;
            _context.next = 27;
            return Vibrant.from(lesson.image_256_url).getPalette().then(function (palette) {
              return palette;
            });

          case 27:
            tagPalette = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(Lesson, {
              lesson: lesson,
              palette: tagPalette,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 31);

          case 30:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 31:
            console.log(markup);
            return _context.abrupt("return", markup);

          case 33:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}