"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

import { jsx as ___EmotionJSX } from "@emotion/core";

/** @jsx jsx */
var reset =
/*#__PURE__*/
process.env.NODE_ENV === "production" ? {
  name: "p8w4k1-reset",
  styles: ".gatsby-resp-image-wrapper{margin-left:0 !important;}h3{font-size:1.4rem;line-height:1.3;}}h3{margin-bottom:0.5em;margin-top:1.2em;}mark{background:#3C55E4;color:white;}.twitter-tweet{padding:10px 0 30px;}.active{color:#3C55E4;}form{margin:0;}ul,ol{list-style-position:inside;margin-left:0;li{margin-left:0;}}*,*:before,*:after{box-sizing:inherit;}html,body{font-style:normal;padding:0;margin:0;}html{text-rendering:optimizeLegibility;overflow-x:hidden;overflow-y:scroll !important;box-sizing:border-box;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0);height:100%;}body{background-color:white;height:100%}::selection{}a{color:#3C55E4;transition:all 0.3s ease-in-out;text-decoration:none;&:hover,&:focus{color:#3C55E4;}}a:not([href]):not([tabindex]){color:inherit;text-decoration:none;&:hover,&:focus{color:inherit;text-decoration:none;}&:focus{outline:0;}}blockquote{border-left:5px solid #3C55E4;padding-left:1rem !important;margin-left:0 !important;margin-right:0 !important;font-style:italic;p{line-height:1.3 !important;}}[tabindex='-1']:focus{outline:none !important;}pre{margin-top:0;margin-bottom:1rem;overflow:auto;white-space:pre;padding:1em;}code{padding:2px 4px;}figure{margin:0 0 1rem 0;img{vertical-align:middle;}[role='button']{cursor:pointer;}a,area,button,[role='button'],input,label,select,summary,textarea{touch-action:manipulation;}table{border-collapse:collapse;background-color:white;}caption{padding-top:1.5rem;padding-bottom:1.5rem;text-align:center;caption-side:bottom;}th{text-align:left;}label{display:inline-block;margin-bottom:0.5rem;}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color;}input,button,select,textarea{line-height:inherit;}input[type='date'],input[type='time'],input[type='datetime-local'],input[type='month']{-webkit-appearance:listbox;}textarea{resize:vertical;}fieldset{min-width:0;padding:0;margin:0;border:0;}legend{display:block;width:100%;padding:0;margin-bottom:0.5rem;font-size:1.5rem;line-height:inherit;}input[type='search']{-webkit-appearance:none;}output{display:inline-block;}svg:not(:root){overflow:hidden;vertical-align:middle;}[hidden]{display:none !important;}label:reset;"
} : {
  name: "p8w4k1-reset",
  styles: ".gatsby-resp-image-wrapper{margin-left:0 !important;}h3{font-size:1.4rem;line-height:1.3;}}h3{margin-bottom:0.5em;margin-top:1.2em;}mark{background:#3C55E4;color:white;}.twitter-tweet{padding:10px 0 30px;}.active{color:#3C55E4;}form{margin:0;}ul,ol{list-style-position:inside;margin-left:0;li{margin-left:0;}}*,*:before,*:after{box-sizing:inherit;}html,body{font-style:normal;padding:0;margin:0;}html{text-rendering:optimizeLegibility;overflow-x:hidden;overflow-y:scroll !important;box-sizing:border-box;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0);height:100%;}body{background-color:white;height:100%}::selection{}a{color:#3C55E4;transition:all 0.3s ease-in-out;text-decoration:none;&:hover,&:focus{color:#3C55E4;}}a:not([href]):not([tabindex]){color:inherit;text-decoration:none;&:hover,&:focus{color:inherit;text-decoration:none;}&:focus{outline:0;}}blockquote{border-left:5px solid #3C55E4;padding-left:1rem !important;margin-left:0 !important;margin-right:0 !important;font-style:italic;p{line-height:1.3 !important;}}[tabindex='-1']:focus{outline:none !important;}pre{margin-top:0;margin-bottom:1rem;overflow:auto;white-space:pre;padding:1em;}code{padding:2px 4px;}figure{margin:0 0 1rem 0;img{vertical-align:middle;}[role='button']{cursor:pointer;}a,area,button,[role='button'],input,label,select,summary,textarea{touch-action:manipulation;}table{border-collapse:collapse;background-color:white;}caption{padding-top:1.5rem;padding-bottom:1.5rem;text-align:center;caption-side:bottom;}th{text-align:left;}label{display:inline-block;margin-bottom:0.5rem;}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color;}input,button,select,textarea{line-height:inherit;}input[type='date'],input[type='time'],input[type='datetime-local'],input[type='month']{-webkit-appearance:listbox;}textarea{resize:vertical;}fieldset{min-width:0;padding:0;margin:0;border:0;}legend{display:block;width:100%;padding:0;margin-bottom:0.5rem;font-size:1.5rem;line-height:inherit;}input[type='search']{-webkit-appearance:none;}output{display:inline-block;}svg:not(:root){overflow:hidden;vertical-align:middle;}[hidden]{display:none !important;}label:reset;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1pQiIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4uZ2F0c2J5LXJlc3AtaW1hZ2Utd3JhcHBlciB7XG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS4zO1xufVxufVxuaDMge1xuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgbWFyZ2luLXRvcDogMS4yZW07XG59XG5cbi8qIEFsZ29saWEgaGlnaGxpZ2h0IGNvbG9yICovXG5tYXJrIHtiYWNrZ3JvdW5kOiAjM0M1NUU0OyBjb2xvcjogd2hpdGU7IH1cblxuLnR3aXR0ZXItdHdlZXQge1xuICBwYWRkaW5nOiAxMHB4IDAgMzBweDtcbn1cbi5hY3RpdmUge1xuICBjb2xvcjogIzNDNTVFNDtcbn1cbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIHVsLCBvbCB7XG4gICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IFxuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbCAhaW1wb3J0YW50O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGhlaWdodDogMTAwJVxuICB9XG4gIDo6c2VsZWN0aW9uIHtcbiAgfVxuICBhIHtcbiAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzIHtcbiAgICAgIGNvbG9yOiAjM0M1NUU0O1xuICAgIH1cbiAgICBcbiAgfVxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbiAgfVxuICBibG9ja3F1b3RlIHtcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzQzU1RTQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcCB7XG4gICAgICBsaW5lLWhlaWdodDogMS4zICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG4gIFt0YWJpbmRleD0nLTEnXTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG4gIHByZSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgcGFkZGluZzogMWVtO1xuICB9XG4gIGNvZGUgeyBwYWRkaW5nOiAycHggNHB4OyB9XG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICBpbWcge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW3JvbGU9J2J1dHRvbiddIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgYSxcbiAgYXJlYSxcbiAgYnV0dG9uLFxuICBbcm9sZT0nYnV0dG9uJ10sXG4gIGlucHV0LFxuICBsYWJlbCxcbiAgc2VsZWN0LFxuICBzdW1tYXJ5LFxuICB0ZXh0YXJlYSB7XG4gICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIH1cbiAgdGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgY2FwdGlvbiB7XG4gICAgcGFkZGluZy10b3A6IDEuNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjYXB0aW9uLXNpZGU6IGJvdHRvbTtcbiAgfVxuICB0aCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxuICBidXR0b246Zm9jdXMge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQ7XG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xuICB9XG4gIGlucHV0LFxuICBidXR0b24sXG4gIHNlbGVjdCxcbiAgdGV4dGFyZWEge1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICB9XG4gIGlucHV0W3R5cGU9J2RhdGUnXSxcbiAgaW5wdXRbdHlwZT0ndGltZSddLFxuICBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLFxuICBpbnB1dFt0eXBlPSdtb250aCddIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XG4gIH1cbiAgdGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG4gIH1cbiAgZmllbGRzZXQge1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgbGVnZW5kIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdzZWFyY2gnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICB9XG4gIG91dHB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW2hpZGRlbl0ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoe3Jlc291cmNlLCBwYXJzZWRSZXF9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7dGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICBmb250RmFtaWx5OiAnSGVsdmV0aWNhLCBBcmlhbCwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzMwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbWFnZXMubWFwKGltYWdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzVweCcsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNzVweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlfVxuICAgICAgICAgICAgICAgIGFsdD17dGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogJzE1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc4NnB4JyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICc2NXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "11trg96-InstructorGuide",
  styles: "display:flex;flex-direction:column;font-family:Helvetica, Arial, Sans-Serif;padding:30px;height:100%;label:InstructorGuide;"
} : {
  name: "11trg96-InstructorGuide",
  styles: "display:flex;flex-direction:column;font-family:Helvetica, Arial, Sans-Serif;padding:30px;height:100%;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdOUSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4uZ2F0c2J5LXJlc3AtaW1hZ2Utd3JhcHBlciB7XG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS4zO1xufVxufVxuaDMge1xuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgbWFyZ2luLXRvcDogMS4yZW07XG59XG5cbi8qIEFsZ29saWEgaGlnaGxpZ2h0IGNvbG9yICovXG5tYXJrIHtiYWNrZ3JvdW5kOiAjM0M1NUU0OyBjb2xvcjogd2hpdGU7IH1cblxuLnR3aXR0ZXItdHdlZXQge1xuICBwYWRkaW5nOiAxMHB4IDAgMzBweDtcbn1cbi5hY3RpdmUge1xuICBjb2xvcjogIzNDNTVFNDtcbn1cbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIHVsLCBvbCB7XG4gICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IFxuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbCAhaW1wb3J0YW50O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGhlaWdodDogMTAwJVxuICB9XG4gIDo6c2VsZWN0aW9uIHtcbiAgfVxuICBhIHtcbiAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzIHtcbiAgICAgIGNvbG9yOiAjM0M1NUU0O1xuICAgIH1cbiAgICBcbiAgfVxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbiAgfVxuICBibG9ja3F1b3RlIHtcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzQzU1RTQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcCB7XG4gICAgICBsaW5lLWhlaWdodDogMS4zICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG4gIFt0YWJpbmRleD0nLTEnXTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG4gIHByZSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgcGFkZGluZzogMWVtO1xuICB9XG4gIGNvZGUgeyBwYWRkaW5nOiAycHggNHB4OyB9XG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICBpbWcge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW3JvbGU9J2J1dHRvbiddIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgYSxcbiAgYXJlYSxcbiAgYnV0dG9uLFxuICBbcm9sZT0nYnV0dG9uJ10sXG4gIGlucHV0LFxuICBsYWJlbCxcbiAgc2VsZWN0LFxuICBzdW1tYXJ5LFxuICB0ZXh0YXJlYSB7XG4gICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIH1cbiAgdGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgY2FwdGlvbiB7XG4gICAgcGFkZGluZy10b3A6IDEuNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjYXB0aW9uLXNpZGU6IGJvdHRvbTtcbiAgfVxuICB0aCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxuICBidXR0b246Zm9jdXMge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQ7XG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xuICB9XG4gIGlucHV0LFxuICBidXR0b24sXG4gIHNlbGVjdCxcbiAgdGV4dGFyZWEge1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICB9XG4gIGlucHV0W3R5cGU9J2RhdGUnXSxcbiAgaW5wdXRbdHlwZT0ndGltZSddLFxuICBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLFxuICBpbnB1dFt0eXBlPSdtb250aCddIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XG4gIH1cbiAgdGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG4gIH1cbiAgZmllbGRzZXQge1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgbGVnZW5kIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdzZWFyY2gnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICB9XG4gIG91dHB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW2hpZGRlbl0ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoe3Jlc291cmNlLCBwYXJzZWRSZXF9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7dGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICBmb250RmFtaWx5OiAnSGVsdmV0aWNhLCBBcmlhbCwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzMwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbWFnZXMubWFwKGltYWdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzVweCcsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNzVweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlfVxuICAgICAgICAgICAgICAgIGFsdD17dGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogJzE1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc4NnB4JyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICc2NXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "17bxtxa-InstructorGuide",
  styles: "display:flex;label:InstructorGuide;"
} : {
  name: "17bxtxa-InstructorGuide",
  styles: "display:flex;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlOVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4uZ2F0c2J5LXJlc3AtaW1hZ2Utd3JhcHBlciB7XG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS4zO1xufVxufVxuaDMge1xuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgbWFyZ2luLXRvcDogMS4yZW07XG59XG5cbi8qIEFsZ29saWEgaGlnaGxpZ2h0IGNvbG9yICovXG5tYXJrIHtiYWNrZ3JvdW5kOiAjM0M1NUU0OyBjb2xvcjogd2hpdGU7IH1cblxuLnR3aXR0ZXItdHdlZXQge1xuICBwYWRkaW5nOiAxMHB4IDAgMzBweDtcbn1cbi5hY3RpdmUge1xuICBjb2xvcjogIzNDNTVFNDtcbn1cbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIHVsLCBvbCB7XG4gICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IFxuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbCAhaW1wb3J0YW50O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGhlaWdodDogMTAwJVxuICB9XG4gIDo6c2VsZWN0aW9uIHtcbiAgfVxuICBhIHtcbiAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzIHtcbiAgICAgIGNvbG9yOiAjM0M1NUU0O1xuICAgIH1cbiAgICBcbiAgfVxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbiAgfVxuICBibG9ja3F1b3RlIHtcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzQzU1RTQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcCB7XG4gICAgICBsaW5lLWhlaWdodDogMS4zICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG4gIFt0YWJpbmRleD0nLTEnXTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG4gIHByZSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgcGFkZGluZzogMWVtO1xuICB9XG4gIGNvZGUgeyBwYWRkaW5nOiAycHggNHB4OyB9XG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICBpbWcge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW3JvbGU9J2J1dHRvbiddIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgYSxcbiAgYXJlYSxcbiAgYnV0dG9uLFxuICBbcm9sZT0nYnV0dG9uJ10sXG4gIGlucHV0LFxuICBsYWJlbCxcbiAgc2VsZWN0LFxuICBzdW1tYXJ5LFxuICB0ZXh0YXJlYSB7XG4gICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIH1cbiAgdGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgY2FwdGlvbiB7XG4gICAgcGFkZGluZy10b3A6IDEuNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjYXB0aW9uLXNpZGU6IGJvdHRvbTtcbiAgfVxuICB0aCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxuICBidXR0b246Zm9jdXMge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQ7XG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xuICB9XG4gIGlucHV0LFxuICBidXR0b24sXG4gIHNlbGVjdCxcbiAgdGV4dGFyZWEge1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICB9XG4gIGlucHV0W3R5cGU9J2RhdGUnXSxcbiAgaW5wdXRbdHlwZT0ndGltZSddLFxuICBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLFxuICBpbnB1dFt0eXBlPSdtb250aCddIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XG4gIH1cbiAgdGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG4gIH1cbiAgZmllbGRzZXQge1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgbGVnZW5kIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdzZWFyY2gnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICB9XG4gIG91dHB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW2hpZGRlbl0ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoe3Jlc291cmNlLCBwYXJzZWRSZXF9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7dGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICBmb250RmFtaWx5OiAnSGVsdmV0aWNhLCBBcmlhbCwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzMwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbWFnZXMubWFwKGltYWdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzVweCcsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNzVweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlfVxuICAgICAgICAgICAgICAgIGFsdD17dGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogJzE1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc4NnB4JyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICc2NXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "vgmpb0",
  styles: "width:75px;max-width:100%;max-height:75px;"
} : {
  name: "vgmpb0",
  styles: "width:75px;max-width:100%;max-height:75px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdPZ0IiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyVG9TdGF0aWNNYXJrdXB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQge2pzeCwgY3NzLCBHbG9iYWx9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuLmdhdHNieS1yZXNwLWltYWdlLXdyYXBwZXIge1xuICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xufVxuaDMge1xuICBmb250LXNpemU6IDEuNHJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbn1cbn1cbmgzIHtcbiAgbWFyZ2luLWJvdHRvbTogMC41ZW07XG4gIG1hcmdpbi10b3A6IDEuMmVtO1xufVxuXG4vKiBBbGdvbGlhIGhpZ2hsaWdodCBjb2xvciAqL1xubWFyayB7YmFja2dyb3VuZDogIzNDNTVFNDsgY29sb3I6IHdoaXRlOyB9XG5cbi50d2l0dGVyLXR3ZWV0IHtcbiAgcGFkZGluZzogMTBweCAwIDMwcHg7XG59XG4uYWN0aXZlIHtcbiAgY29sb3I6ICMzQzU1RTQ7XG59XG4gIGZvcm0ge1xuICAgIG1hcmdpbjogMDtcbiAgfVxuICB1bCwgb2wge1xuICAgIGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBsaSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICB9XG4gIH1cbiAgKixcbiAgKjpiZWZvcmUsXG4gICo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XG4gIH1cbiAgaHRtbCxcbiAgYm9keSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwOyBcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICBvdmVyZmxvdy15OiBzY3JvbGwgIWltcG9ydGFudDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogc2Nyb2xsYmFyO1xuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgICAvL3Njcm9sbC1iZWhhdmlvcjogc21vb3RoO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBoZWlnaHQ6IDEwMCVcbiAgfVxuICA6OnNlbGVjdGlvbiB7XG4gIH1cbiAgYSB7XG4gICAgY29sb3I6ICMzQzU1RTQ7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB9XG4gICAgXG4gIH1cbiAgYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSkge1xuICAgIGNvbG9yOiBpbmhlcml0O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAmOmhvdmVyLFxuICAgICY6Zm9jdXMge1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgfVxuICAgICY6Zm9jdXMge1xuICAgICAgb3V0bGluZTogMDtcbiAgICB9XG4gIH1cbiAgYmxvY2txdW90ZSB7XG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCAjM0M1NUU0O1xuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIHAge1xuICAgICAgbGluZS1oZWlnaHQ6IDEuMyAhaW1wb3J0YW50O1xuICAgIH1cbiAgfVxuICBbdGFiaW5kZXg9Jy0xJ106Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuICBwcmUge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICB3aGl0ZS1zcGFjZTogcHJlO1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgfVxuICBjb2RlIHsgcGFkZGluZzogMnB4IDRweDsgfVxuICBmaWd1cmUge1xuICAgIG1hcmdpbjogMCAwIDFyZW0gMDtcbiAgaW1nIHtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIFtyb2xlPSdidXR0b24nXSB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIGEsXG4gIGFyZWEsXG4gIGJ1dHRvbixcbiAgW3JvbGU9J2J1dHRvbiddLFxuICBpbnB1dCxcbiAgbGFiZWwsXG4gIHNlbGVjdCxcbiAgc3VtbWFyeSxcbiAgdGV4dGFyZWEge1xuICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICB9XG4gIHRhYmxlIHtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGNhcHRpb24ge1xuICAgIHBhZGRpbmctdG9wOiAxLjVyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgY2FwdGlvbi1zaWRlOiBib3R0b207XG4gIH1cbiAgdGgge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gIH1cbiAgbGFiZWwge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gIH1cbiAgYnV0dG9uOmZvY3VzIHtcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkO1xuICAgIG91dGxpbmU6IDVweCBhdXRvIC13ZWJraXQtZm9jdXMtcmluZy1jb2xvcjtcbiAgfVxuICBpbnB1dCxcbiAgYnV0dG9uLFxuICBzZWxlY3QsXG4gIHRleHRhcmVhIHtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdkYXRlJ10sXG4gIGlucHV0W3R5cGU9J3RpbWUnXSxcbiAgaW5wdXRbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSxcbiAgaW5wdXRbdHlwZT0nbW9udGgnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBsaXN0Ym94O1xuICB9XG4gIHRleHRhcmVhIHtcbiAgICByZXNpemU6IHZlcnRpY2FsO1xuICB9XG4gIGZpZWxkc2V0IHtcbiAgICBtaW4td2lkdGg6IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgYm9yZGVyOiAwO1xuICB9XG4gIGxlZ2VuZCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gIH1cbiAgaW5wdXRbdHlwZT0nc2VhcmNoJ10ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxuICBvdXRwdXQge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuICBzdmc6bm90KDpyb290KSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIFtoaWRkZW5dIHtcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHtyZXNvdXJjZSwgcGFyc2VkUmVxfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+LS0tLS17cGFyc2VkUmVxLnRleHR9PC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBJbnN0cnVjdG9yR3VpZGUoe3BhcnNlZFJlcX0pIHtcbiAgY29uc3Qge3RleHQsIHRoZW1lLCBtZCwgZm9udFNpemUsIGltYWdlcywgd2lkdGhzLCBoZWlnaHRzfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZygnUEFSU0VEIFJFUVVFU1QnLCBwYXJzZWRSZXEpXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3Jlc2V0fSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgZm9udEZhbWlseTogJ0hlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWYnLFxuICAgICAgICAgIHBhZGRpbmc6ICczMHB4JyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7aW1hZ2VzLm1hcChpbWFnZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogJzc1cHgnLFxuICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzc1cHgnLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgc3JjPXtpbWFnZX1cbiAgICAgICAgICAgICAgICBhbHQ9e3RleHR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICcxNXB4JyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgZWdnaGVhZCBpbnN0cnVjdG9yIGd1aWRlXG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnODZweCcsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnNjVweCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEh0bWwocGFyc2VkUmVxKSB7XG4gIGxldCBtYXJrdXBcblxuICBjb25zb2xlLmxvZyhwYXJzZWRSZXEpXG4gIHN3aXRjaCAocGFyc2VkUmVxLnJlc291cmNlVHlwZSkge1xuICAgIGNhc2UgJ2luc3RydWN0b3ItZ3VpZGUnOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3Nlcmllcyc6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWApXG4gICAgICAgIC50aGVuKCh7ZGF0YX0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

var _ref6 = process.env.NODE_ENV === "production" ? {
  name: "yl2qp5-InstructorGuide",
  styles: "padding-left:15px;label:InstructorGuide;"
} : {
  name: "yl2qp5-InstructorGuide",
  styles: "padding-left:15px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJPWSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4uZ2F0c2J5LXJlc3AtaW1hZ2Utd3JhcHBlciB7XG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS4zO1xufVxufVxuaDMge1xuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgbWFyZ2luLXRvcDogMS4yZW07XG59XG5cbi8qIEFsZ29saWEgaGlnaGxpZ2h0IGNvbG9yICovXG5tYXJrIHtiYWNrZ3JvdW5kOiAjM0M1NUU0OyBjb2xvcjogd2hpdGU7IH1cblxuLnR3aXR0ZXItdHdlZXQge1xuICBwYWRkaW5nOiAxMHB4IDAgMzBweDtcbn1cbi5hY3RpdmUge1xuICBjb2xvcjogIzNDNTVFNDtcbn1cbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIHVsLCBvbCB7XG4gICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IFxuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbCAhaW1wb3J0YW50O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGhlaWdodDogMTAwJVxuICB9XG4gIDo6c2VsZWN0aW9uIHtcbiAgfVxuICBhIHtcbiAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzIHtcbiAgICAgIGNvbG9yOiAjM0M1NUU0O1xuICAgIH1cbiAgICBcbiAgfVxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbiAgfVxuICBibG9ja3F1b3RlIHtcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzQzU1RTQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcCB7XG4gICAgICBsaW5lLWhlaWdodDogMS4zICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG4gIFt0YWJpbmRleD0nLTEnXTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG4gIHByZSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgcGFkZGluZzogMWVtO1xuICB9XG4gIGNvZGUgeyBwYWRkaW5nOiAycHggNHB4OyB9XG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICBpbWcge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW3JvbGU9J2J1dHRvbiddIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgYSxcbiAgYXJlYSxcbiAgYnV0dG9uLFxuICBbcm9sZT0nYnV0dG9uJ10sXG4gIGlucHV0LFxuICBsYWJlbCxcbiAgc2VsZWN0LFxuICBzdW1tYXJ5LFxuICB0ZXh0YXJlYSB7XG4gICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIH1cbiAgdGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgY2FwdGlvbiB7XG4gICAgcGFkZGluZy10b3A6IDEuNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjYXB0aW9uLXNpZGU6IGJvdHRvbTtcbiAgfVxuICB0aCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxuICBidXR0b246Zm9jdXMge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQ7XG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xuICB9XG4gIGlucHV0LFxuICBidXR0b24sXG4gIHNlbGVjdCxcbiAgdGV4dGFyZWEge1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICB9XG4gIGlucHV0W3R5cGU9J2RhdGUnXSxcbiAgaW5wdXRbdHlwZT0ndGltZSddLFxuICBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLFxuICBpbnB1dFt0eXBlPSdtb250aCddIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XG4gIH1cbiAgdGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG4gIH1cbiAgZmllbGRzZXQge1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgbGVnZW5kIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdzZWFyY2gnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICB9XG4gIG91dHB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW2hpZGRlbl0ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoe3Jlc291cmNlLCBwYXJzZWRSZXF9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7dGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICBmb250RmFtaWx5OiAnSGVsdmV0aWNhLCBBcmlhbCwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzMwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbWFnZXMubWFwKGltYWdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzVweCcsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNzVweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlfVxuICAgICAgICAgICAgICAgIGFsdD17dGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogJzE1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc4NnB4JyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICc2NXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref7 = process.env.NODE_ENV === "production" ? {
  name: "1swz0mz-InstructorGuide",
  styles: "display:flex;align-items:center;justify-content:center;height:100%;font-size:86px;padding-bottom:65px;label:InstructorGuide;"
} : {
  name: "1swz0mz-InstructorGuide",
  styles: "display:flex;align-items:center;justify-content:center;height:100%;font-size:86px;padding-bottom:65px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9QVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJUb1N0YXRpY01hcmt1cH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcidcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7anN4LCBjc3MsIEdsb2JhbH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4uZ2F0c2J5LXJlc3AtaW1hZ2Utd3JhcHBlciB7XG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xuICBsaW5lLWhlaWdodDogMS4zO1xufVxufVxuaDMge1xuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgbWFyZ2luLXRvcDogMS4yZW07XG59XG5cbi8qIEFsZ29saWEgaGlnaGxpZ2h0IGNvbG9yICovXG5tYXJrIHtiYWNrZ3JvdW5kOiAjM0M1NUU0OyBjb2xvcjogd2hpdGU7IH1cblxuLnR3aXR0ZXItdHdlZXQge1xuICBwYWRkaW5nOiAxMHB4IDAgMzBweDtcbn1cbi5hY3RpdmUge1xuICBjb2xvcjogIzNDNTVFNDtcbn1cbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIHVsLCBvbCB7XG4gICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgfVxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IFxuICB9XG4gIGh0bWwge1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbCAhaW1wb3J0YW50O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGhlaWdodDogMTAwJVxuICB9XG4gIDo6c2VsZWN0aW9uIHtcbiAgfVxuICBhIHtcbiAgICBjb2xvcjogIzNDNTVFNDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzIHtcbiAgICAgIGNvbG9yOiAjM0M1NUU0O1xuICAgIH1cbiAgICBcbiAgfVxuICBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbiAgfVxuICBibG9ja3F1b3RlIHtcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzQzU1RTQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcCB7XG4gICAgICBsaW5lLWhlaWdodDogMS4zICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG4gIFt0YWJpbmRleD0nLTEnXTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG4gIHByZSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgcGFkZGluZzogMWVtO1xuICB9XG4gIGNvZGUgeyBwYWRkaW5nOiAycHggNHB4OyB9XG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICBpbWcge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW3JvbGU9J2J1dHRvbiddIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgYSxcbiAgYXJlYSxcbiAgYnV0dG9uLFxuICBbcm9sZT0nYnV0dG9uJ10sXG4gIGlucHV0LFxuICBsYWJlbCxcbiAgc2VsZWN0LFxuICBzdW1tYXJ5LFxuICB0ZXh0YXJlYSB7XG4gICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIH1cbiAgdGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIH1cbiAgY2FwdGlvbiB7XG4gICAgcGFkZGluZy10b3A6IDEuNXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjYXB0aW9uLXNpZGU6IGJvdHRvbTtcbiAgfVxuICB0aCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgfVxuICBidXR0b246Zm9jdXMge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQ7XG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xuICB9XG4gIGlucHV0LFxuICBidXR0b24sXG4gIHNlbGVjdCxcbiAgdGV4dGFyZWEge1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICB9XG4gIGlucHV0W3R5cGU9J2RhdGUnXSxcbiAgaW5wdXRbdHlwZT0ndGltZSddLFxuICBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLFxuICBpbnB1dFt0eXBlPSdtb250aCddIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XG4gIH1cbiAgdGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG4gIH1cbiAgZmllbGRzZXQge1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgbGVnZW5kIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgfVxuICBpbnB1dFt0eXBlPSdzZWFyY2gnXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICB9XG4gIG91dHB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgW2hpZGRlbl0ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoe3Jlc291cmNlLCBwYXJzZWRSZXF9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7cGFyc2VkUmVxfSkge1xuICBjb25zdCB7dGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHN9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKCdQQVJTRUQgUkVRVUVTVCcsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICBmb250RmFtaWx5OiAnSGVsdmV0aWNhLCBBcmlhbCwgU2Fucy1TZXJpZicsXG4gICAgICAgICAgcGFkZGluZzogJzMwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbWFnZXMubWFwKGltYWdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzVweCcsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNzVweCcsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlfVxuICAgICAgICAgICAgICAgIGFsdD17dGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogJzE1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZm9udFNpemU6ICc4NnB4JyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICc2NXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSAnaW5zdHJ1Y3Rvci1ndWlkZSc6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8SW5zdHJ1Y3Rvckd1aWRlIHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VyaWVzJzpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YClcbiAgICAgICAgLnRoZW4oKHtkYXRhfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cCg8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      widths = parsedReq.widths,
      heights = parsedReq.heights;
  console.log('PARSED REQUEST', parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("div", {
    css: _ref4
  }, images.map(function (image) {
    return (0, _core.jsx)("img", {
      css: _ref5,
      src: image,
      alt: text
    });
  }), (0, _core.jsx)("h1", {
    css: _ref6
  }, "egghead instructor guide")), (0, _core.jsx)("div", {
    css: _ref7
  }, text)));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(parsedReq) {
    var markup, resource;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === 'instructor-guide' ? 4 : _context.t0 === 'series' ? 6 : 11;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 12);

          case 6:
            _context.next = 8;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref8) {
              var data = _ref8.data;
              return data;
            });

          case 8:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 12);

          case 11:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 12:
            console.log(markup);
            return _context.abrupt("return", markup);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}