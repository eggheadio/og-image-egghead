"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHtml = getHtml;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _axios = _interopRequireDefault(require("axios"));

var _core = require("@emotion/core");

import { jsx as ___EmotionJSX } from "@emotion/core";

/** @jsx jsx */
var reset =
/*#__PURE__*/
process.env.NODE_ENV === "production" ? {
  name: "1qnv2dq-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#21262f;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;}label:reset;"
} : {
  name: "1qnv2dq-reset",
  styles: "*,*:before,*:after{box-sizing:border-box;}html,body{font-style:normal;padding:0;margin:0;color:#21262f;}html{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;}body{background-color:white;}h1,h2,h3,h4,h5,h6{margin:0;line-height:1.1;}h2{font-size:4rem;}h3{font-size:2rem;}label:reset;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1pQiIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

function App(_ref) {
  var resource = _ref.resource,
      parsedReq = _ref.parsedReq;
  return (0, _core.jsx)("div", null, (0, _core.jsx)("h1", null, "-----", parsedReq.text));
}

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "jm2jnp-InstructorGuide",
  styles: "display:flex;flex-direction:column;font-family:Helvetica, Arial, Sans-Serif;padding:40px;height:100%;label:InstructorGuide;"
} : {
  name: "jm2jnp-InstructorGuide",
  styles: "display:flex;flex-direction:column;font-family:Helvetica, Arial, Sans-Serif;padding:40px;height:100%;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBEUSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "1ofwfpp-InstructorGuide",
  styles: "display:flex;align-items:center;flex-shrink:0;label:InstructorGuide;"
} : {
  name: "1ofwfpp-InstructorGuide",
  styles: "display:flex;align-items:center;flex-shrink:0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1FVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "p8zrlh-InstructorGuide",
  styles: "height:75px;label:InstructorGuide;"
} : {
  name: "p8zrlh-InstructorGuide",
  styles: "height:75px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBFWSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref6 = process.env.NODE_ENV === "production" ? {
  name: "yl2qp5-InstructorGuide",
  styles: "padding-left:15px;label:InstructorGuide;"
} : {
  name: "yl2qp5-InstructorGuide",
  styles: "padding-left:15px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStFWSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref7 = process.env.NODE_ENV === "production" ? {
  name: "wenx3o-InstructorGuide",
  styles: "display:flex;align-items:center;flex-grow:1;width:100%;label:InstructorGuide;"
} : {
  name: "wenx3o-InstructorGuide",
  styles: "display:flex;align-items:center;flex-grow:1;width:100%;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVGVSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref8 = process.env.NODE_ENV === "production" ? {
  name: "1q4r8fc-InstructorGuide",
  styles: "width:440px;flex-shrink:0;label:InstructorGuide;"
} : {
  name: "1q4r8fc-InstructorGuide",
  styles: "width:440px;flex-shrink:0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStGWSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref9 = process.env.NODE_ENV === "production" ? {
  name: "7208si-InstructorGuide",
  styles: "display:block;width:100%;label:InstructorGuide;"
} : {
  name: "7208si-InstructorGuide",
  styles: "display:block;width:100%;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFHYyIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref10 = process.env.NODE_ENV === "production" ? {
  name: "18qmacf-InstructorGuide",
  styles: "flex-grow:1;margin-left:40px;label:InstructorGuide;"
} : {
  name: "18qmacf-InstructorGuide",
  styles: "flex-grow:1;margin-left:40px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThHWSIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref11 = process.env.NODE_ENV === "production" ? {
  name: "16bz6l-InstructorGuide",
  styles: "font-size:64px;font-weight:600;line-height:1.1;margin:0;label:InstructorGuide;"
} : {
  name: "16bz6l-InstructorGuide",
  styles: "font-size:64px;font-weight:600;line-height:1.1;margin:0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9IYyIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref12 = process.env.NODE_ENV === "production" ? {
  name: "1a20280-InstructorGuide",
  styles: "margin-top:30px;display:flex;align-items:center;label:InstructorGuide;"
} : {
  name: "1a20280-InstructorGuide",
  styles: "margin-top:30px;display:flex;align-items:center;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThIYyIsImZpbGUiOiIuLi8uLi9zcmMvX2xpYi90ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsganN4LCBjc3MsIEdsb2JhbCB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCJcblxuY29uc3QgcmVzZXQgPSBjc3NgXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIGh0bWwsXG4gIGJvZHkge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogIzIxMjYyZjtcbiAgfVxuICBodG1sIHtcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG4gIGgxLFxuICBoMixcbiAgaDMsXG4gIGg0LFxuICBoNSxcbiAgaDYge1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICB9XG4gIGgyIHtcbiAgICBmb250LXNpemU6IDRyZW07XG4gIH1cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgfVxuYFxuXG5mdW5jdGlvbiBBcHAoeyByZXNvdXJjZSwgcGFyc2VkUmVxIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPi0tLS0te3BhcnNlZFJlcS50ZXh0fTwvaDE+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gSW5zdHJ1Y3Rvckd1aWRlKHsgcGFyc2VkUmVxIH0pIHtcbiAgY29uc3QgeyB0ZXh0LCB0aGVtZSwgbWQsIGZvbnRTaXplLCBpbWFnZXMsIHdpZHRocywgaGVpZ2h0cyB9ID0gcGFyc2VkUmVxXG4gIGNvbnNvbGUubG9nKFwiUEFSU0VEIFJFUVVFU1RcIiwgcGFyc2VkUmVxKVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtyZXNldH0gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkhlbHZldGljYSwgQXJpYWwsIFNhbnMtU2VyaWZcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjQwcHhcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogXCI3NXB4XCIgfX1cbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJkZG9kdXVndnVuMDguY2xvdWRmcm9udC5uZXQvaXRlbXMvMWgwUzJCM1EyRjJ4M2wxODFqMUQvZWdnby5zdmc/WC1DbG91ZEFwcC1WaXNpdG9yLUlkPTE5NzI3ODdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoMVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBcIjE1cHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBlZ2doZWFkIGluc3RydWN0b3IgZ3VpZGVcbiAgICAgICAgICA8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjQ0MHB4XCIsXG4gICAgICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vZDJlaXA5c2Yzb282YzIuY2xvdWRmcm9udC5uZXQvc2VyaWVzL3NxdWFyZV9jb3ZlcnMvMDAwLzAwMC8xNjcvc3F1YXJlXzQ4MC9FR0hfSlN0aGlzXzEwMDAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjQwcHhcIlxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiNjRweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogXCIzMHB4XCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7IGZsZXhTaHJpbms6IDAsIG1hcmdpblJpZ2h0OiBcIjI0cHhcIiB9fT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L2luc3RydWN0b3JzL2F2YXRhcnMvMDAwLzAwMC8xMTAvc3F1YXJlXzEyOC9tcGstb2N0LTIwMTgtNTAweDUwMC5qcGdcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBib3JkZXJSYWRpdXM6IFwiNTAlXCIsIHdpZHRoOiBcIjgwcHhcIiwgZmxleFNocmluazogMCB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMycHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJpdXMgU2NodWx6XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sKHBhcnNlZFJlcSkge1xuICBsZXQgbWFya3VwXG5cbiAgY29uc29sZS5sb2cocGFyc2VkUmVxKVxuICBzd2l0Y2ggKHBhcnNlZFJlcS5yZXNvdXJjZVR5cGUpIHtcbiAgICBjYXNlIFwiaW5zdHJ1Y3Rvci1ndWlkZVwiOlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoPEluc3RydWN0b3JHdWlkZSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz4pXG4gICAgICBicmVha1xuICAgIGNhc2UgXCJzZXJpZXNcIjpcbiAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldChcbiAgICAgICAgICBgaHR0cHM6Ly9lZ2doZWFkLmlvL2FwaS92MS8ke3BhcnNlZFJlcS5yZXNvdXJjZVR5cGV9LyR7cGFyc2VkUmVxLnRleHR9YFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gZGF0YSlcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKFxuICAgICAgICA8QXBwIHJlc291cmNlPXtyZXNvdXJjZX0gcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+XG4gICAgICApXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICB9XG4gIGNvbnNvbGUubG9nKG1hcmt1cClcbiAgcmV0dXJuIG1hcmt1cFxufVxuIl19 */"
};

var _ref13 = process.env.NODE_ENV === "production" ? {
  name: "n2we3d-InstructorGuide",
  styles: "flex-shrink:0;margin-right:24px;label:InstructorGuide;"
} : {
  name: "n2we3d-InstructorGuide",
  styles: "flex-shrink:0;margin-right:24px;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdJbUIiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgcmVuZGVyVG9TdGF0aWNNYXJrdXAgfSBmcm9tIFwicmVhY3QtZG9tL3NlcnZlclwiXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IGpzeCwgY3NzLCBHbG9iYWwgfSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyMTI2MmY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHsgcmVzb3VyY2UsIHBhcnNlZFJlcSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHsgdGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHMgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZyhcIlBBUlNFRCBSRVFVRVNUXCIsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgZm9udEZhbWlseTogXCJIZWx2ZXRpY2EsIEFyaWFsLCBTYW5zLVNlcmlmXCIsXG4gICAgICAgICAgcGFkZGluZzogXCI0MHB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGNzcz17eyBoZWlnaHQ6IFwiNzVweFwiIH19XG4gICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZGRvZHV1Z3Z1bjA4LmNsb3VkZnJvbnQubmV0L2l0ZW1zLzFoMFMyQjNRMkYyeDNsMTgxajFEL2VnZ28uc3ZnP1gtQ2xvdWRBcHAtVmlzaXRvci1JZD0xOTcyNzg3XCJcbiAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIxNXB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgZWdnaGVhZCBpbnN0cnVjdG9yIGd1aWRlXG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB3aWR0aDogXCI0NDBweFwiLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIlxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L3Nlcmllcy9zcXVhcmVfY292ZXJzLzAwMC8wMDAvMTY3L3NxdWFyZV80ODAvRUdIX0pTdGhpc18xMDAwLnBuZ1wiXG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI0MHB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjY0cHhcIixcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4xLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Ub3A6IFwiMzBweFwiLCBkaXNwbGF5OiBcImZsZXhcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNzcz17eyBmbGV4U2hyaW5rOiAwLCBtYXJnaW5SaWdodDogXCIyNHB4XCIgfX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9kMmVpcDlzZjNvbzZjMi5jbG91ZGZyb250Lm5ldC9pbnN0cnVjdG9ycy9hdmF0YXJzLzAwMC8wMDAvMTEwL3NxdWFyZV8xMjgvbXBrLW9jdC0yMDE4LTUwMHg1MDAuanBnXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLCB3aWR0aDogXCI4MHB4XCIsIGZsZXhTaHJpbms6IDAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMnB4XCIsXG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgTWFyaXVzIFNjaHVselxuICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSBcImluc3RydWN0b3ItZ3VpZGVcIjpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlIFwic2VyaWVzXCI6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoXG4gICAgICAgICAgYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWBcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

var _ref14 = process.env.NODE_ENV === "production" ? {
  name: "vz27vw-InstructorGuide",
  styles: "border-radius:50%;width:80px;flex-shrink:0;label:InstructorGuide;"
} : {
  name: "vz27vw-InstructorGuide",
  styles: "border-radius:50%;width:80px;flex-shrink:0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Ja0IiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgcmVuZGVyVG9TdGF0aWNNYXJrdXAgfSBmcm9tIFwicmVhY3QtZG9tL3NlcnZlclwiXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IGpzeCwgY3NzLCBHbG9iYWwgfSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyMTI2MmY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHsgcmVzb3VyY2UsIHBhcnNlZFJlcSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHsgdGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHMgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZyhcIlBBUlNFRCBSRVFVRVNUXCIsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgZm9udEZhbWlseTogXCJIZWx2ZXRpY2EsIEFyaWFsLCBTYW5zLVNlcmlmXCIsXG4gICAgICAgICAgcGFkZGluZzogXCI0MHB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGNzcz17eyBoZWlnaHQ6IFwiNzVweFwiIH19XG4gICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZGRvZHV1Z3Z1bjA4LmNsb3VkZnJvbnQubmV0L2l0ZW1zLzFoMFMyQjNRMkYyeDNsMTgxajFEL2VnZ28uc3ZnP1gtQ2xvdWRBcHAtVmlzaXRvci1JZD0xOTcyNzg3XCJcbiAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIxNXB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgZWdnaGVhZCBpbnN0cnVjdG9yIGd1aWRlXG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB3aWR0aDogXCI0NDBweFwiLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIlxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L3Nlcmllcy9zcXVhcmVfY292ZXJzLzAwMC8wMDAvMTY3L3NxdWFyZV80ODAvRUdIX0pTdGhpc18xMDAwLnBuZ1wiXG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI0MHB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjY0cHhcIixcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4xLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Ub3A6IFwiMzBweFwiLCBkaXNwbGF5OiBcImZsZXhcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNzcz17eyBmbGV4U2hyaW5rOiAwLCBtYXJnaW5SaWdodDogXCIyNHB4XCIgfX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9kMmVpcDlzZjNvbzZjMi5jbG91ZGZyb250Lm5ldC9pbnN0cnVjdG9ycy9hdmF0YXJzLzAwMC8wMDAvMTEwL3NxdWFyZV8xMjgvbXBrLW9jdC0yMDE4LTUwMHg1MDAuanBnXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLCB3aWR0aDogXCI4MHB4XCIsIGZsZXhTaHJpbms6IDAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMnB4XCIsXG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgTWFyaXVzIFNjaHVselxuICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSBcImluc3RydWN0b3ItZ3VpZGVcIjpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlIFwic2VyaWVzXCI6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoXG4gICAgICAgICAgYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWBcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

var _ref15 = process.env.NODE_ENV === "production" ? {
  name: "1t3l7cg-InstructorGuide",
  styles: "font-size:32px;font-weight:500;line-height:1.1;margin:0;label:InstructorGuide;"
} : {
  name: "1t3l7cg-InstructorGuide",
  styles: "font-size:32px;font-weight:500;line-height:1.1;margin:0;label:InstructorGuide;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fbGliL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdJZ0IiLCJmaWxlIjoiLi4vLi4vc3JjL19saWIvdGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgcmVuZGVyVG9TdGF0aWNNYXJrdXAgfSBmcm9tIFwicmVhY3QtZG9tL3NlcnZlclwiXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IGpzeCwgY3NzLCBHbG9iYWwgfSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiXG5cbmNvbnN0IHJlc2V0ID0gY3NzYFxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgY29sb3I6ICMyMTI2MmY7XG4gIH1cbiAgaHRtbCB7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgfVxuICBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuICBoMSxcbiAgaDIsXG4gIGgzLFxuICBoNCxcbiAgaDUsXG4gIGg2IHtcbiAgICBtYXJnaW46IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgfVxuICBoMiB7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDJyZW07XG4gIH1cbmBcblxuZnVuY3Rpb24gQXBwKHsgcmVzb3VyY2UsIHBhcnNlZFJlcSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT4tLS0tLXtwYXJzZWRSZXEudGV4dH08L2gxPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIEluc3RydWN0b3JHdWlkZSh7IHBhcnNlZFJlcSB9KSB7XG4gIGNvbnN0IHsgdGV4dCwgdGhlbWUsIG1kLCBmb250U2l6ZSwgaW1hZ2VzLCB3aWR0aHMsIGhlaWdodHMgfSA9IHBhcnNlZFJlcVxuICBjb25zb2xlLmxvZyhcIlBBUlNFRCBSRVFVRVNUXCIsIHBhcnNlZFJlcSlcbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17cmVzZXR9IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgZm9udEZhbWlseTogXCJIZWx2ZXRpY2EsIEFyaWFsLCBTYW5zLVNlcmlmXCIsXG4gICAgICAgICAgcGFkZGluZzogXCI0MHB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGNzcz17eyBoZWlnaHQ6IFwiNzVweFwiIH19XG4gICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZGRvZHV1Z3Z1bjA4LmNsb3VkZnJvbnQubmV0L2l0ZW1zLzFoMFMyQjNRMkYyeDNsMTgxajFEL2VnZ28uc3ZnP1gtQ2xvdWRBcHAtVmlzaXRvci1JZD0xOTcyNzg3XCJcbiAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aDFcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIxNXB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgZWdnaGVhZCBpbnN0cnVjdG9yIGd1aWRlXG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB3aWR0aDogXCI0NDBweFwiLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIlxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2QyZWlwOXNmM29vNmMyLmNsb3VkZnJvbnQubmV0L3Nlcmllcy9zcXVhcmVfY292ZXJzLzAwMC8wMDAvMTY3L3NxdWFyZV80ODAvRUdIX0pTdGhpc18xMDAwLnBuZ1wiXG4gICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI0MHB4XCJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjY0cHhcIixcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4xLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Ub3A6IFwiMzBweFwiLCBkaXNwbGF5OiBcImZsZXhcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNzcz17eyBmbGV4U2hyaW5rOiAwLCBtYXJnaW5SaWdodDogXCIyNHB4XCIgfX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9kMmVpcDlzZjNvbzZjMi5jbG91ZGZyb250Lm5ldC9pbnN0cnVjdG9ycy9hdmF0YXJzLzAwMC8wMDAvMTEwL3NxdWFyZV8xMjgvbXBrLW9jdC0yMDE4LTUwMHg1MDAuanBnXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICBjc3M9e3sgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLCB3aWR0aDogXCI4MHB4XCIsIGZsZXhTaHJpbms6IDAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMnB4XCIsXG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgTWFyaXVzIFNjaHVselxuICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SHRtbChwYXJzZWRSZXEpIHtcbiAgbGV0IG1hcmt1cFxuXG4gIGNvbnNvbGUubG9nKHBhcnNlZFJlcSlcbiAgc3dpdGNoIChwYXJzZWRSZXEucmVzb3VyY2VUeXBlKSB7XG4gICAgY2FzZSBcImluc3RydWN0b3ItZ3VpZGVcIjpcbiAgICAgIG1hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwKDxJbnN0cnVjdG9yR3VpZGUgcGFyc2VkUmVxPXtwYXJzZWRSZXF9IC8+KVxuICAgICAgYnJlYWtcbiAgICBjYXNlIFwic2VyaWVzXCI6XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IGF4aW9zXG4gICAgICAgIC5nZXQoXG4gICAgICAgICAgYGh0dHBzOi8vZWdnaGVhZC5pby9hcGkvdjEvJHtwYXJzZWRSZXEucmVzb3VyY2VUeXBlfS8ke3BhcnNlZFJlcS50ZXh0fWBcbiAgICAgICAgKVxuICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IGRhdGEpXG4gICAgICBtYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cChcbiAgICAgICAgPEFwcCByZXNvdXJjZT17cmVzb3VyY2V9IHBhcnNlZFJlcT17cGFyc2VkUmVxfSAvPlxuICAgICAgKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgbWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICAgIDxBcHAgcmVzb3VyY2U9e3Jlc291cmNlfSBwYXJzZWRSZXE9e3BhcnNlZFJlcX0gLz5cbiAgICAgIClcbiAgfVxuICBjb25zb2xlLmxvZyhtYXJrdXApXG4gIHJldHVybiBtYXJrdXBcbn1cbiJdfQ== */"
};

function InstructorGuide(_ref2) {
  var parsedReq = _ref2.parsedReq;
  var text = parsedReq.text,
      theme = parsedReq.theme,
      md = parsedReq.md,
      fontSize = parsedReq.fontSize,
      images = parsedReq.images,
      widths = parsedReq.widths,
      heights = parsedReq.heights;
  console.log("PARSED REQUEST", parsedReq);
  return (0, _core.jsx)(_react["default"].Fragment, null, (0, _core.jsx)(_core.Global, {
    styles: reset
  }), (0, _core.jsx)("div", {
    css: _ref3
  }, (0, _core.jsx)("div", {
    css: _ref4
  }, (0, _core.jsx)("img", {
    css: _ref5,
    src: "https://d2ddoduugvun08.cloudfront.net/items/1h0S2B3Q2F2x3l181j1D/eggo.svg?X-CloudApp-Visitor-Id=1972787",
    alt: ""
  }), (0, _core.jsx)("h1", {
    css: _ref6
  }, "egghead instructor guide")), (0, _core.jsx)("div", {
    css: _ref7
  }, (0, _core.jsx)("div", {
    css: _ref8
  }, (0, _core.jsx)("img", {
    css: _ref9,
    src: "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/167/square_480/EGH_JSthis_1000.png",
    alt: ""
  })), (0, _core.jsx)("div", {
    css: _ref10
  }, (0, _core.jsx)("h2", {
    css: _ref11
  }, text), (0, _core.jsx)("div", {
    css: _ref12
  }, (0, _core.jsx)("div", {
    css: _ref13
  }, (0, _core.jsx)("img", {
    src: "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/110/square_128/mpk-oct-2018-500x500.jpg",
    alt: "",
    css: _ref14
  })), (0, _core.jsx)("h3", {
    css: _ref15
  }, "Marius Schulz"))))));
}

function getHtml(_x) {
  return _getHtml.apply(this, arguments);
}

function _getHtml() {
  _getHtml = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(parsedReq) {
    var markup, resource;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(parsedReq);
            _context.t0 = parsedReq.resourceType;
            _context.next = _context.t0 === "instructor-guide" ? 4 : _context.t0 === "series" ? 6 : 11;
            break;

          case 4:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(InstructorGuide, {
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 12);

          case 6:
            _context.next = 8;
            return _axios["default"].get("https://egghead.io/api/v1/".concat(parsedReq.resourceType, "/").concat(parsedReq.text)).then(function (_ref16) {
              var data = _ref16.data;
              return data;
            });

          case 8:
            resource = _context.sent;
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));
            return _context.abrupt("break", 12);

          case 11:
            markup = (0, _server.renderToStaticMarkup)((0, _core.jsx)(App, {
              resource: resource,
              parsedReq: parsedReq
            }));

          case 12:
            console.log(markup);
            return _context.abrupt("return", markup);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getHtml.apply(this, arguments);
}